
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model UserClub
 * 
 */
export type UserClub = $Result.DefaultSelection<Prisma.$UserClubPayload>
/**
 * Model EventRegistration
 * 
 */
export type EventRegistration = $Result.DefaultSelection<Prisma.$EventRegistrationPayload>
/**
 * Model AttendanceLog
 * 
 */
export type AttendanceLog = $Result.DefaultSelection<Prisma.$AttendanceLogPayload>
/**
 * Model EventQRCode
 * 
 */
export type EventQRCode = $Result.DefaultSelection<Prisma.$EventQRCodePayload>
/**
 * Model PointsHistory
 * 
 */
export type PointsHistory = $Result.DefaultSelection<Prisma.$PointsHistoryPayload>
/**
 * Model EventFeedback
 * 
 */
export type EventFeedback = $Result.DefaultSelection<Prisma.$EventFeedbackPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  student: 'student',
  club_admin: 'club_admin',
  super_admin: 'super_admin'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ClubCategory: {
  technical: 'technical',
  cultural: 'cultural',
  sports: 'sports',
  academic: 'academic',
  social_service: 'social_service',
  entrepreneurship: 'entrepreneurship',
  arts: 'arts',
  other: 'other'
};

export type ClubCategory = (typeof ClubCategory)[keyof typeof ClubCategory]


export const EventType: {
  workshop: 'workshop',
  seminar: 'seminar',
  competition: 'competition',
  cultural_event: 'cultural_event',
  sports_event: 'sports_event',
  volunteering: 'volunteering',
  hackathon: 'hackathon',
  conference: 'conference',
  social_gathering: 'social_gathering',
  other: 'other'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const ClubMemberRole: {
  member: 'member',
  core_member: 'core_member',
  secretary: 'secretary',
  treasurer: 'treasurer',
  vice_president: 'vice_president',
  president: 'president'
};

export type ClubMemberRole = (typeof ClubMemberRole)[keyof typeof ClubMemberRole]


export const RegistrationStatus: {
  registered: 'registered',
  waitlisted: 'waitlisted',
  cancelled: 'cancelled',
  attended: 'attended',
  no_show: 'no_show'
};

export type RegistrationStatus = (typeof RegistrationStatus)[keyof typeof RegistrationStatus]


export const AttendanceMethod: {
  manual: 'manual',
  qr_code: 'qr_code',
  geofence: 'geofence',
  biometric: 'biometric'
};

export type AttendanceMethod = (typeof AttendanceMethod)[keyof typeof AttendanceMethod]


export const AttendanceAction: {
  marked_present: 'marked_present',
  marked_absent: 'marked_absent',
  unmarked: 'unmarked',
  updated_status: 'updated_status'
};

export type AttendanceAction = (typeof AttendanceAction)[keyof typeof AttendanceAction]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ClubCategory = $Enums.ClubCategory

export const ClubCategory: typeof $Enums.ClubCategory

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type ClubMemberRole = $Enums.ClubMemberRole

export const ClubMemberRole: typeof $Enums.ClubMemberRole

export type RegistrationStatus = $Enums.RegistrationStatus

export const RegistrationStatus: typeof $Enums.RegistrationStatus

export type AttendanceMethod = $Enums.AttendanceMethod

export const AttendanceMethod: typeof $Enums.AttendanceMethod

export type AttendanceAction = $Enums.AttendanceAction

export const AttendanceAction: typeof $Enums.AttendanceAction

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more RefreshTokens
 * const refreshTokens = await prisma.refreshToken.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more RefreshTokens
   * const refreshTokens = await prisma.refreshToken.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.userClub`: Exposes CRUD operations for the **UserClub** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserClubs
    * const userClubs = await prisma.userClub.findMany()
    * ```
    */
  get userClub(): Prisma.UserClubDelegate<ExtArgs>;

  /**
   * `prisma.eventRegistration`: Exposes CRUD operations for the **EventRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventRegistrations
    * const eventRegistrations = await prisma.eventRegistration.findMany()
    * ```
    */
  get eventRegistration(): Prisma.EventRegistrationDelegate<ExtArgs>;

  /**
   * `prisma.attendanceLog`: Exposes CRUD operations for the **AttendanceLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceLogs
    * const attendanceLogs = await prisma.attendanceLog.findMany()
    * ```
    */
  get attendanceLog(): Prisma.AttendanceLogDelegate<ExtArgs>;

  /**
   * `prisma.eventQRCode`: Exposes CRUD operations for the **EventQRCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventQRCodes
    * const eventQRCodes = await prisma.eventQRCode.findMany()
    * ```
    */
  get eventQRCode(): Prisma.EventQRCodeDelegate<ExtArgs>;

  /**
   * `prisma.pointsHistory`: Exposes CRUD operations for the **PointsHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PointsHistories
    * const pointsHistories = await prisma.pointsHistory.findMany()
    * ```
    */
  get pointsHistory(): Prisma.PointsHistoryDelegate<ExtArgs>;

  /**
   * `prisma.eventFeedback`: Exposes CRUD operations for the **EventFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventFeedbacks
    * const eventFeedbacks = await prisma.eventFeedback.findMany()
    * ```
    */
  get eventFeedback(): Prisma.EventFeedbackDelegate<ExtArgs>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    RefreshToken: 'RefreshToken',
    User: 'User',
    Club: 'Club',
    Event: 'Event',
    UserClub: 'UserClub',
    EventRegistration: 'EventRegistration',
    AttendanceLog: 'AttendanceLog',
    EventQRCode: 'EventQRCode',
    PointsHistory: 'PointsHistory',
    EventFeedback: 'EventFeedback',
    ChatRoom: 'ChatRoom',
    ChatMessage: 'ChatMessage',
    Notification: 'Notification',
    Badge: 'Badge',
    UserBadge: 'UserBadge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "refreshToken" | "user" | "club" | "event" | "userClub" | "eventRegistration" | "attendanceLog" | "eventQRCode" | "pointsHistory" | "eventFeedback" | "chatRoom" | "chatMessage" | "notification" | "badge" | "userBadge"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      UserClub: {
        payload: Prisma.$UserClubPayload<ExtArgs>
        fields: Prisma.UserClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          findFirst: {
            args: Prisma.UserClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          findMany: {
            args: Prisma.UserClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>[]
          }
          create: {
            args: Prisma.UserClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          createMany: {
            args: Prisma.UserClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>[]
          }
          delete: {
            args: Prisma.UserClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          update: {
            args: Prisma.UserClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          deleteMany: {
            args: Prisma.UserClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClubPayload>
          }
          aggregate: {
            args: Prisma.UserClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserClub>
          }
          groupBy: {
            args: Prisma.UserClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserClubCountArgs<ExtArgs>
            result: $Utils.Optional<UserClubCountAggregateOutputType> | number
          }
        }
      }
      EventRegistration: {
        payload: Prisma.$EventRegistrationPayload<ExtArgs>
        fields: Prisma.EventRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventRegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventRegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          findFirst: {
            args: Prisma.EventRegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventRegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          findMany: {
            args: Prisma.EventRegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>[]
          }
          create: {
            args: Prisma.EventRegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          createMany: {
            args: Prisma.EventRegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventRegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>[]
          }
          delete: {
            args: Prisma.EventRegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          update: {
            args: Prisma.EventRegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.EventRegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventRegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventRegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventRegistrationPayload>
          }
          aggregate: {
            args: Prisma.EventRegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventRegistration>
          }
          groupBy: {
            args: Prisma.EventRegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventRegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<EventRegistrationCountAggregateOutputType> | number
          }
        }
      }
      AttendanceLog: {
        payload: Prisma.$AttendanceLogPayload<ExtArgs>
        fields: Prisma.AttendanceLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          findFirst: {
            args: Prisma.AttendanceLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          findMany: {
            args: Prisma.AttendanceLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>[]
          }
          create: {
            args: Prisma.AttendanceLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          createMany: {
            args: Prisma.AttendanceLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>[]
          }
          delete: {
            args: Prisma.AttendanceLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          update: {
            args: Prisma.AttendanceLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttendanceLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLogPayload>
          }
          aggregate: {
            args: Prisma.AttendanceLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceLog>
          }
          groupBy: {
            args: Prisma.AttendanceLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceLogCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLogCountAggregateOutputType> | number
          }
        }
      }
      EventQRCode: {
        payload: Prisma.$EventQRCodePayload<ExtArgs>
        fields: Prisma.EventQRCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventQRCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventQRCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          findFirst: {
            args: Prisma.EventQRCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventQRCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          findMany: {
            args: Prisma.EventQRCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>[]
          }
          create: {
            args: Prisma.EventQRCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          createMany: {
            args: Prisma.EventQRCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventQRCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>[]
          }
          delete: {
            args: Prisma.EventQRCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          update: {
            args: Prisma.EventQRCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          deleteMany: {
            args: Prisma.EventQRCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventQRCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventQRCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventQRCodePayload>
          }
          aggregate: {
            args: Prisma.EventQRCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventQRCode>
          }
          groupBy: {
            args: Prisma.EventQRCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventQRCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventQRCodeCountArgs<ExtArgs>
            result: $Utils.Optional<EventQRCodeCountAggregateOutputType> | number
          }
        }
      }
      PointsHistory: {
        payload: Prisma.$PointsHistoryPayload<ExtArgs>
        fields: Prisma.PointsHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PointsHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PointsHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          findFirst: {
            args: Prisma.PointsHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PointsHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          findMany: {
            args: Prisma.PointsHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>[]
          }
          create: {
            args: Prisma.PointsHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          createMany: {
            args: Prisma.PointsHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PointsHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>[]
          }
          delete: {
            args: Prisma.PointsHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          update: {
            args: Prisma.PointsHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PointsHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PointsHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PointsHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PointsHistoryPayload>
          }
          aggregate: {
            args: Prisma.PointsHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePointsHistory>
          }
          groupBy: {
            args: Prisma.PointsHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PointsHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PointsHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PointsHistoryCountAggregateOutputType> | number
          }
        }
      }
      EventFeedback: {
        payload: Prisma.$EventFeedbackPayload<ExtArgs>
        fields: Prisma.EventFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          findFirst: {
            args: Prisma.EventFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          findMany: {
            args: Prisma.EventFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>[]
          }
          create: {
            args: Prisma.EventFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          createMany: {
            args: Prisma.EventFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>[]
          }
          delete: {
            args: Prisma.EventFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          update: {
            args: Prisma.EventFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.EventFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventFeedbackPayload>
          }
          aggregate: {
            args: Prisma.EventFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventFeedback>
          }
          groupBy: {
            args: Prisma.EventFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<EventFeedbackCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    attendanceLogs: number
    attendanceLogsUser: number
    chatMessages: number
    createdClubs: number
    eventFeedback: number
    createdQRCodes: number
    markedAttendance: number
    eventRegistrations: number
    createdEvents: number
    notifications: number
    pointsHistory: number
    userBadges: number
    userClubs: number
    refreshTokens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceLogs?: boolean | UserCountOutputTypeCountAttendanceLogsArgs
    attendanceLogsUser?: boolean | UserCountOutputTypeCountAttendanceLogsUserArgs
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
    createdClubs?: boolean | UserCountOutputTypeCountCreatedClubsArgs
    eventFeedback?: boolean | UserCountOutputTypeCountEventFeedbackArgs
    createdQRCodes?: boolean | UserCountOutputTypeCountCreatedQRCodesArgs
    markedAttendance?: boolean | UserCountOutputTypeCountMarkedAttendanceArgs
    eventRegistrations?: boolean | UserCountOutputTypeCountEventRegistrationsArgs
    createdEvents?: boolean | UserCountOutputTypeCountCreatedEventsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    pointsHistory?: boolean | UserCountOutputTypeCountPointsHistoryArgs
    userBadges?: boolean | UserCountOutputTypeCountUserBadgesArgs
    userClubs?: boolean | UserCountOutputTypeCountUserClubsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceLogsUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventFeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedQRCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventQRCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMarkedAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventRegistrationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventRegistrationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPointsHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PointsHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClubWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    chatRooms: number
    events: number
    userClubs: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRooms?: boolean | ClubCountOutputTypeCountChatRoomsArgs
    events?: boolean | ClubCountOutputTypeCountEventsArgs
    userClubs?: boolean | ClubCountOutputTypeCountUserClubsArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountUserClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClubWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendanceLogs: number
    eventFeedback: number
    eventQRCodes: number
    eventRegistrations: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceLogs?: boolean | EventCountOutputTypeCountAttendanceLogsArgs
    eventFeedback?: boolean | EventCountOutputTypeCountEventFeedbackArgs
    eventQRCodes?: boolean | EventCountOutputTypeCountEventQRCodesArgs
    eventRegistrations?: boolean | EventCountOutputTypeCountEventRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventFeedbackWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventQRCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventQRCodeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventRegistrationWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type BadgeCountOutputType
   */

  export type BadgeCountOutputType = {
    userBadges: number
  }

  export type BadgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | BadgeCountOutputTypeCountUserBadgesArgs
  }

  // Custom InputTypes
  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeCountOutputType
     */
    select?: BadgeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    yearOfStudy: number | null
    totalPoints: number | null
    totalVolunteerHours: number | null
  }

  export type UserSumAggregateOutputType = {
    yearOfStudy: number | null
    totalPoints: number | null
    totalVolunteerHours: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    studentId: string | null
    phone: string | null
    department: string | null
    yearOfStudy: number | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    profileImage: string | null
    totalPoints: number | null
    totalVolunteerHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    studentId: string | null
    phone: string | null
    department: string | null
    yearOfStudy: number | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    profileImage: string | null
    totalPoints: number | null
    totalVolunteerHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    firstName: number
    lastName: number
    studentId: number
    phone: number
    department: number
    yearOfStudy: number
    role: number
    isVerified: number
    profileImage: number
    totalPoints: number
    totalVolunteerHours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    yearOfStudy?: true
    totalPoints?: true
    totalVolunteerHours?: true
  }

  export type UserSumAggregateInputType = {
    yearOfStudy?: true
    totalPoints?: true
    totalVolunteerHours?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    studentId?: true
    phone?: true
    department?: true
    yearOfStudy?: true
    role?: true
    isVerified?: true
    profileImage?: true
    totalPoints?: true
    totalVolunteerHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    studentId?: true
    phone?: true
    department?: true
    yearOfStudy?: true
    role?: true
    isVerified?: true
    profileImage?: true
    totalPoints?: true
    totalVolunteerHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    studentId?: true
    phone?: true
    department?: true
    yearOfStudy?: true
    role?: true
    isVerified?: true
    profileImage?: true
    totalPoints?: true
    totalVolunteerHours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId: string | null
    phone: string | null
    department: string | null
    yearOfStudy: number | null
    role: $Enums.UserRole
    isVerified: boolean
    profileImage: string | null
    totalPoints: number
    totalVolunteerHours: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    studentId?: boolean
    phone?: boolean
    department?: boolean
    yearOfStudy?: boolean
    role?: boolean
    isVerified?: boolean
    profileImage?: boolean
    totalPoints?: boolean
    totalVolunteerHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attendanceLogs?: boolean | User$attendanceLogsArgs<ExtArgs>
    attendanceLogsUser?: boolean | User$attendanceLogsUserArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    createdClubs?: boolean | User$createdClubsArgs<ExtArgs>
    eventFeedback?: boolean | User$eventFeedbackArgs<ExtArgs>
    createdQRCodes?: boolean | User$createdQRCodesArgs<ExtArgs>
    markedAttendance?: boolean | User$markedAttendanceArgs<ExtArgs>
    eventRegistrations?: boolean | User$eventRegistrationsArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    pointsHistory?: boolean | User$pointsHistoryArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    userClubs?: boolean | User$userClubsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    studentId?: boolean
    phone?: boolean
    department?: boolean
    yearOfStudy?: boolean
    role?: boolean
    isVerified?: boolean
    profileImage?: boolean
    totalPoints?: boolean
    totalVolunteerHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    studentId?: boolean
    phone?: boolean
    department?: boolean
    yearOfStudy?: boolean
    role?: boolean
    isVerified?: boolean
    profileImage?: boolean
    totalPoints?: boolean
    totalVolunteerHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceLogs?: boolean | User$attendanceLogsArgs<ExtArgs>
    attendanceLogsUser?: boolean | User$attendanceLogsUserArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    createdClubs?: boolean | User$createdClubsArgs<ExtArgs>
    eventFeedback?: boolean | User$eventFeedbackArgs<ExtArgs>
    createdQRCodes?: boolean | User$createdQRCodesArgs<ExtArgs>
    markedAttendance?: boolean | User$markedAttendanceArgs<ExtArgs>
    eventRegistrations?: boolean | User$eventRegistrationsArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    pointsHistory?: boolean | User$pointsHistoryArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    userClubs?: boolean | User$userClubsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      attendanceLogs: Prisma.$AttendanceLogPayload<ExtArgs>[]
      attendanceLogsUser: Prisma.$AttendanceLogPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      createdClubs: Prisma.$ClubPayload<ExtArgs>[]
      eventFeedback: Prisma.$EventFeedbackPayload<ExtArgs>[]
      createdQRCodes: Prisma.$EventQRCodePayload<ExtArgs>[]
      markedAttendance: Prisma.$EventRegistrationPayload<ExtArgs>[]
      eventRegistrations: Prisma.$EventRegistrationPayload<ExtArgs>[]
      createdEvents: Prisma.$EventPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      pointsHistory: Prisma.$PointsHistoryPayload<ExtArgs>[]
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
      userClubs: Prisma.$UserClubPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      firstName: string
      lastName: string
      studentId: string | null
      phone: string | null
      department: string | null
      yearOfStudy: number | null
      role: $Enums.UserRole
      isVerified: boolean
      profileImage: string | null
      totalPoints: number
      totalVolunteerHours: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendanceLogs<T extends User$attendanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$attendanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany"> | Null>
    attendanceLogsUser<T extends User$attendanceLogsUserArgs<ExtArgs> = {}>(args?: Subset<T, User$attendanceLogsUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany"> | Null>
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    createdClubs<T extends User$createdClubsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany"> | Null>
    eventFeedback<T extends User$eventFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$eventFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    createdQRCodes<T extends User$createdQRCodesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdQRCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findMany"> | Null>
    markedAttendance<T extends User$markedAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$markedAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    eventRegistrations<T extends User$eventRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    createdEvents<T extends User$createdEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    pointsHistory<T extends User$pointsHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$pointsHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    userBadges<T extends User$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, User$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany"> | Null>
    userClubs<T extends User$userClubsArgs<ExtArgs> = {}>(args?: Subset<T, User$userClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findMany"> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly studentId: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly yearOfStudy: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly totalPoints: FieldRef<"User", 'Int'>
    readonly totalVolunteerHours: FieldRef<"User", 'Float'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.attendanceLogs
   */
  export type User$attendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * User.attendanceLogsUser
   */
  export type User$attendanceLogsUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.createdClubs
   */
  export type User$createdClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    cursor?: ClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * User.eventFeedback
   */
  export type User$eventFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    where?: EventFeedbackWhereInput
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    cursor?: EventFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventFeedbackScalarFieldEnum | EventFeedbackScalarFieldEnum[]
  }

  /**
   * User.createdQRCodes
   */
  export type User$createdQRCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    where?: EventQRCodeWhereInput
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    cursor?: EventQRCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventQRCodeScalarFieldEnum | EventQRCodeScalarFieldEnum[]
  }

  /**
   * User.markedAttendance
   */
  export type User$markedAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    where?: EventRegistrationWhereInput
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    cursor?: EventRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * User.eventRegistrations
   */
  export type User$eventRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    where?: EventRegistrationWhereInput
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    cursor?: EventRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * User.createdEvents
   */
  export type User$createdEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.pointsHistory
   */
  export type User$pointsHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    where?: PointsHistoryWhereInput
    orderBy?: PointsHistoryOrderByWithRelationInput | PointsHistoryOrderByWithRelationInput[]
    cursor?: PointsHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PointsHistoryScalarFieldEnum | PointsHistoryScalarFieldEnum[]
  }

  /**
   * User.userBadges
   */
  export type User$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.userClubs
   */
  export type User$userClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    where?: UserClubWhereInput
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    cursor?: UserClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserClubScalarFieldEnum | UserClubScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubAvgAggregateOutputType = {
    memberCount: number | null
  }

  export type ClubSumAggregateOutputType = {
    memberCount: number | null
  }

  export type ClubMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.ClubCategory | null
    logoUrl: string | null
    coverImageUrl: string | null
    contactEmail: string | null
    isActive: boolean | null
    memberCount: number | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.ClubCategory | null
    logoUrl: string | null
    coverImageUrl: string | null
    contactEmail: string | null
    isActive: boolean | null
    memberCount: number | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    logoUrl: number
    coverImageUrl: number
    contactEmail: number
    isActive: number
    memberCount: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClubAvgAggregateInputType = {
    memberCount?: true
  }

  export type ClubSumAggregateInputType = {
    memberCount?: true
  }

  export type ClubMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    logoUrl?: true
    coverImageUrl?: true
    contactEmail?: true
    isActive?: true
    memberCount?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    logoUrl?: true
    coverImageUrl?: true
    contactEmail?: true
    isActive?: true
    memberCount?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    logoUrl?: true
    coverImageUrl?: true
    contactEmail?: true
    isActive?: true
    memberCount?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _avg?: ClubAvgAggregateInputType
    _sum?: ClubSumAggregateInputType
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: $Enums.ClubCategory
    logoUrl: string | null
    coverImageUrl: string | null
    contactEmail: string | null
    isActive: boolean
    memberCount: number
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    logoUrl?: boolean
    coverImageUrl?: boolean
    contactEmail?: boolean
    isActive?: boolean
    memberCount?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatRooms?: boolean | Club$chatRoomsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    events?: boolean | Club$eventsArgs<ExtArgs>
    userClubs?: boolean | Club$userClubsArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    logoUrl?: boolean
    coverImageUrl?: boolean
    contactEmail?: boolean
    isActive?: boolean
    memberCount?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    logoUrl?: boolean
    coverImageUrl?: boolean
    contactEmail?: boolean
    isActive?: boolean
    memberCount?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRooms?: boolean | Club$chatRoomsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    events?: boolean | Club$eventsArgs<ExtArgs>
    userClubs?: boolean | Club$userClubsArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      chatRooms: Prisma.$ChatRoomPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      events: Prisma.$EventPayload<ExtArgs>[]
      userClubs: Prisma.$UserClubPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: $Enums.ClubCategory
      logoUrl: string | null
      coverImageUrl: string | null
      contactEmail: string | null
      isActive: boolean
      memberCount: number
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clubs and returns the data saved in the database.
     * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatRooms<T extends Club$chatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, Club$chatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    events<T extends Club$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Club$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    userClubs<T extends Club$userClubsArgs<ExtArgs> = {}>(args?: Subset<T, Club$userClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */ 
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'String'>
    readonly name: FieldRef<"Club", 'String'>
    readonly description: FieldRef<"Club", 'String'>
    readonly category: FieldRef<"Club", 'ClubCategory'>
    readonly logoUrl: FieldRef<"Club", 'String'>
    readonly coverImageUrl: FieldRef<"Club", 'String'>
    readonly contactEmail: FieldRef<"Club", 'String'>
    readonly isActive: FieldRef<"Club", 'Boolean'>
    readonly memberCount: FieldRef<"Club", 'Int'>
    readonly createdBy: FieldRef<"Club", 'String'>
    readonly createdAt: FieldRef<"Club", 'DateTime'>
    readonly updatedAt: FieldRef<"Club", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club createManyAndReturn
   */
  export type ClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
  }

  /**
   * Club.chatRooms
   */
  export type Club$chatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * Club.events
   */
  export type Club$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Club.userClubs
   */
  export type Club$userClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    where?: UserClubWhereInput
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    cursor?: UserClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserClubScalarFieldEnum | UserClubScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    maxParticipants: number | null
    pointsReward: number | null
    volunteerHours: number | null
  }

  export type EventSumAggregateOutputType = {
    maxParticipants: number | null
    pointsReward: number | null
    volunteerHours: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    clubId: string | null
    eventType: $Enums.EventType | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    maxParticipants: number | null
    registrationDeadline: Date | null
    pointsReward: number | null
    volunteerHours: number | null
    imageUrl: string | null
    isPublished: boolean | null
    requiresApproval: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    clubId: string | null
    eventType: $Enums.EventType | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    maxParticipants: number | null
    registrationDeadline: Date | null
    pointsReward: number | null
    volunteerHours: number | null
    imageUrl: string | null
    isPublished: boolean | null
    requiresApproval: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    clubId: number
    eventType: number
    startDate: number
    endDate: number
    location: number
    maxParticipants: number
    registrationDeadline: number
    pointsReward: number
    volunteerHours: number
    imageUrl: number
    tags: number
    skillAreas: number
    isPublished: number
    requiresApproval: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    maxParticipants?: true
    pointsReward?: true
    volunteerHours?: true
  }

  export type EventSumAggregateInputType = {
    maxParticipants?: true
    pointsReward?: true
    volunteerHours?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clubId?: true
    eventType?: true
    startDate?: true
    endDate?: true
    location?: true
    maxParticipants?: true
    registrationDeadline?: true
    pointsReward?: true
    volunteerHours?: true
    imageUrl?: true
    isPublished?: true
    requiresApproval?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clubId?: true
    eventType?: true
    startDate?: true
    endDate?: true
    location?: true
    maxParticipants?: true
    registrationDeadline?: true
    pointsReward?: true
    volunteerHours?: true
    imageUrl?: true
    isPublished?: true
    requiresApproval?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clubId?: true
    eventType?: true
    startDate?: true
    endDate?: true
    location?: true
    maxParticipants?: true
    registrationDeadline?: true
    pointsReward?: true
    volunteerHours?: true
    imageUrl?: true
    tags?: true
    skillAreas?: true
    isPublished?: true
    requiresApproval?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date
    endDate: Date
    location: string | null
    maxParticipants: number | null
    registrationDeadline: Date | null
    pointsReward: number
    volunteerHours: number
    imageUrl: string | null
    tags: string[]
    skillAreas: string[]
    isPublished: boolean
    requiresApproval: boolean
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    clubId?: boolean
    eventType?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    maxParticipants?: boolean
    registrationDeadline?: boolean
    pointsReward?: boolean
    volunteerHours?: boolean
    imageUrl?: boolean
    tags?: boolean
    skillAreas?: boolean
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attendanceLogs?: boolean | Event$attendanceLogsArgs<ExtArgs>
    eventFeedback?: boolean | Event$eventFeedbackArgs<ExtArgs>
    eventQRCodes?: boolean | Event$eventQRCodesArgs<ExtArgs>
    eventRegistrations?: boolean | Event$eventRegistrationsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    clubId?: boolean
    eventType?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    maxParticipants?: boolean
    registrationDeadline?: boolean
    pointsReward?: boolean
    volunteerHours?: boolean
    imageUrl?: boolean
    tags?: boolean
    skillAreas?: boolean
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    clubId?: boolean
    eventType?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    maxParticipants?: boolean
    registrationDeadline?: boolean
    pointsReward?: boolean
    volunteerHours?: boolean
    imageUrl?: boolean
    tags?: boolean
    skillAreas?: boolean
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceLogs?: boolean | Event$attendanceLogsArgs<ExtArgs>
    eventFeedback?: boolean | Event$eventFeedbackArgs<ExtArgs>
    eventQRCodes?: boolean | Event$eventQRCodesArgs<ExtArgs>
    eventRegistrations?: boolean | Event$eventRegistrationsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      attendanceLogs: Prisma.$AttendanceLogPayload<ExtArgs>[]
      eventFeedback: Prisma.$EventFeedbackPayload<ExtArgs>[]
      eventQRCodes: Prisma.$EventQRCodePayload<ExtArgs>[]
      eventRegistrations: Prisma.$EventRegistrationPayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      clubId: string
      eventType: $Enums.EventType
      startDate: Date
      endDate: Date
      location: string | null
      maxParticipants: number | null
      registrationDeadline: Date | null
      pointsReward: number
      volunteerHours: number
      imageUrl: string | null
      tags: string[]
      skillAreas: string[]
      isPublished: boolean
      requiresApproval: boolean
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendanceLogs<T extends Event$attendanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany"> | Null>
    eventFeedback<T extends Event$eventFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Event$eventFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    eventQRCodes<T extends Event$eventQRCodesArgs<ExtArgs> = {}>(args?: Subset<T, Event$eventQRCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findMany"> | Null>
    eventRegistrations<T extends Event$eventRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, Event$eventRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly clubId: FieldRef<"Event", 'String'>
    readonly eventType: FieldRef<"Event", 'EventType'>
    readonly startDate: FieldRef<"Event", 'DateTime'>
    readonly endDate: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly maxParticipants: FieldRef<"Event", 'Int'>
    readonly registrationDeadline: FieldRef<"Event", 'DateTime'>
    readonly pointsReward: FieldRef<"Event", 'Int'>
    readonly volunteerHours: FieldRef<"Event", 'Float'>
    readonly imageUrl: FieldRef<"Event", 'String'>
    readonly tags: FieldRef<"Event", 'String[]'>
    readonly skillAreas: FieldRef<"Event", 'String[]'>
    readonly isPublished: FieldRef<"Event", 'Boolean'>
    readonly requiresApproval: FieldRef<"Event", 'Boolean'>
    readonly createdBy: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.attendanceLogs
   */
  export type Event$attendanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    cursor?: AttendanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * Event.eventFeedback
   */
  export type Event$eventFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    where?: EventFeedbackWhereInput
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    cursor?: EventFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventFeedbackScalarFieldEnum | EventFeedbackScalarFieldEnum[]
  }

  /**
   * Event.eventQRCodes
   */
  export type Event$eventQRCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    where?: EventQRCodeWhereInput
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    cursor?: EventQRCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventQRCodeScalarFieldEnum | EventQRCodeScalarFieldEnum[]
  }

  /**
   * Event.eventRegistrations
   */
  export type Event$eventRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    where?: EventRegistrationWhereInput
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    cursor?: EventRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model UserClub
   */

  export type AggregateUserClub = {
    _count: UserClubCountAggregateOutputType | null
    _min: UserClubMinAggregateOutputType | null
    _max: UserClubMaxAggregateOutputType | null
  }

  export type UserClubMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clubId: string | null
    role: $Enums.ClubMemberRole | null
    joinedAt: Date | null
    isActive: boolean | null
  }

  export type UserClubMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clubId: string | null
    role: $Enums.ClubMemberRole | null
    joinedAt: Date | null
    isActive: boolean | null
  }

  export type UserClubCountAggregateOutputType = {
    id: number
    userId: number
    clubId: number
    role: number
    joinedAt: number
    isActive: number
    _all: number
  }


  export type UserClubMinAggregateInputType = {
    id?: true
    userId?: true
    clubId?: true
    role?: true
    joinedAt?: true
    isActive?: true
  }

  export type UserClubMaxAggregateInputType = {
    id?: true
    userId?: true
    clubId?: true
    role?: true
    joinedAt?: true
    isActive?: true
  }

  export type UserClubCountAggregateInputType = {
    id?: true
    userId?: true
    clubId?: true
    role?: true
    joinedAt?: true
    isActive?: true
    _all?: true
  }

  export type UserClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClub to aggregate.
     */
    where?: UserClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClubs to fetch.
     */
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserClubs
    **/
    _count?: true | UserClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserClubMaxAggregateInputType
  }

  export type GetUserClubAggregateType<T extends UserClubAggregateArgs> = {
        [P in keyof T & keyof AggregateUserClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserClub[P]>
      : GetScalarType<T[P], AggregateUserClub[P]>
  }




  export type UserClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClubWhereInput
    orderBy?: UserClubOrderByWithAggregationInput | UserClubOrderByWithAggregationInput[]
    by: UserClubScalarFieldEnum[] | UserClubScalarFieldEnum
    having?: UserClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserClubCountAggregateInputType | true
    _min?: UserClubMinAggregateInputType
    _max?: UserClubMaxAggregateInputType
  }

  export type UserClubGroupByOutputType = {
    id: string
    userId: string
    clubId: string
    role: $Enums.ClubMemberRole
    joinedAt: Date
    isActive: boolean
    _count: UserClubCountAggregateOutputType | null
    _min: UserClubMinAggregateOutputType | null
    _max: UserClubMaxAggregateOutputType | null
  }

  type GetUserClubGroupByPayload<T extends UserClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserClubGroupByOutputType[P]>
            : GetScalarType<T[P], UserClubGroupByOutputType[P]>
        }
      >
    >


  export type UserClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clubId?: boolean
    role?: boolean
    joinedAt?: boolean
    isActive?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userClub"]>

  export type UserClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clubId?: boolean
    role?: boolean
    joinedAt?: boolean
    isActive?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userClub"]>

  export type UserClubSelectScalar = {
    id?: boolean
    userId?: boolean
    clubId?: boolean
    role?: boolean
    joinedAt?: boolean
    isActive?: boolean
  }

  export type UserClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserClub"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      clubId: string
      role: $Enums.ClubMemberRole
      joinedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["userClub"]>
    composites: {}
  }

  type UserClubGetPayload<S extends boolean | null | undefined | UserClubDefaultArgs> = $Result.GetResult<Prisma.$UserClubPayload, S>

  type UserClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserClubFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserClubCountAggregateInputType | true
    }

  export interface UserClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserClub'], meta: { name: 'UserClub' } }
    /**
     * Find zero or one UserClub that matches the filter.
     * @param {UserClubFindUniqueArgs} args - Arguments to find a UserClub
     * @example
     * // Get one UserClub
     * const userClub = await prisma.userClub.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserClubFindUniqueArgs>(args: SelectSubset<T, UserClubFindUniqueArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserClub that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserClubFindUniqueOrThrowArgs} args - Arguments to find a UserClub
     * @example
     * // Get one UserClub
     * const userClub = await prisma.userClub.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserClubFindUniqueOrThrowArgs>(args: SelectSubset<T, UserClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserClub that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubFindFirstArgs} args - Arguments to find a UserClub
     * @example
     * // Get one UserClub
     * const userClub = await prisma.userClub.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserClubFindFirstArgs>(args?: SelectSubset<T, UserClubFindFirstArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserClub that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubFindFirstOrThrowArgs} args - Arguments to find a UserClub
     * @example
     * // Get one UserClub
     * const userClub = await prisma.userClub.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserClubFindFirstOrThrowArgs>(args?: SelectSubset<T, UserClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserClubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserClubs
     * const userClubs = await prisma.userClub.findMany()
     * 
     * // Get first 10 UserClubs
     * const userClubs = await prisma.userClub.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userClubWithIdOnly = await prisma.userClub.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserClubFindManyArgs>(args?: SelectSubset<T, UserClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserClub.
     * @param {UserClubCreateArgs} args - Arguments to create a UserClub.
     * @example
     * // Create one UserClub
     * const UserClub = await prisma.userClub.create({
     *   data: {
     *     // ... data to create a UserClub
     *   }
     * })
     * 
     */
    create<T extends UserClubCreateArgs>(args: SelectSubset<T, UserClubCreateArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserClubs.
     * @param {UserClubCreateManyArgs} args - Arguments to create many UserClubs.
     * @example
     * // Create many UserClubs
     * const userClub = await prisma.userClub.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserClubCreateManyArgs>(args?: SelectSubset<T, UserClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserClubs and returns the data saved in the database.
     * @param {UserClubCreateManyAndReturnArgs} args - Arguments to create many UserClubs.
     * @example
     * // Create many UserClubs
     * const userClub = await prisma.userClub.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserClubs and only return the `id`
     * const userClubWithIdOnly = await prisma.userClub.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserClubCreateManyAndReturnArgs>(args?: SelectSubset<T, UserClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserClub.
     * @param {UserClubDeleteArgs} args - Arguments to delete one UserClub.
     * @example
     * // Delete one UserClub
     * const UserClub = await prisma.userClub.delete({
     *   where: {
     *     // ... filter to delete one UserClub
     *   }
     * })
     * 
     */
    delete<T extends UserClubDeleteArgs>(args: SelectSubset<T, UserClubDeleteArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserClub.
     * @param {UserClubUpdateArgs} args - Arguments to update one UserClub.
     * @example
     * // Update one UserClub
     * const userClub = await prisma.userClub.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserClubUpdateArgs>(args: SelectSubset<T, UserClubUpdateArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserClubs.
     * @param {UserClubDeleteManyArgs} args - Arguments to filter UserClubs to delete.
     * @example
     * // Delete a few UserClubs
     * const { count } = await prisma.userClub.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserClubDeleteManyArgs>(args?: SelectSubset<T, UserClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserClubs
     * const userClub = await prisma.userClub.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserClubUpdateManyArgs>(args: SelectSubset<T, UserClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserClub.
     * @param {UserClubUpsertArgs} args - Arguments to update or create a UserClub.
     * @example
     * // Update or create a UserClub
     * const userClub = await prisma.userClub.upsert({
     *   create: {
     *     // ... data to create a UserClub
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserClub we want to update
     *   }
     * })
     */
    upsert<T extends UserClubUpsertArgs>(args: SelectSubset<T, UserClubUpsertArgs<ExtArgs>>): Prisma__UserClubClient<$Result.GetResult<Prisma.$UserClubPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubCountArgs} args - Arguments to filter UserClubs to count.
     * @example
     * // Count the number of UserClubs
     * const count = await prisma.userClub.count({
     *   where: {
     *     // ... the filter for the UserClubs we want to count
     *   }
     * })
    **/
    count<T extends UserClubCountArgs>(
      args?: Subset<T, UserClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserClub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserClubAggregateArgs>(args: Subset<T, UserClubAggregateArgs>): Prisma.PrismaPromise<GetUserClubAggregateType<T>>

    /**
     * Group by UserClub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserClubGroupByArgs['orderBy'] }
        : { orderBy?: UserClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserClub model
   */
  readonly fields: UserClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserClub.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserClub model
   */ 
  interface UserClubFieldRefs {
    readonly id: FieldRef<"UserClub", 'String'>
    readonly userId: FieldRef<"UserClub", 'String'>
    readonly clubId: FieldRef<"UserClub", 'String'>
    readonly role: FieldRef<"UserClub", 'ClubMemberRole'>
    readonly joinedAt: FieldRef<"UserClub", 'DateTime'>
    readonly isActive: FieldRef<"UserClub", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserClub findUnique
   */
  export type UserClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter, which UserClub to fetch.
     */
    where: UserClubWhereUniqueInput
  }

  /**
   * UserClub findUniqueOrThrow
   */
  export type UserClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter, which UserClub to fetch.
     */
    where: UserClubWhereUniqueInput
  }

  /**
   * UserClub findFirst
   */
  export type UserClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter, which UserClub to fetch.
     */
    where?: UserClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClubs to fetch.
     */
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClubs.
     */
    cursor?: UserClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClubs.
     */
    distinct?: UserClubScalarFieldEnum | UserClubScalarFieldEnum[]
  }

  /**
   * UserClub findFirstOrThrow
   */
  export type UserClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter, which UserClub to fetch.
     */
    where?: UserClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClubs to fetch.
     */
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClubs.
     */
    cursor?: UserClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClubs.
     */
    distinct?: UserClubScalarFieldEnum | UserClubScalarFieldEnum[]
  }

  /**
   * UserClub findMany
   */
  export type UserClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter, which UserClubs to fetch.
     */
    where?: UserClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClubs to fetch.
     */
    orderBy?: UserClubOrderByWithRelationInput | UserClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserClubs.
     */
    cursor?: UserClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClubs.
     */
    skip?: number
    distinct?: UserClubScalarFieldEnum | UserClubScalarFieldEnum[]
  }

  /**
   * UserClub create
   */
  export type UserClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * The data needed to create a UserClub.
     */
    data: XOR<UserClubCreateInput, UserClubUncheckedCreateInput>
  }

  /**
   * UserClub createMany
   */
  export type UserClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserClubs.
     */
    data: UserClubCreateManyInput | UserClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserClub createManyAndReturn
   */
  export type UserClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserClubs.
     */
    data: UserClubCreateManyInput | UserClubCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserClub update
   */
  export type UserClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * The data needed to update a UserClub.
     */
    data: XOR<UserClubUpdateInput, UserClubUncheckedUpdateInput>
    /**
     * Choose, which UserClub to update.
     */
    where: UserClubWhereUniqueInput
  }

  /**
   * UserClub updateMany
   */
  export type UserClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserClubs.
     */
    data: XOR<UserClubUpdateManyMutationInput, UserClubUncheckedUpdateManyInput>
    /**
     * Filter which UserClubs to update
     */
    where?: UserClubWhereInput
  }

  /**
   * UserClub upsert
   */
  export type UserClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * The filter to search for the UserClub to update in case it exists.
     */
    where: UserClubWhereUniqueInput
    /**
     * In case the UserClub found by the `where` argument doesn't exist, create a new UserClub with this data.
     */
    create: XOR<UserClubCreateInput, UserClubUncheckedCreateInput>
    /**
     * In case the UserClub was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserClubUpdateInput, UserClubUncheckedUpdateInput>
  }

  /**
   * UserClub delete
   */
  export type UserClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
    /**
     * Filter which UserClub to delete.
     */
    where: UserClubWhereUniqueInput
  }

  /**
   * UserClub deleteMany
   */
  export type UserClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClubs to delete
     */
    where?: UserClubWhereInput
  }

  /**
   * UserClub without action
   */
  export type UserClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClub
     */
    select?: UserClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClubInclude<ExtArgs> | null
  }


  /**
   * Model EventRegistration
   */

  export type AggregateEventRegistration = {
    _count: EventRegistrationCountAggregateOutputType | null
    _avg: EventRegistrationAvgAggregateOutputType | null
    _sum: EventRegistrationSumAggregateOutputType | null
    _min: EventRegistrationMinAggregateOutputType | null
    _max: EventRegistrationMaxAggregateOutputType | null
  }

  export type EventRegistrationAvgAggregateOutputType = {
    pointsAwarded: number | null
    volunteerHoursAwarded: number | null
  }

  export type EventRegistrationSumAggregateOutputType = {
    pointsAwarded: number | null
    volunteerHoursAwarded: number | null
  }

  export type EventRegistrationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    registrationDate: Date | null
    status: $Enums.RegistrationStatus | null
    attended: boolean | null
    attendanceMarkedBy: string | null
    attendanceMarkedAt: Date | null
    attendanceMethod: $Enums.AttendanceMethod | null
    checkInTime: Date | null
    checkOutTime: Date | null
    pointsAwarded: number | null
    volunteerHoursAwarded: number | null
    feedbackSubmitted: boolean | null
    notes: string | null
  }

  export type EventRegistrationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    registrationDate: Date | null
    status: $Enums.RegistrationStatus | null
    attended: boolean | null
    attendanceMarkedBy: string | null
    attendanceMarkedAt: Date | null
    attendanceMethod: $Enums.AttendanceMethod | null
    checkInTime: Date | null
    checkOutTime: Date | null
    pointsAwarded: number | null
    volunteerHoursAwarded: number | null
    feedbackSubmitted: boolean | null
    notes: string | null
  }

  export type EventRegistrationCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    registrationDate: number
    status: number
    attended: number
    attendanceMarkedBy: number
    attendanceMarkedAt: number
    attendanceMethod: number
    checkInTime: number
    checkOutTime: number
    pointsAwarded: number
    volunteerHoursAwarded: number
    feedbackSubmitted: number
    notes: number
    _all: number
  }


  export type EventRegistrationAvgAggregateInputType = {
    pointsAwarded?: true
    volunteerHoursAwarded?: true
  }

  export type EventRegistrationSumAggregateInputType = {
    pointsAwarded?: true
    volunteerHoursAwarded?: true
  }

  export type EventRegistrationMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registrationDate?: true
    status?: true
    attended?: true
    attendanceMarkedBy?: true
    attendanceMarkedAt?: true
    attendanceMethod?: true
    checkInTime?: true
    checkOutTime?: true
    pointsAwarded?: true
    volunteerHoursAwarded?: true
    feedbackSubmitted?: true
    notes?: true
  }

  export type EventRegistrationMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registrationDate?: true
    status?: true
    attended?: true
    attendanceMarkedBy?: true
    attendanceMarkedAt?: true
    attendanceMethod?: true
    checkInTime?: true
    checkOutTime?: true
    pointsAwarded?: true
    volunteerHoursAwarded?: true
    feedbackSubmitted?: true
    notes?: true
  }

  export type EventRegistrationCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registrationDate?: true
    status?: true
    attended?: true
    attendanceMarkedBy?: true
    attendanceMarkedAt?: true
    attendanceMethod?: true
    checkInTime?: true
    checkOutTime?: true
    pointsAwarded?: true
    volunteerHoursAwarded?: true
    feedbackSubmitted?: true
    notes?: true
    _all?: true
  }

  export type EventRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventRegistration to aggregate.
     */
    where?: EventRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventRegistrations to fetch.
     */
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventRegistrations
    **/
    _count?: true | EventRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventRegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventRegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventRegistrationMaxAggregateInputType
  }

  export type GetEventRegistrationAggregateType<T extends EventRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateEventRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventRegistration[P]>
      : GetScalarType<T[P], AggregateEventRegistration[P]>
  }




  export type EventRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventRegistrationWhereInput
    orderBy?: EventRegistrationOrderByWithAggregationInput | EventRegistrationOrderByWithAggregationInput[]
    by: EventRegistrationScalarFieldEnum[] | EventRegistrationScalarFieldEnum
    having?: EventRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventRegistrationCountAggregateInputType | true
    _avg?: EventRegistrationAvgAggregateInputType
    _sum?: EventRegistrationSumAggregateInputType
    _min?: EventRegistrationMinAggregateInputType
    _max?: EventRegistrationMaxAggregateInputType
  }

  export type EventRegistrationGroupByOutputType = {
    id: string
    userId: string
    eventId: string
    registrationDate: Date
    status: $Enums.RegistrationStatus
    attended: boolean
    attendanceMarkedBy: string | null
    attendanceMarkedAt: Date | null
    attendanceMethod: $Enums.AttendanceMethod | null
    checkInTime: Date | null
    checkOutTime: Date | null
    pointsAwarded: number
    volunteerHoursAwarded: number
    feedbackSubmitted: boolean
    notes: string | null
    _count: EventRegistrationCountAggregateOutputType | null
    _avg: EventRegistrationAvgAggregateOutputType | null
    _sum: EventRegistrationSumAggregateOutputType | null
    _min: EventRegistrationMinAggregateOutputType | null
    _max: EventRegistrationMaxAggregateOutputType | null
  }

  type GetEventRegistrationGroupByPayload<T extends EventRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], EventRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type EventRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registrationDate?: boolean
    status?: boolean
    attended?: boolean
    attendanceMarkedBy?: boolean
    attendanceMarkedAt?: boolean
    attendanceMethod?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    pointsAwarded?: boolean
    volunteerHoursAwarded?: boolean
    feedbackSubmitted?: boolean
    notes?: boolean
    attendanceMarkedByUser?: boolean | EventRegistration$attendanceMarkedByUserArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventRegistration"]>

  export type EventRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registrationDate?: boolean
    status?: boolean
    attended?: boolean
    attendanceMarkedBy?: boolean
    attendanceMarkedAt?: boolean
    attendanceMethod?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    pointsAwarded?: boolean
    volunteerHoursAwarded?: boolean
    feedbackSubmitted?: boolean
    notes?: boolean
    attendanceMarkedByUser?: boolean | EventRegistration$attendanceMarkedByUserArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventRegistration"]>

  export type EventRegistrationSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registrationDate?: boolean
    status?: boolean
    attended?: boolean
    attendanceMarkedBy?: boolean
    attendanceMarkedAt?: boolean
    attendanceMethod?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    pointsAwarded?: boolean
    volunteerHoursAwarded?: boolean
    feedbackSubmitted?: boolean
    notes?: boolean
  }

  export type EventRegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceMarkedByUser?: boolean | EventRegistration$attendanceMarkedByUserArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventRegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceMarkedByUser?: boolean | EventRegistration$attendanceMarkedByUserArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventRegistration"
    objects: {
      attendanceMarkedByUser: Prisma.$UserPayload<ExtArgs> | null
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventId: string
      registrationDate: Date
      status: $Enums.RegistrationStatus
      attended: boolean
      attendanceMarkedBy: string | null
      attendanceMarkedAt: Date | null
      attendanceMethod: $Enums.AttendanceMethod | null
      checkInTime: Date | null
      checkOutTime: Date | null
      pointsAwarded: number
      volunteerHoursAwarded: number
      feedbackSubmitted: boolean
      notes: string | null
    }, ExtArgs["result"]["eventRegistration"]>
    composites: {}
  }

  type EventRegistrationGetPayload<S extends boolean | null | undefined | EventRegistrationDefaultArgs> = $Result.GetResult<Prisma.$EventRegistrationPayload, S>

  type EventRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventRegistrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventRegistrationCountAggregateInputType | true
    }

  export interface EventRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventRegistration'], meta: { name: 'EventRegistration' } }
    /**
     * Find zero or one EventRegistration that matches the filter.
     * @param {EventRegistrationFindUniqueArgs} args - Arguments to find a EventRegistration
     * @example
     * // Get one EventRegistration
     * const eventRegistration = await prisma.eventRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventRegistrationFindUniqueArgs>(args: SelectSubset<T, EventRegistrationFindUniqueArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventRegistration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventRegistrationFindUniqueOrThrowArgs} args - Arguments to find a EventRegistration
     * @example
     * // Get one EventRegistration
     * const eventRegistration = await prisma.eventRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventRegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, EventRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationFindFirstArgs} args - Arguments to find a EventRegistration
     * @example
     * // Get one EventRegistration
     * const eventRegistration = await prisma.eventRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventRegistrationFindFirstArgs>(args?: SelectSubset<T, EventRegistrationFindFirstArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationFindFirstOrThrowArgs} args - Arguments to find a EventRegistration
     * @example
     * // Get one EventRegistration
     * const eventRegistration = await prisma.eventRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventRegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, EventRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventRegistrations
     * const eventRegistrations = await prisma.eventRegistration.findMany()
     * 
     * // Get first 10 EventRegistrations
     * const eventRegistrations = await prisma.eventRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventRegistrationWithIdOnly = await prisma.eventRegistration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventRegistrationFindManyArgs>(args?: SelectSubset<T, EventRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventRegistration.
     * @param {EventRegistrationCreateArgs} args - Arguments to create a EventRegistration.
     * @example
     * // Create one EventRegistration
     * const EventRegistration = await prisma.eventRegistration.create({
     *   data: {
     *     // ... data to create a EventRegistration
     *   }
     * })
     * 
     */
    create<T extends EventRegistrationCreateArgs>(args: SelectSubset<T, EventRegistrationCreateArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventRegistrations.
     * @param {EventRegistrationCreateManyArgs} args - Arguments to create many EventRegistrations.
     * @example
     * // Create many EventRegistrations
     * const eventRegistration = await prisma.eventRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventRegistrationCreateManyArgs>(args?: SelectSubset<T, EventRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventRegistrations and returns the data saved in the database.
     * @param {EventRegistrationCreateManyAndReturnArgs} args - Arguments to create many EventRegistrations.
     * @example
     * // Create many EventRegistrations
     * const eventRegistration = await prisma.eventRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventRegistrations and only return the `id`
     * const eventRegistrationWithIdOnly = await prisma.eventRegistration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventRegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, EventRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventRegistration.
     * @param {EventRegistrationDeleteArgs} args - Arguments to delete one EventRegistration.
     * @example
     * // Delete one EventRegistration
     * const EventRegistration = await prisma.eventRegistration.delete({
     *   where: {
     *     // ... filter to delete one EventRegistration
     *   }
     * })
     * 
     */
    delete<T extends EventRegistrationDeleteArgs>(args: SelectSubset<T, EventRegistrationDeleteArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventRegistration.
     * @param {EventRegistrationUpdateArgs} args - Arguments to update one EventRegistration.
     * @example
     * // Update one EventRegistration
     * const eventRegistration = await prisma.eventRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventRegistrationUpdateArgs>(args: SelectSubset<T, EventRegistrationUpdateArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventRegistrations.
     * @param {EventRegistrationDeleteManyArgs} args - Arguments to filter EventRegistrations to delete.
     * @example
     * // Delete a few EventRegistrations
     * const { count } = await prisma.eventRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventRegistrationDeleteManyArgs>(args?: SelectSubset<T, EventRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventRegistrations
     * const eventRegistration = await prisma.eventRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventRegistrationUpdateManyArgs>(args: SelectSubset<T, EventRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventRegistration.
     * @param {EventRegistrationUpsertArgs} args - Arguments to update or create a EventRegistration.
     * @example
     * // Update or create a EventRegistration
     * const eventRegistration = await prisma.eventRegistration.upsert({
     *   create: {
     *     // ... data to create a EventRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventRegistration we want to update
     *   }
     * })
     */
    upsert<T extends EventRegistrationUpsertArgs>(args: SelectSubset<T, EventRegistrationUpsertArgs<ExtArgs>>): Prisma__EventRegistrationClient<$Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationCountArgs} args - Arguments to filter EventRegistrations to count.
     * @example
     * // Count the number of EventRegistrations
     * const count = await prisma.eventRegistration.count({
     *   where: {
     *     // ... the filter for the EventRegistrations we want to count
     *   }
     * })
    **/
    count<T extends EventRegistrationCountArgs>(
      args?: Subset<T, EventRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventRegistrationAggregateArgs>(args: Subset<T, EventRegistrationAggregateArgs>): Prisma.PrismaPromise<GetEventRegistrationAggregateType<T>>

    /**
     * Group by EventRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: EventRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventRegistration model
   */
  readonly fields: EventRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendanceMarkedByUser<T extends EventRegistration$attendanceMarkedByUserArgs<ExtArgs> = {}>(args?: Subset<T, EventRegistration$attendanceMarkedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventRegistration model
   */ 
  interface EventRegistrationFieldRefs {
    readonly id: FieldRef<"EventRegistration", 'String'>
    readonly userId: FieldRef<"EventRegistration", 'String'>
    readonly eventId: FieldRef<"EventRegistration", 'String'>
    readonly registrationDate: FieldRef<"EventRegistration", 'DateTime'>
    readonly status: FieldRef<"EventRegistration", 'RegistrationStatus'>
    readonly attended: FieldRef<"EventRegistration", 'Boolean'>
    readonly attendanceMarkedBy: FieldRef<"EventRegistration", 'String'>
    readonly attendanceMarkedAt: FieldRef<"EventRegistration", 'DateTime'>
    readonly attendanceMethod: FieldRef<"EventRegistration", 'AttendanceMethod'>
    readonly checkInTime: FieldRef<"EventRegistration", 'DateTime'>
    readonly checkOutTime: FieldRef<"EventRegistration", 'DateTime'>
    readonly pointsAwarded: FieldRef<"EventRegistration", 'Int'>
    readonly volunteerHoursAwarded: FieldRef<"EventRegistration", 'Float'>
    readonly feedbackSubmitted: FieldRef<"EventRegistration", 'Boolean'>
    readonly notes: FieldRef<"EventRegistration", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventRegistration findUnique
   */
  export type EventRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which EventRegistration to fetch.
     */
    where: EventRegistrationWhereUniqueInput
  }

  /**
   * EventRegistration findUniqueOrThrow
   */
  export type EventRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which EventRegistration to fetch.
     */
    where: EventRegistrationWhereUniqueInput
  }

  /**
   * EventRegistration findFirst
   */
  export type EventRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which EventRegistration to fetch.
     */
    where?: EventRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventRegistrations to fetch.
     */
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventRegistrations.
     */
    cursor?: EventRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventRegistrations.
     */
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * EventRegistration findFirstOrThrow
   */
  export type EventRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which EventRegistration to fetch.
     */
    where?: EventRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventRegistrations to fetch.
     */
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventRegistrations.
     */
    cursor?: EventRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventRegistrations.
     */
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * EventRegistration findMany
   */
  export type EventRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which EventRegistrations to fetch.
     */
    where?: EventRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventRegistrations to fetch.
     */
    orderBy?: EventRegistrationOrderByWithRelationInput | EventRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventRegistrations.
     */
    cursor?: EventRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventRegistrations.
     */
    skip?: number
    distinct?: EventRegistrationScalarFieldEnum | EventRegistrationScalarFieldEnum[]
  }

  /**
   * EventRegistration create
   */
  export type EventRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a EventRegistration.
     */
    data: XOR<EventRegistrationCreateInput, EventRegistrationUncheckedCreateInput>
  }

  /**
   * EventRegistration createMany
   */
  export type EventRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventRegistrations.
     */
    data: EventRegistrationCreateManyInput | EventRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventRegistration createManyAndReturn
   */
  export type EventRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventRegistrations.
     */
    data: EventRegistrationCreateManyInput | EventRegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventRegistration update
   */
  export type EventRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a EventRegistration.
     */
    data: XOR<EventRegistrationUpdateInput, EventRegistrationUncheckedUpdateInput>
    /**
     * Choose, which EventRegistration to update.
     */
    where: EventRegistrationWhereUniqueInput
  }

  /**
   * EventRegistration updateMany
   */
  export type EventRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventRegistrations.
     */
    data: XOR<EventRegistrationUpdateManyMutationInput, EventRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which EventRegistrations to update
     */
    where?: EventRegistrationWhereInput
  }

  /**
   * EventRegistration upsert
   */
  export type EventRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the EventRegistration to update in case it exists.
     */
    where: EventRegistrationWhereUniqueInput
    /**
     * In case the EventRegistration found by the `where` argument doesn't exist, create a new EventRegistration with this data.
     */
    create: XOR<EventRegistrationCreateInput, EventRegistrationUncheckedCreateInput>
    /**
     * In case the EventRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventRegistrationUpdateInput, EventRegistrationUncheckedUpdateInput>
  }

  /**
   * EventRegistration delete
   */
  export type EventRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
    /**
     * Filter which EventRegistration to delete.
     */
    where: EventRegistrationWhereUniqueInput
  }

  /**
   * EventRegistration deleteMany
   */
  export type EventRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventRegistrations to delete
     */
    where?: EventRegistrationWhereInput
  }

  /**
   * EventRegistration.attendanceMarkedByUser
   */
  export type EventRegistration$attendanceMarkedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * EventRegistration without action
   */
  export type EventRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventRegistration
     */
    select?: EventRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventRegistrationInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceLog
   */

  export type AggregateAttendanceLog = {
    _count: AttendanceLogCountAggregateOutputType | null
    _min: AttendanceLogMinAggregateOutputType | null
    _max: AttendanceLogMaxAggregateOutputType | null
  }

  export type AttendanceLogMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    markedBy: string | null
    action: $Enums.AttendanceAction | null
    previousStatus: boolean | null
    newStatus: boolean | null
    reason: string | null
    createdAt: Date | null
  }

  export type AttendanceLogMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    markedBy: string | null
    action: $Enums.AttendanceAction | null
    previousStatus: boolean | null
    newStatus: boolean | null
    reason: string | null
    createdAt: Date | null
  }

  export type AttendanceLogCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    markedBy: number
    action: number
    previousStatus: number
    newStatus: number
    reason: number
    createdAt: number
    _all: number
  }


  export type AttendanceLogMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    markedBy?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    reason?: true
    createdAt?: true
  }

  export type AttendanceLogMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    markedBy?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    reason?: true
    createdAt?: true
  }

  export type AttendanceLogCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    markedBy?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type AttendanceLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLog to aggregate.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceLogs
    **/
    _count?: true | AttendanceLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceLogMaxAggregateInputType
  }

  export type GetAttendanceLogAggregateType<T extends AttendanceLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceLog[P]>
      : GetScalarType<T[P], AggregateAttendanceLog[P]>
  }




  export type AttendanceLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLogWhereInput
    orderBy?: AttendanceLogOrderByWithAggregationInput | AttendanceLogOrderByWithAggregationInput[]
    by: AttendanceLogScalarFieldEnum[] | AttendanceLogScalarFieldEnum
    having?: AttendanceLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceLogCountAggregateInputType | true
    _min?: AttendanceLogMinAggregateInputType
    _max?: AttendanceLogMaxAggregateInputType
  }

  export type AttendanceLogGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus: boolean | null
    newStatus: boolean | null
    reason: string | null
    createdAt: Date
    _count: AttendanceLogCountAggregateOutputType | null
    _min: AttendanceLogMinAggregateOutputType | null
    _max: AttendanceLogMaxAggregateOutputType | null
  }

  type GetAttendanceLogGroupByPayload<T extends AttendanceLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceLogGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceLogGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    markedBy?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    reason?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    markedByUser?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLog"]>

  export type AttendanceLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    markedBy?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    reason?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    markedByUser?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLog"]>

  export type AttendanceLogSelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    markedBy?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type AttendanceLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    markedByUser?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    markedByUser?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttendanceLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceLog"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      markedByUser: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      markedBy: string
      action: $Enums.AttendanceAction
      previousStatus: boolean | null
      newStatus: boolean | null
      reason: string | null
      createdAt: Date
    }, ExtArgs["result"]["attendanceLog"]>
    composites: {}
  }

  type AttendanceLogGetPayload<S extends boolean | null | undefined | AttendanceLogDefaultArgs> = $Result.GetResult<Prisma.$AttendanceLogPayload, S>

  type AttendanceLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendanceLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceLogCountAggregateInputType | true
    }

  export interface AttendanceLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceLog'], meta: { name: 'AttendanceLog' } }
    /**
     * Find zero or one AttendanceLog that matches the filter.
     * @param {AttendanceLogFindUniqueArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceLogFindUniqueArgs>(args: SelectSubset<T, AttendanceLogFindUniqueArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AttendanceLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttendanceLogFindUniqueOrThrowArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AttendanceLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindFirstArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceLogFindFirstArgs>(args?: SelectSubset<T, AttendanceLogFindFirstArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AttendanceLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindFirstOrThrowArgs} args - Arguments to find a AttendanceLog
     * @example
     * // Get one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AttendanceLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceLogs
     * const attendanceLogs = await prisma.attendanceLog.findMany()
     * 
     * // Get first 10 AttendanceLogs
     * const attendanceLogs = await prisma.attendanceLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceLogWithIdOnly = await prisma.attendanceLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceLogFindManyArgs>(args?: SelectSubset<T, AttendanceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AttendanceLog.
     * @param {AttendanceLogCreateArgs} args - Arguments to create a AttendanceLog.
     * @example
     * // Create one AttendanceLog
     * const AttendanceLog = await prisma.attendanceLog.create({
     *   data: {
     *     // ... data to create a AttendanceLog
     *   }
     * })
     * 
     */
    create<T extends AttendanceLogCreateArgs>(args: SelectSubset<T, AttendanceLogCreateArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AttendanceLogs.
     * @param {AttendanceLogCreateManyArgs} args - Arguments to create many AttendanceLogs.
     * @example
     * // Create many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceLogCreateManyArgs>(args?: SelectSubset<T, AttendanceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceLogs and returns the data saved in the database.
     * @param {AttendanceLogCreateManyAndReturnArgs} args - Arguments to create many AttendanceLogs.
     * @example
     * // Create many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceLogs and only return the `id`
     * const attendanceLogWithIdOnly = await prisma.attendanceLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AttendanceLog.
     * @param {AttendanceLogDeleteArgs} args - Arguments to delete one AttendanceLog.
     * @example
     * // Delete one AttendanceLog
     * const AttendanceLog = await prisma.attendanceLog.delete({
     *   where: {
     *     // ... filter to delete one AttendanceLog
     *   }
     * })
     * 
     */
    delete<T extends AttendanceLogDeleteArgs>(args: SelectSubset<T, AttendanceLogDeleteArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AttendanceLog.
     * @param {AttendanceLogUpdateArgs} args - Arguments to update one AttendanceLog.
     * @example
     * // Update one AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceLogUpdateArgs>(args: SelectSubset<T, AttendanceLogUpdateArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AttendanceLogs.
     * @param {AttendanceLogDeleteManyArgs} args - Arguments to filter AttendanceLogs to delete.
     * @example
     * // Delete a few AttendanceLogs
     * const { count } = await prisma.attendanceLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceLogDeleteManyArgs>(args?: SelectSubset<T, AttendanceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceLogs
     * const attendanceLog = await prisma.attendanceLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceLogUpdateManyArgs>(args: SelectSubset<T, AttendanceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AttendanceLog.
     * @param {AttendanceLogUpsertArgs} args - Arguments to update or create a AttendanceLog.
     * @example
     * // Update or create a AttendanceLog
     * const attendanceLog = await prisma.attendanceLog.upsert({
     *   create: {
     *     // ... data to create a AttendanceLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceLog we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceLogUpsertArgs>(args: SelectSubset<T, AttendanceLogUpsertArgs<ExtArgs>>): Prisma__AttendanceLogClient<$Result.GetResult<Prisma.$AttendanceLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AttendanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogCountArgs} args - Arguments to filter AttendanceLogs to count.
     * @example
     * // Count the number of AttendanceLogs
     * const count = await prisma.attendanceLog.count({
     *   where: {
     *     // ... the filter for the AttendanceLogs we want to count
     *   }
     * })
    **/
    count<T extends AttendanceLogCountArgs>(
      args?: Subset<T, AttendanceLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceLogAggregateArgs>(args: Subset<T, AttendanceLogAggregateArgs>): Prisma.PrismaPromise<GetAttendanceLogAggregateType<T>>

    /**
     * Group by AttendanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceLogGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceLog model
   */
  readonly fields: AttendanceLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    markedByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceLog model
   */ 
  interface AttendanceLogFieldRefs {
    readonly id: FieldRef<"AttendanceLog", 'String'>
    readonly eventId: FieldRef<"AttendanceLog", 'String'>
    readonly userId: FieldRef<"AttendanceLog", 'String'>
    readonly markedBy: FieldRef<"AttendanceLog", 'String'>
    readonly action: FieldRef<"AttendanceLog", 'AttendanceAction'>
    readonly previousStatus: FieldRef<"AttendanceLog", 'Boolean'>
    readonly newStatus: FieldRef<"AttendanceLog", 'Boolean'>
    readonly reason: FieldRef<"AttendanceLog", 'String'>
    readonly createdAt: FieldRef<"AttendanceLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceLog findUnique
   */
  export type AttendanceLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog findUniqueOrThrow
   */
  export type AttendanceLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog findFirst
   */
  export type AttendanceLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLogs.
     */
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog findFirstOrThrow
   */
  export type AttendanceLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLog to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLogs.
     */
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog findMany
   */
  export type AttendanceLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLogs to fetch.
     */
    where?: AttendanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLogs to fetch.
     */
    orderBy?: AttendanceLogOrderByWithRelationInput | AttendanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceLogs.
     */
    cursor?: AttendanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLogs.
     */
    skip?: number
    distinct?: AttendanceLogScalarFieldEnum | AttendanceLogScalarFieldEnum[]
  }

  /**
   * AttendanceLog create
   */
  export type AttendanceLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceLog.
     */
    data: XOR<AttendanceLogCreateInput, AttendanceLogUncheckedCreateInput>
  }

  /**
   * AttendanceLog createMany
   */
  export type AttendanceLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceLogs.
     */
    data: AttendanceLogCreateManyInput | AttendanceLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceLog createManyAndReturn
   */
  export type AttendanceLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AttendanceLogs.
     */
    data: AttendanceLogCreateManyInput | AttendanceLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceLog update
   */
  export type AttendanceLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceLog.
     */
    data: XOR<AttendanceLogUpdateInput, AttendanceLogUncheckedUpdateInput>
    /**
     * Choose, which AttendanceLog to update.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog updateMany
   */
  export type AttendanceLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceLogs.
     */
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceLogs to update
     */
    where?: AttendanceLogWhereInput
  }

  /**
   * AttendanceLog upsert
   */
  export type AttendanceLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceLog to update in case it exists.
     */
    where: AttendanceLogWhereUniqueInput
    /**
     * In case the AttendanceLog found by the `where` argument doesn't exist, create a new AttendanceLog with this data.
     */
    create: XOR<AttendanceLogCreateInput, AttendanceLogUncheckedCreateInput>
    /**
     * In case the AttendanceLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceLogUpdateInput, AttendanceLogUncheckedUpdateInput>
  }

  /**
   * AttendanceLog delete
   */
  export type AttendanceLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
    /**
     * Filter which AttendanceLog to delete.
     */
    where: AttendanceLogWhereUniqueInput
  }

  /**
   * AttendanceLog deleteMany
   */
  export type AttendanceLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLogs to delete
     */
    where?: AttendanceLogWhereInput
  }

  /**
   * AttendanceLog without action
   */
  export type AttendanceLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLog
     */
    select?: AttendanceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLogInclude<ExtArgs> | null
  }


  /**
   * Model EventQRCode
   */

  export type AggregateEventQRCode = {
    _count: EventQRCodeCountAggregateOutputType | null
    _avg: EventQRCodeAvgAggregateOutputType | null
    _sum: EventQRCodeSumAggregateOutputType | null
    _min: EventQRCodeMinAggregateOutputType | null
    _max: EventQRCodeMaxAggregateOutputType | null
  }

  export type EventQRCodeAvgAggregateOutputType = {
    maxScans: number | null
    currentScans: number | null
  }

  export type EventQRCodeSumAggregateOutputType = {
    maxScans: number | null
    currentScans: number | null
  }

  export type EventQRCodeMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    qrCodeData: string | null
    validFrom: Date | null
    validUntil: Date | null
    maxScans: number | null
    currentScans: number | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type EventQRCodeMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    qrCodeData: string | null
    validFrom: Date | null
    validUntil: Date | null
    maxScans: number | null
    currentScans: number | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type EventQRCodeCountAggregateOutputType = {
    id: number
    eventId: number
    qrCodeData: number
    validFrom: number
    validUntil: number
    maxScans: number
    currentScans: number
    isActive: number
    createdBy: number
    createdAt: number
    _all: number
  }


  export type EventQRCodeAvgAggregateInputType = {
    maxScans?: true
    currentScans?: true
  }

  export type EventQRCodeSumAggregateInputType = {
    maxScans?: true
    currentScans?: true
  }

  export type EventQRCodeMinAggregateInputType = {
    id?: true
    eventId?: true
    qrCodeData?: true
    validFrom?: true
    validUntil?: true
    maxScans?: true
    currentScans?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
  }

  export type EventQRCodeMaxAggregateInputType = {
    id?: true
    eventId?: true
    qrCodeData?: true
    validFrom?: true
    validUntil?: true
    maxScans?: true
    currentScans?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
  }

  export type EventQRCodeCountAggregateInputType = {
    id?: true
    eventId?: true
    qrCodeData?: true
    validFrom?: true
    validUntil?: true
    maxScans?: true
    currentScans?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    _all?: true
  }

  export type EventQRCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventQRCode to aggregate.
     */
    where?: EventQRCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventQRCodes to fetch.
     */
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventQRCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventQRCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventQRCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventQRCodes
    **/
    _count?: true | EventQRCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventQRCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventQRCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventQRCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventQRCodeMaxAggregateInputType
  }

  export type GetEventQRCodeAggregateType<T extends EventQRCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEventQRCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventQRCode[P]>
      : GetScalarType<T[P], AggregateEventQRCode[P]>
  }




  export type EventQRCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventQRCodeWhereInput
    orderBy?: EventQRCodeOrderByWithAggregationInput | EventQRCodeOrderByWithAggregationInput[]
    by: EventQRCodeScalarFieldEnum[] | EventQRCodeScalarFieldEnum
    having?: EventQRCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventQRCodeCountAggregateInputType | true
    _avg?: EventQRCodeAvgAggregateInputType
    _sum?: EventQRCodeSumAggregateInputType
    _min?: EventQRCodeMinAggregateInputType
    _max?: EventQRCodeMaxAggregateInputType
  }

  export type EventQRCodeGroupByOutputType = {
    id: string
    eventId: string
    qrCodeData: string
    validFrom: Date
    validUntil: Date
    maxScans: number | null
    currentScans: number
    isActive: boolean
    createdBy: string
    createdAt: Date
    _count: EventQRCodeCountAggregateOutputType | null
    _avg: EventQRCodeAvgAggregateOutputType | null
    _sum: EventQRCodeSumAggregateOutputType | null
    _min: EventQRCodeMinAggregateOutputType | null
    _max: EventQRCodeMaxAggregateOutputType | null
  }

  type GetEventQRCodeGroupByPayload<T extends EventQRCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventQRCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventQRCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventQRCodeGroupByOutputType[P]>
            : GetScalarType<T[P], EventQRCodeGroupByOutputType[P]>
        }
      >
    >


  export type EventQRCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    qrCodeData?: boolean
    validFrom?: boolean
    validUntil?: boolean
    maxScans?: boolean
    currentScans?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventQRCode"]>

  export type EventQRCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    qrCodeData?: boolean
    validFrom?: boolean
    validUntil?: boolean
    maxScans?: boolean
    currentScans?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventQRCode"]>

  export type EventQRCodeSelectScalar = {
    id?: boolean
    eventId?: boolean
    qrCodeData?: boolean
    validFrom?: boolean
    validUntil?: boolean
    maxScans?: boolean
    currentScans?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
  }

  export type EventQRCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventQRCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $EventQRCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventQRCode"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      qrCodeData: string
      validFrom: Date
      validUntil: Date
      maxScans: number | null
      currentScans: number
      isActive: boolean
      createdBy: string
      createdAt: Date
    }, ExtArgs["result"]["eventQRCode"]>
    composites: {}
  }

  type EventQRCodeGetPayload<S extends boolean | null | undefined | EventQRCodeDefaultArgs> = $Result.GetResult<Prisma.$EventQRCodePayload, S>

  type EventQRCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventQRCodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventQRCodeCountAggregateInputType | true
    }

  export interface EventQRCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventQRCode'], meta: { name: 'EventQRCode' } }
    /**
     * Find zero or one EventQRCode that matches the filter.
     * @param {EventQRCodeFindUniqueArgs} args - Arguments to find a EventQRCode
     * @example
     * // Get one EventQRCode
     * const eventQRCode = await prisma.eventQRCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventQRCodeFindUniqueArgs>(args: SelectSubset<T, EventQRCodeFindUniqueArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventQRCode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventQRCodeFindUniqueOrThrowArgs} args - Arguments to find a EventQRCode
     * @example
     * // Get one EventQRCode
     * const eventQRCode = await prisma.eventQRCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventQRCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, EventQRCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventQRCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeFindFirstArgs} args - Arguments to find a EventQRCode
     * @example
     * // Get one EventQRCode
     * const eventQRCode = await prisma.eventQRCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventQRCodeFindFirstArgs>(args?: SelectSubset<T, EventQRCodeFindFirstArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventQRCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeFindFirstOrThrowArgs} args - Arguments to find a EventQRCode
     * @example
     * // Get one EventQRCode
     * const eventQRCode = await prisma.eventQRCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventQRCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, EventQRCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventQRCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventQRCodes
     * const eventQRCodes = await prisma.eventQRCode.findMany()
     * 
     * // Get first 10 EventQRCodes
     * const eventQRCodes = await prisma.eventQRCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventQRCodeWithIdOnly = await prisma.eventQRCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventQRCodeFindManyArgs>(args?: SelectSubset<T, EventQRCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventQRCode.
     * @param {EventQRCodeCreateArgs} args - Arguments to create a EventQRCode.
     * @example
     * // Create one EventQRCode
     * const EventQRCode = await prisma.eventQRCode.create({
     *   data: {
     *     // ... data to create a EventQRCode
     *   }
     * })
     * 
     */
    create<T extends EventQRCodeCreateArgs>(args: SelectSubset<T, EventQRCodeCreateArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventQRCodes.
     * @param {EventQRCodeCreateManyArgs} args - Arguments to create many EventQRCodes.
     * @example
     * // Create many EventQRCodes
     * const eventQRCode = await prisma.eventQRCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventQRCodeCreateManyArgs>(args?: SelectSubset<T, EventQRCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventQRCodes and returns the data saved in the database.
     * @param {EventQRCodeCreateManyAndReturnArgs} args - Arguments to create many EventQRCodes.
     * @example
     * // Create many EventQRCodes
     * const eventQRCode = await prisma.eventQRCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventQRCodes and only return the `id`
     * const eventQRCodeWithIdOnly = await prisma.eventQRCode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventQRCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, EventQRCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventQRCode.
     * @param {EventQRCodeDeleteArgs} args - Arguments to delete one EventQRCode.
     * @example
     * // Delete one EventQRCode
     * const EventQRCode = await prisma.eventQRCode.delete({
     *   where: {
     *     // ... filter to delete one EventQRCode
     *   }
     * })
     * 
     */
    delete<T extends EventQRCodeDeleteArgs>(args: SelectSubset<T, EventQRCodeDeleteArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventQRCode.
     * @param {EventQRCodeUpdateArgs} args - Arguments to update one EventQRCode.
     * @example
     * // Update one EventQRCode
     * const eventQRCode = await prisma.eventQRCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventQRCodeUpdateArgs>(args: SelectSubset<T, EventQRCodeUpdateArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventQRCodes.
     * @param {EventQRCodeDeleteManyArgs} args - Arguments to filter EventQRCodes to delete.
     * @example
     * // Delete a few EventQRCodes
     * const { count } = await prisma.eventQRCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventQRCodeDeleteManyArgs>(args?: SelectSubset<T, EventQRCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventQRCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventQRCodes
     * const eventQRCode = await prisma.eventQRCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventQRCodeUpdateManyArgs>(args: SelectSubset<T, EventQRCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventQRCode.
     * @param {EventQRCodeUpsertArgs} args - Arguments to update or create a EventQRCode.
     * @example
     * // Update or create a EventQRCode
     * const eventQRCode = await prisma.eventQRCode.upsert({
     *   create: {
     *     // ... data to create a EventQRCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventQRCode we want to update
     *   }
     * })
     */
    upsert<T extends EventQRCodeUpsertArgs>(args: SelectSubset<T, EventQRCodeUpsertArgs<ExtArgs>>): Prisma__EventQRCodeClient<$Result.GetResult<Prisma.$EventQRCodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventQRCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeCountArgs} args - Arguments to filter EventQRCodes to count.
     * @example
     * // Count the number of EventQRCodes
     * const count = await prisma.eventQRCode.count({
     *   where: {
     *     // ... the filter for the EventQRCodes we want to count
     *   }
     * })
    **/
    count<T extends EventQRCodeCountArgs>(
      args?: Subset<T, EventQRCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventQRCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventQRCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventQRCodeAggregateArgs>(args: Subset<T, EventQRCodeAggregateArgs>): Prisma.PrismaPromise<GetEventQRCodeAggregateType<T>>

    /**
     * Group by EventQRCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventQRCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventQRCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventQRCodeGroupByArgs['orderBy'] }
        : { orderBy?: EventQRCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventQRCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventQRCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventQRCode model
   */
  readonly fields: EventQRCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventQRCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventQRCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventQRCode model
   */ 
  interface EventQRCodeFieldRefs {
    readonly id: FieldRef<"EventQRCode", 'String'>
    readonly eventId: FieldRef<"EventQRCode", 'String'>
    readonly qrCodeData: FieldRef<"EventQRCode", 'String'>
    readonly validFrom: FieldRef<"EventQRCode", 'DateTime'>
    readonly validUntil: FieldRef<"EventQRCode", 'DateTime'>
    readonly maxScans: FieldRef<"EventQRCode", 'Int'>
    readonly currentScans: FieldRef<"EventQRCode", 'Int'>
    readonly isActive: FieldRef<"EventQRCode", 'Boolean'>
    readonly createdBy: FieldRef<"EventQRCode", 'String'>
    readonly createdAt: FieldRef<"EventQRCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventQRCode findUnique
   */
  export type EventQRCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter, which EventQRCode to fetch.
     */
    where: EventQRCodeWhereUniqueInput
  }

  /**
   * EventQRCode findUniqueOrThrow
   */
  export type EventQRCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter, which EventQRCode to fetch.
     */
    where: EventQRCodeWhereUniqueInput
  }

  /**
   * EventQRCode findFirst
   */
  export type EventQRCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter, which EventQRCode to fetch.
     */
    where?: EventQRCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventQRCodes to fetch.
     */
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventQRCodes.
     */
    cursor?: EventQRCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventQRCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventQRCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventQRCodes.
     */
    distinct?: EventQRCodeScalarFieldEnum | EventQRCodeScalarFieldEnum[]
  }

  /**
   * EventQRCode findFirstOrThrow
   */
  export type EventQRCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter, which EventQRCode to fetch.
     */
    where?: EventQRCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventQRCodes to fetch.
     */
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventQRCodes.
     */
    cursor?: EventQRCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventQRCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventQRCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventQRCodes.
     */
    distinct?: EventQRCodeScalarFieldEnum | EventQRCodeScalarFieldEnum[]
  }

  /**
   * EventQRCode findMany
   */
  export type EventQRCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter, which EventQRCodes to fetch.
     */
    where?: EventQRCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventQRCodes to fetch.
     */
    orderBy?: EventQRCodeOrderByWithRelationInput | EventQRCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventQRCodes.
     */
    cursor?: EventQRCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventQRCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventQRCodes.
     */
    skip?: number
    distinct?: EventQRCodeScalarFieldEnum | EventQRCodeScalarFieldEnum[]
  }

  /**
   * EventQRCode create
   */
  export type EventQRCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a EventQRCode.
     */
    data: XOR<EventQRCodeCreateInput, EventQRCodeUncheckedCreateInput>
  }

  /**
   * EventQRCode createMany
   */
  export type EventQRCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventQRCodes.
     */
    data: EventQRCodeCreateManyInput | EventQRCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventQRCode createManyAndReturn
   */
  export type EventQRCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventQRCodes.
     */
    data: EventQRCodeCreateManyInput | EventQRCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventQRCode update
   */
  export type EventQRCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a EventQRCode.
     */
    data: XOR<EventQRCodeUpdateInput, EventQRCodeUncheckedUpdateInput>
    /**
     * Choose, which EventQRCode to update.
     */
    where: EventQRCodeWhereUniqueInput
  }

  /**
   * EventQRCode updateMany
   */
  export type EventQRCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventQRCodes.
     */
    data: XOR<EventQRCodeUpdateManyMutationInput, EventQRCodeUncheckedUpdateManyInput>
    /**
     * Filter which EventQRCodes to update
     */
    where?: EventQRCodeWhereInput
  }

  /**
   * EventQRCode upsert
   */
  export type EventQRCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the EventQRCode to update in case it exists.
     */
    where: EventQRCodeWhereUniqueInput
    /**
     * In case the EventQRCode found by the `where` argument doesn't exist, create a new EventQRCode with this data.
     */
    create: XOR<EventQRCodeCreateInput, EventQRCodeUncheckedCreateInput>
    /**
     * In case the EventQRCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventQRCodeUpdateInput, EventQRCodeUncheckedUpdateInput>
  }

  /**
   * EventQRCode delete
   */
  export type EventQRCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
    /**
     * Filter which EventQRCode to delete.
     */
    where: EventQRCodeWhereUniqueInput
  }

  /**
   * EventQRCode deleteMany
   */
  export type EventQRCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventQRCodes to delete
     */
    where?: EventQRCodeWhereInput
  }

  /**
   * EventQRCode without action
   */
  export type EventQRCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventQRCode
     */
    select?: EventQRCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventQRCodeInclude<ExtArgs> | null
  }


  /**
   * Model PointsHistory
   */

  export type AggregatePointsHistory = {
    _count: PointsHistoryCountAggregateOutputType | null
    _avg: PointsHistoryAvgAggregateOutputType | null
    _sum: PointsHistorySumAggregateOutputType | null
    _min: PointsHistoryMinAggregateOutputType | null
    _max: PointsHistoryMaxAggregateOutputType | null
  }

  export type PointsHistoryAvgAggregateOutputType = {
    pointsEarned: number | null
    volunteerHoursEarned: number | null
  }

  export type PointsHistorySumAggregateOutputType = {
    pointsEarned: number | null
    volunteerHoursEarned: number | null
  }

  export type PointsHistoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    pointsEarned: number | null
    volunteerHoursEarned: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type PointsHistoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    pointsEarned: number | null
    volunteerHoursEarned: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type PointsHistoryCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    pointsEarned: number
    volunteerHoursEarned: number
    reason: number
    createdAt: number
    _all: number
  }


  export type PointsHistoryAvgAggregateInputType = {
    pointsEarned?: true
    volunteerHoursEarned?: true
  }

  export type PointsHistorySumAggregateInputType = {
    pointsEarned?: true
    volunteerHoursEarned?: true
  }

  export type PointsHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    pointsEarned?: true
    volunteerHoursEarned?: true
    reason?: true
    createdAt?: true
  }

  export type PointsHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    pointsEarned?: true
    volunteerHoursEarned?: true
    reason?: true
    createdAt?: true
  }

  export type PointsHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    pointsEarned?: true
    volunteerHoursEarned?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type PointsHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PointsHistory to aggregate.
     */
    where?: PointsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PointsHistories to fetch.
     */
    orderBy?: PointsHistoryOrderByWithRelationInput | PointsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PointsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PointsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PointsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PointsHistories
    **/
    _count?: true | PointsHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PointsHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PointsHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PointsHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PointsHistoryMaxAggregateInputType
  }

  export type GetPointsHistoryAggregateType<T extends PointsHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePointsHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePointsHistory[P]>
      : GetScalarType<T[P], AggregatePointsHistory[P]>
  }




  export type PointsHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PointsHistoryWhereInput
    orderBy?: PointsHistoryOrderByWithAggregationInput | PointsHistoryOrderByWithAggregationInput[]
    by: PointsHistoryScalarFieldEnum[] | PointsHistoryScalarFieldEnum
    having?: PointsHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PointsHistoryCountAggregateInputType | true
    _avg?: PointsHistoryAvgAggregateInputType
    _sum?: PointsHistorySumAggregateInputType
    _min?: PointsHistoryMinAggregateInputType
    _max?: PointsHistoryMaxAggregateInputType
  }

  export type PointsHistoryGroupByOutputType = {
    id: string
    userId: string
    eventId: string | null
    pointsEarned: number
    volunteerHoursEarned: number
    reason: string
    createdAt: Date
    _count: PointsHistoryCountAggregateOutputType | null
    _avg: PointsHistoryAvgAggregateOutputType | null
    _sum: PointsHistorySumAggregateOutputType | null
    _min: PointsHistoryMinAggregateOutputType | null
    _max: PointsHistoryMaxAggregateOutputType | null
  }

  type GetPointsHistoryGroupByPayload<T extends PointsHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PointsHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PointsHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PointsHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PointsHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PointsHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    pointsEarned?: boolean
    volunteerHoursEarned?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pointsHistory"]>

  export type PointsHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    pointsEarned?: boolean
    volunteerHoursEarned?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pointsHistory"]>

  export type PointsHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    pointsEarned?: boolean
    volunteerHoursEarned?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type PointsHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PointsHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PointsHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PointsHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventId: string | null
      pointsEarned: number
      volunteerHoursEarned: number
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["pointsHistory"]>
    composites: {}
  }

  type PointsHistoryGetPayload<S extends boolean | null | undefined | PointsHistoryDefaultArgs> = $Result.GetResult<Prisma.$PointsHistoryPayload, S>

  type PointsHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PointsHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PointsHistoryCountAggregateInputType | true
    }

  export interface PointsHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PointsHistory'], meta: { name: 'PointsHistory' } }
    /**
     * Find zero or one PointsHistory that matches the filter.
     * @param {PointsHistoryFindUniqueArgs} args - Arguments to find a PointsHistory
     * @example
     * // Get one PointsHistory
     * const pointsHistory = await prisma.pointsHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PointsHistoryFindUniqueArgs>(args: SelectSubset<T, PointsHistoryFindUniqueArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PointsHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PointsHistoryFindUniqueOrThrowArgs} args - Arguments to find a PointsHistory
     * @example
     * // Get one PointsHistory
     * const pointsHistory = await prisma.pointsHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PointsHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PointsHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PointsHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryFindFirstArgs} args - Arguments to find a PointsHistory
     * @example
     * // Get one PointsHistory
     * const pointsHistory = await prisma.pointsHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PointsHistoryFindFirstArgs>(args?: SelectSubset<T, PointsHistoryFindFirstArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PointsHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryFindFirstOrThrowArgs} args - Arguments to find a PointsHistory
     * @example
     * // Get one PointsHistory
     * const pointsHistory = await prisma.pointsHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PointsHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PointsHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PointsHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PointsHistories
     * const pointsHistories = await prisma.pointsHistory.findMany()
     * 
     * // Get first 10 PointsHistories
     * const pointsHistories = await prisma.pointsHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pointsHistoryWithIdOnly = await prisma.pointsHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PointsHistoryFindManyArgs>(args?: SelectSubset<T, PointsHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PointsHistory.
     * @param {PointsHistoryCreateArgs} args - Arguments to create a PointsHistory.
     * @example
     * // Create one PointsHistory
     * const PointsHistory = await prisma.pointsHistory.create({
     *   data: {
     *     // ... data to create a PointsHistory
     *   }
     * })
     * 
     */
    create<T extends PointsHistoryCreateArgs>(args: SelectSubset<T, PointsHistoryCreateArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PointsHistories.
     * @param {PointsHistoryCreateManyArgs} args - Arguments to create many PointsHistories.
     * @example
     * // Create many PointsHistories
     * const pointsHistory = await prisma.pointsHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PointsHistoryCreateManyArgs>(args?: SelectSubset<T, PointsHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PointsHistories and returns the data saved in the database.
     * @param {PointsHistoryCreateManyAndReturnArgs} args - Arguments to create many PointsHistories.
     * @example
     * // Create many PointsHistories
     * const pointsHistory = await prisma.pointsHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PointsHistories and only return the `id`
     * const pointsHistoryWithIdOnly = await prisma.pointsHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PointsHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PointsHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PointsHistory.
     * @param {PointsHistoryDeleteArgs} args - Arguments to delete one PointsHistory.
     * @example
     * // Delete one PointsHistory
     * const PointsHistory = await prisma.pointsHistory.delete({
     *   where: {
     *     // ... filter to delete one PointsHistory
     *   }
     * })
     * 
     */
    delete<T extends PointsHistoryDeleteArgs>(args: SelectSubset<T, PointsHistoryDeleteArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PointsHistory.
     * @param {PointsHistoryUpdateArgs} args - Arguments to update one PointsHistory.
     * @example
     * // Update one PointsHistory
     * const pointsHistory = await prisma.pointsHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PointsHistoryUpdateArgs>(args: SelectSubset<T, PointsHistoryUpdateArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PointsHistories.
     * @param {PointsHistoryDeleteManyArgs} args - Arguments to filter PointsHistories to delete.
     * @example
     * // Delete a few PointsHistories
     * const { count } = await prisma.pointsHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PointsHistoryDeleteManyArgs>(args?: SelectSubset<T, PointsHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PointsHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PointsHistories
     * const pointsHistory = await prisma.pointsHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PointsHistoryUpdateManyArgs>(args: SelectSubset<T, PointsHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PointsHistory.
     * @param {PointsHistoryUpsertArgs} args - Arguments to update or create a PointsHistory.
     * @example
     * // Update or create a PointsHistory
     * const pointsHistory = await prisma.pointsHistory.upsert({
     *   create: {
     *     // ... data to create a PointsHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PointsHistory we want to update
     *   }
     * })
     */
    upsert<T extends PointsHistoryUpsertArgs>(args: SelectSubset<T, PointsHistoryUpsertArgs<ExtArgs>>): Prisma__PointsHistoryClient<$Result.GetResult<Prisma.$PointsHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PointsHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryCountArgs} args - Arguments to filter PointsHistories to count.
     * @example
     * // Count the number of PointsHistories
     * const count = await prisma.pointsHistory.count({
     *   where: {
     *     // ... the filter for the PointsHistories we want to count
     *   }
     * })
    **/
    count<T extends PointsHistoryCountArgs>(
      args?: Subset<T, PointsHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PointsHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PointsHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PointsHistoryAggregateArgs>(args: Subset<T, PointsHistoryAggregateArgs>): Prisma.PrismaPromise<GetPointsHistoryAggregateType<T>>

    /**
     * Group by PointsHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PointsHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PointsHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PointsHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PointsHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPointsHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PointsHistory model
   */
  readonly fields: PointsHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PointsHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PointsHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PointsHistory model
   */ 
  interface PointsHistoryFieldRefs {
    readonly id: FieldRef<"PointsHistory", 'String'>
    readonly userId: FieldRef<"PointsHistory", 'String'>
    readonly eventId: FieldRef<"PointsHistory", 'String'>
    readonly pointsEarned: FieldRef<"PointsHistory", 'Int'>
    readonly volunteerHoursEarned: FieldRef<"PointsHistory", 'Float'>
    readonly reason: FieldRef<"PointsHistory", 'String'>
    readonly createdAt: FieldRef<"PointsHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PointsHistory findUnique
   */
  export type PointsHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PointsHistory to fetch.
     */
    where: PointsHistoryWhereUniqueInput
  }

  /**
   * PointsHistory findUniqueOrThrow
   */
  export type PointsHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PointsHistory to fetch.
     */
    where: PointsHistoryWhereUniqueInput
  }

  /**
   * PointsHistory findFirst
   */
  export type PointsHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PointsHistory to fetch.
     */
    where?: PointsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PointsHistories to fetch.
     */
    orderBy?: PointsHistoryOrderByWithRelationInput | PointsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PointsHistories.
     */
    cursor?: PointsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PointsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PointsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PointsHistories.
     */
    distinct?: PointsHistoryScalarFieldEnum | PointsHistoryScalarFieldEnum[]
  }

  /**
   * PointsHistory findFirstOrThrow
   */
  export type PointsHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PointsHistory to fetch.
     */
    where?: PointsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PointsHistories to fetch.
     */
    orderBy?: PointsHistoryOrderByWithRelationInput | PointsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PointsHistories.
     */
    cursor?: PointsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PointsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PointsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PointsHistories.
     */
    distinct?: PointsHistoryScalarFieldEnum | PointsHistoryScalarFieldEnum[]
  }

  /**
   * PointsHistory findMany
   */
  export type PointsHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PointsHistories to fetch.
     */
    where?: PointsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PointsHistories to fetch.
     */
    orderBy?: PointsHistoryOrderByWithRelationInput | PointsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PointsHistories.
     */
    cursor?: PointsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PointsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PointsHistories.
     */
    skip?: number
    distinct?: PointsHistoryScalarFieldEnum | PointsHistoryScalarFieldEnum[]
  }

  /**
   * PointsHistory create
   */
  export type PointsHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PointsHistory.
     */
    data: XOR<PointsHistoryCreateInput, PointsHistoryUncheckedCreateInput>
  }

  /**
   * PointsHistory createMany
   */
  export type PointsHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PointsHistories.
     */
    data: PointsHistoryCreateManyInput | PointsHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PointsHistory createManyAndReturn
   */
  export type PointsHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PointsHistories.
     */
    data: PointsHistoryCreateManyInput | PointsHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PointsHistory update
   */
  export type PointsHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PointsHistory.
     */
    data: XOR<PointsHistoryUpdateInput, PointsHistoryUncheckedUpdateInput>
    /**
     * Choose, which PointsHistory to update.
     */
    where: PointsHistoryWhereUniqueInput
  }

  /**
   * PointsHistory updateMany
   */
  export type PointsHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PointsHistories.
     */
    data: XOR<PointsHistoryUpdateManyMutationInput, PointsHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PointsHistories to update
     */
    where?: PointsHistoryWhereInput
  }

  /**
   * PointsHistory upsert
   */
  export type PointsHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PointsHistory to update in case it exists.
     */
    where: PointsHistoryWhereUniqueInput
    /**
     * In case the PointsHistory found by the `where` argument doesn't exist, create a new PointsHistory with this data.
     */
    create: XOR<PointsHistoryCreateInput, PointsHistoryUncheckedCreateInput>
    /**
     * In case the PointsHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PointsHistoryUpdateInput, PointsHistoryUncheckedUpdateInput>
  }

  /**
   * PointsHistory delete
   */
  export type PointsHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
    /**
     * Filter which PointsHistory to delete.
     */
    where: PointsHistoryWhereUniqueInput
  }

  /**
   * PointsHistory deleteMany
   */
  export type PointsHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PointsHistories to delete
     */
    where?: PointsHistoryWhereInput
  }

  /**
   * PointsHistory without action
   */
  export type PointsHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PointsHistory
     */
    select?: PointsHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointsHistoryInclude<ExtArgs> | null
  }


  /**
   * Model EventFeedback
   */

  export type AggregateEventFeedback = {
    _count: EventFeedbackCountAggregateOutputType | null
    _avg: EventFeedbackAvgAggregateOutputType | null
    _sum: EventFeedbackSumAggregateOutputType | null
    _min: EventFeedbackMinAggregateOutputType | null
    _max: EventFeedbackMaxAggregateOutputType | null
  }

  export type EventFeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type EventFeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type EventFeedbackMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    rating: number | null
    feedback: string | null
    anonymous: boolean | null
    createdAt: Date | null
  }

  export type EventFeedbackMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    rating: number | null
    feedback: string | null
    anonymous: boolean | null
    createdAt: Date | null
  }

  export type EventFeedbackCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    rating: number
    feedback: number
    anonymous: number
    createdAt: number
    _all: number
  }


  export type EventFeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type EventFeedbackSumAggregateInputType = {
    rating?: true
  }

  export type EventFeedbackMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    rating?: true
    feedback?: true
    anonymous?: true
    createdAt?: true
  }

  export type EventFeedbackMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    rating?: true
    feedback?: true
    anonymous?: true
    createdAt?: true
  }

  export type EventFeedbackCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    rating?: true
    feedback?: true
    anonymous?: true
    createdAt?: true
    _all?: true
  }

  export type EventFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventFeedback to aggregate.
     */
    where?: EventFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventFeedbacks to fetch.
     */
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventFeedbacks
    **/
    _count?: true | EventFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventFeedbackMaxAggregateInputType
  }

  export type GetEventFeedbackAggregateType<T extends EventFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateEventFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventFeedback[P]>
      : GetScalarType<T[P], AggregateEventFeedback[P]>
  }




  export type EventFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventFeedbackWhereInput
    orderBy?: EventFeedbackOrderByWithAggregationInput | EventFeedbackOrderByWithAggregationInput[]
    by: EventFeedbackScalarFieldEnum[] | EventFeedbackScalarFieldEnum
    having?: EventFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventFeedbackCountAggregateInputType | true
    _avg?: EventFeedbackAvgAggregateInputType
    _sum?: EventFeedbackSumAggregateInputType
    _min?: EventFeedbackMinAggregateInputType
    _max?: EventFeedbackMaxAggregateInputType
  }

  export type EventFeedbackGroupByOutputType = {
    id: string
    userId: string
    eventId: string
    rating: number
    feedback: string | null
    anonymous: boolean
    createdAt: Date
    _count: EventFeedbackCountAggregateOutputType | null
    _avg: EventFeedbackAvgAggregateOutputType | null
    _sum: EventFeedbackSumAggregateOutputType | null
    _min: EventFeedbackMinAggregateOutputType | null
    _max: EventFeedbackMaxAggregateOutputType | null
  }

  type GetEventFeedbackGroupByPayload<T extends EventFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], EventFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type EventFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    rating?: boolean
    feedback?: boolean
    anonymous?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventFeedback"]>

  export type EventFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    rating?: boolean
    feedback?: boolean
    anonymous?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventFeedback"]>

  export type EventFeedbackSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    rating?: boolean
    feedback?: boolean
    anonymous?: boolean
    createdAt?: boolean
  }

  export type EventFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventFeedback"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventId: string
      rating: number
      feedback: string | null
      anonymous: boolean
      createdAt: Date
    }, ExtArgs["result"]["eventFeedback"]>
    composites: {}
  }

  type EventFeedbackGetPayload<S extends boolean | null | undefined | EventFeedbackDefaultArgs> = $Result.GetResult<Prisma.$EventFeedbackPayload, S>

  type EventFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventFeedbackCountAggregateInputType | true
    }

  export interface EventFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventFeedback'], meta: { name: 'EventFeedback' } }
    /**
     * Find zero or one EventFeedback that matches the filter.
     * @param {EventFeedbackFindUniqueArgs} args - Arguments to find a EventFeedback
     * @example
     * // Get one EventFeedback
     * const eventFeedback = await prisma.eventFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFeedbackFindUniqueArgs>(args: SelectSubset<T, EventFeedbackFindUniqueArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventFeedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFeedbackFindUniqueOrThrowArgs} args - Arguments to find a EventFeedback
     * @example
     * // Get one EventFeedback
     * const eventFeedback = await prisma.eventFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackFindFirstArgs} args - Arguments to find a EventFeedback
     * @example
     * // Get one EventFeedback
     * const eventFeedback = await prisma.eventFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFeedbackFindFirstArgs>(args?: SelectSubset<T, EventFeedbackFindFirstArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackFindFirstOrThrowArgs} args - Arguments to find a EventFeedback
     * @example
     * // Get one EventFeedback
     * const eventFeedback = await prisma.eventFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventFeedbacks
     * const eventFeedbacks = await prisma.eventFeedback.findMany()
     * 
     * // Get first 10 EventFeedbacks
     * const eventFeedbacks = await prisma.eventFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventFeedbackWithIdOnly = await prisma.eventFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFeedbackFindManyArgs>(args?: SelectSubset<T, EventFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventFeedback.
     * @param {EventFeedbackCreateArgs} args - Arguments to create a EventFeedback.
     * @example
     * // Create one EventFeedback
     * const EventFeedback = await prisma.eventFeedback.create({
     *   data: {
     *     // ... data to create a EventFeedback
     *   }
     * })
     * 
     */
    create<T extends EventFeedbackCreateArgs>(args: SelectSubset<T, EventFeedbackCreateArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventFeedbacks.
     * @param {EventFeedbackCreateManyArgs} args - Arguments to create many EventFeedbacks.
     * @example
     * // Create many EventFeedbacks
     * const eventFeedback = await prisma.eventFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventFeedbackCreateManyArgs>(args?: SelectSubset<T, EventFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventFeedbacks and returns the data saved in the database.
     * @param {EventFeedbackCreateManyAndReturnArgs} args - Arguments to create many EventFeedbacks.
     * @example
     * // Create many EventFeedbacks
     * const eventFeedback = await prisma.eventFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventFeedbacks and only return the `id`
     * const eventFeedbackWithIdOnly = await prisma.eventFeedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, EventFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventFeedback.
     * @param {EventFeedbackDeleteArgs} args - Arguments to delete one EventFeedback.
     * @example
     * // Delete one EventFeedback
     * const EventFeedback = await prisma.eventFeedback.delete({
     *   where: {
     *     // ... filter to delete one EventFeedback
     *   }
     * })
     * 
     */
    delete<T extends EventFeedbackDeleteArgs>(args: SelectSubset<T, EventFeedbackDeleteArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventFeedback.
     * @param {EventFeedbackUpdateArgs} args - Arguments to update one EventFeedback.
     * @example
     * // Update one EventFeedback
     * const eventFeedback = await prisma.eventFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventFeedbackUpdateArgs>(args: SelectSubset<T, EventFeedbackUpdateArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventFeedbacks.
     * @param {EventFeedbackDeleteManyArgs} args - Arguments to filter EventFeedbacks to delete.
     * @example
     * // Delete a few EventFeedbacks
     * const { count } = await prisma.eventFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventFeedbackDeleteManyArgs>(args?: SelectSubset<T, EventFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventFeedbacks
     * const eventFeedback = await prisma.eventFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventFeedbackUpdateManyArgs>(args: SelectSubset<T, EventFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventFeedback.
     * @param {EventFeedbackUpsertArgs} args - Arguments to update or create a EventFeedback.
     * @example
     * // Update or create a EventFeedback
     * const eventFeedback = await prisma.eventFeedback.upsert({
     *   create: {
     *     // ... data to create a EventFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventFeedback we want to update
     *   }
     * })
     */
    upsert<T extends EventFeedbackUpsertArgs>(args: SelectSubset<T, EventFeedbackUpsertArgs<ExtArgs>>): Prisma__EventFeedbackClient<$Result.GetResult<Prisma.$EventFeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackCountArgs} args - Arguments to filter EventFeedbacks to count.
     * @example
     * // Count the number of EventFeedbacks
     * const count = await prisma.eventFeedback.count({
     *   where: {
     *     // ... the filter for the EventFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends EventFeedbackCountArgs>(
      args?: Subset<T, EventFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventFeedbackAggregateArgs>(args: Subset<T, EventFeedbackAggregateArgs>): Prisma.PrismaPromise<GetEventFeedbackAggregateType<T>>

    /**
     * Group by EventFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: EventFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventFeedback model
   */
  readonly fields: EventFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventFeedback model
   */ 
  interface EventFeedbackFieldRefs {
    readonly id: FieldRef<"EventFeedback", 'String'>
    readonly userId: FieldRef<"EventFeedback", 'String'>
    readonly eventId: FieldRef<"EventFeedback", 'String'>
    readonly rating: FieldRef<"EventFeedback", 'Int'>
    readonly feedback: FieldRef<"EventFeedback", 'String'>
    readonly anonymous: FieldRef<"EventFeedback", 'Boolean'>
    readonly createdAt: FieldRef<"EventFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventFeedback findUnique
   */
  export type EventFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which EventFeedback to fetch.
     */
    where: EventFeedbackWhereUniqueInput
  }

  /**
   * EventFeedback findUniqueOrThrow
   */
  export type EventFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which EventFeedback to fetch.
     */
    where: EventFeedbackWhereUniqueInput
  }

  /**
   * EventFeedback findFirst
   */
  export type EventFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which EventFeedback to fetch.
     */
    where?: EventFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventFeedbacks to fetch.
     */
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventFeedbacks.
     */
    cursor?: EventFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventFeedbacks.
     */
    distinct?: EventFeedbackScalarFieldEnum | EventFeedbackScalarFieldEnum[]
  }

  /**
   * EventFeedback findFirstOrThrow
   */
  export type EventFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which EventFeedback to fetch.
     */
    where?: EventFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventFeedbacks to fetch.
     */
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventFeedbacks.
     */
    cursor?: EventFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventFeedbacks.
     */
    distinct?: EventFeedbackScalarFieldEnum | EventFeedbackScalarFieldEnum[]
  }

  /**
   * EventFeedback findMany
   */
  export type EventFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which EventFeedbacks to fetch.
     */
    where?: EventFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventFeedbacks to fetch.
     */
    orderBy?: EventFeedbackOrderByWithRelationInput | EventFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventFeedbacks.
     */
    cursor?: EventFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventFeedbacks.
     */
    skip?: number
    distinct?: EventFeedbackScalarFieldEnum | EventFeedbackScalarFieldEnum[]
  }

  /**
   * EventFeedback create
   */
  export type EventFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a EventFeedback.
     */
    data: XOR<EventFeedbackCreateInput, EventFeedbackUncheckedCreateInput>
  }

  /**
   * EventFeedback createMany
   */
  export type EventFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventFeedbacks.
     */
    data: EventFeedbackCreateManyInput | EventFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventFeedback createManyAndReturn
   */
  export type EventFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventFeedbacks.
     */
    data: EventFeedbackCreateManyInput | EventFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventFeedback update
   */
  export type EventFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a EventFeedback.
     */
    data: XOR<EventFeedbackUpdateInput, EventFeedbackUncheckedUpdateInput>
    /**
     * Choose, which EventFeedback to update.
     */
    where: EventFeedbackWhereUniqueInput
  }

  /**
   * EventFeedback updateMany
   */
  export type EventFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventFeedbacks.
     */
    data: XOR<EventFeedbackUpdateManyMutationInput, EventFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which EventFeedbacks to update
     */
    where?: EventFeedbackWhereInput
  }

  /**
   * EventFeedback upsert
   */
  export type EventFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the EventFeedback to update in case it exists.
     */
    where: EventFeedbackWhereUniqueInput
    /**
     * In case the EventFeedback found by the `where` argument doesn't exist, create a new EventFeedback with this data.
     */
    create: XOR<EventFeedbackCreateInput, EventFeedbackUncheckedCreateInput>
    /**
     * In case the EventFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventFeedbackUpdateInput, EventFeedbackUncheckedUpdateInput>
  }

  /**
   * EventFeedback delete
   */
  export type EventFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
    /**
     * Filter which EventFeedback to delete.
     */
    where: EventFeedbackWhereUniqueInput
  }

  /**
   * EventFeedback deleteMany
   */
  export type EventFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventFeedbacks to delete
     */
    where?: EventFeedbackWhereInput
  }

  /**
   * EventFeedback without action
   */
  export type EventFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventFeedback
     */
    select?: EventFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventFeedbackInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomMinAggregateOutputType = {
    id: string | null
    clubId: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    id: string | null
    clubId: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatRoomCountAggregateOutputType = {
    id: number
    clubId: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatRoomMinAggregateInputType = {
    id?: true
    clubId?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    id?: true
    clubId?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatRoomCountAggregateInputType = {
    id?: true
    clubId?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    id: string
    clubId: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubId?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubId?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectScalar = {
    id?: boolean
    clubId?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $ChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clubId: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomFindUniqueArgs>(args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomFindFirstArgs>(args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomFindManyArgs>(args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends ChatRoomCreateArgs>(args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRooms.
     * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomCreateManyArgs>(args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRooms and returns the data saved in the database.
     * @param {ChatRoomCreateManyAndReturnArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRooms and only return the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDeleteArgs>(args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomUpdateArgs>(args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomUpdateManyArgs>(args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomUpsertArgs>(args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoom model
   */ 
  interface ChatRoomFieldRefs {
    readonly id: FieldRef<"ChatRoom", 'String'>
    readonly clubId: FieldRef<"ChatRoom", 'String'>
    readonly name: FieldRef<"ChatRoom", 'String'>
    readonly description: FieldRef<"ChatRoom", 'String'>
    readonly isActive: FieldRef<"ChatRoom", 'Boolean'>
    readonly createdAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoom", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }

  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoom createManyAndReturn
   */
  export type ChatRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }

  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    chatRoomId: string | null
    userId: string | null
    content: string | null
    messageType: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    chatRoomId: string | null
    userId: string | null
    content: string | null
    messageType: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    chatRoomId: number
    userId: number
    content: number
    messageType: number
    fileUrl: number
    createdAt: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    chatRoomId?: true
    userId?: true
    content?: true
    messageType?: true
    fileUrl?: true
    createdAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    chatRoomId?: true
    userId?: true
    content?: true
    messageType?: true
    fileUrl?: true
    createdAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    chatRoomId?: true
    userId?: true
    content?: true
    messageType?: true
    fileUrl?: true
    createdAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    chatRoomId: string
    userId: string
    content: string
    messageType: string
    fileUrl: string | null
    createdAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatRoomId?: boolean
    userId?: boolean
    content?: boolean
    messageType?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatRoomId?: boolean
    userId?: boolean
    content?: boolean
    messageType?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    chatRoomId?: boolean
    userId?: boolean
    content?: boolean
    messageType?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }

  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chatRoomId: string
      userId: string
      content: string
      messageType: string
      fileUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */ 
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly chatRoomId: FieldRef<"ChatMessage", 'String'>
    readonly userId: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly messageType: FieldRef<"ChatMessage", 'String'>
    readonly fileUrl: FieldRef<"ChatMessage", 'String'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    actionUrl: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    type: string
    isRead: boolean
    actionUrl: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      type: string
      isRead: boolean
      actionUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    criteria: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    criteria: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    criteria: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    isActive?: true
    createdAt?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    isActive?: true
    createdAt?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive: boolean
    createdAt: Date
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    isActive?: boolean
    createdAt?: boolean
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type BadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string
      criteria: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userBadges<T extends Badge$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, Badge$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */ 
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly icon: FieldRef<"Badge", 'String'>
    readonly criteria: FieldRef<"Badge", 'String'>
    readonly isActive: FieldRef<"Badge", 'Boolean'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge.userBadges
   */
  export type Badge$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
    eventId: string | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
    eventId: string | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeId: number
    earnedAt: number
    eventId: number
    _all: number
  }


  export type UserBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    eventId?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    eventId?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    eventId?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: string
    userId: string
    badgeId: string
    earnedAt: Date
    eventId: string | null
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    eventId?: boolean
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    eventId?: boolean
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    eventId?: boolean
  }

  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      badge: Prisma.$BadgePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      badgeId: string
      earnedAt: Date
      eventId: string | null
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    badge<T extends BadgeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BadgeDefaultArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */ 
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'String'>
    readonly userId: FieldRef<"UserBadge", 'String'>
    readonly badgeId: FieldRef<"UserBadge", 'String'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
    readonly eventId: FieldRef<"UserBadge", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    lastName: 'lastName',
    studentId: 'studentId',
    phone: 'phone',
    department: 'department',
    yearOfStudy: 'yearOfStudy',
    role: 'role',
    isVerified: 'isVerified',
    profileImage: 'profileImage',
    totalPoints: 'totalPoints',
    totalVolunteerHours: 'totalVolunteerHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClubScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    logoUrl: 'logoUrl',
    coverImageUrl: 'coverImageUrl',
    contactEmail: 'contactEmail',
    isActive: 'isActive',
    memberCount: 'memberCount',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    clubId: 'clubId',
    eventType: 'eventType',
    startDate: 'startDate',
    endDate: 'endDate',
    location: 'location',
    maxParticipants: 'maxParticipants',
    registrationDeadline: 'registrationDeadline',
    pointsReward: 'pointsReward',
    volunteerHours: 'volunteerHours',
    imageUrl: 'imageUrl',
    tags: 'tags',
    skillAreas: 'skillAreas',
    isPublished: 'isPublished',
    requiresApproval: 'requiresApproval',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const UserClubScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clubId: 'clubId',
    role: 'role',
    joinedAt: 'joinedAt',
    isActive: 'isActive'
  };

  export type UserClubScalarFieldEnum = (typeof UserClubScalarFieldEnum)[keyof typeof UserClubScalarFieldEnum]


  export const EventRegistrationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    registrationDate: 'registrationDate',
    status: 'status',
    attended: 'attended',
    attendanceMarkedBy: 'attendanceMarkedBy',
    attendanceMarkedAt: 'attendanceMarkedAt',
    attendanceMethod: 'attendanceMethod',
    checkInTime: 'checkInTime',
    checkOutTime: 'checkOutTime',
    pointsAwarded: 'pointsAwarded',
    volunteerHoursAwarded: 'volunteerHoursAwarded',
    feedbackSubmitted: 'feedbackSubmitted',
    notes: 'notes'
  };

  export type EventRegistrationScalarFieldEnum = (typeof EventRegistrationScalarFieldEnum)[keyof typeof EventRegistrationScalarFieldEnum]


  export const AttendanceLogScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    markedBy: 'markedBy',
    action: 'action',
    previousStatus: 'previousStatus',
    newStatus: 'newStatus',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type AttendanceLogScalarFieldEnum = (typeof AttendanceLogScalarFieldEnum)[keyof typeof AttendanceLogScalarFieldEnum]


  export const EventQRCodeScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    qrCodeData: 'qrCodeData',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    maxScans: 'maxScans',
    currentScans: 'currentScans',
    isActive: 'isActive',
    createdBy: 'createdBy',
    createdAt: 'createdAt'
  };

  export type EventQRCodeScalarFieldEnum = (typeof EventQRCodeScalarFieldEnum)[keyof typeof EventQRCodeScalarFieldEnum]


  export const PointsHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    pointsEarned: 'pointsEarned',
    volunteerHoursEarned: 'volunteerHoursEarned',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type PointsHistoryScalarFieldEnum = (typeof PointsHistoryScalarFieldEnum)[keyof typeof PointsHistoryScalarFieldEnum]


  export const EventFeedbackScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    rating: 'rating',
    feedback: 'feedback',
    anonymous: 'anonymous',
    createdAt: 'createdAt'
  };

  export type EventFeedbackScalarFieldEnum = (typeof EventFeedbackScalarFieldEnum)[keyof typeof EventFeedbackScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    id: 'id',
    clubId: 'clubId',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    chatRoomId: 'chatRoomId',
    userId: 'userId',
    content: 'content',
    messageType: 'messageType',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    actionUrl: 'actionUrl',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    criteria: 'criteria',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeId: 'badgeId',
    earnedAt: 'earnedAt',
    eventId: 'eventId'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ClubCategory'
   */
  export type EnumClubCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubCategory'>
    


  /**
   * Reference to a field of type 'ClubCategory[]'
   */
  export type ListEnumClubCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubCategory[]'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'EventType[]'
   */
  export type ListEnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType[]'>
    


  /**
   * Reference to a field of type 'ClubMemberRole'
   */
  export type EnumClubMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubMemberRole'>
    


  /**
   * Reference to a field of type 'ClubMemberRole[]'
   */
  export type ListEnumClubMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubMemberRole[]'>
    


  /**
   * Reference to a field of type 'RegistrationStatus'
   */
  export type EnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus'>
    


  /**
   * Reference to a field of type 'RegistrationStatus[]'
   */
  export type ListEnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus[]'>
    


  /**
   * Reference to a field of type 'AttendanceMethod'
   */
  export type EnumAttendanceMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceMethod'>
    


  /**
   * Reference to a field of type 'AttendanceMethod[]'
   */
  export type ListEnumAttendanceMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceMethod[]'>
    


  /**
   * Reference to a field of type 'AttendanceAction'
   */
  export type EnumAttendanceActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceAction'>
    


  /**
   * Reference to a field of type 'AttendanceAction[]'
   */
  export type ListEnumAttendanceActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceAction[]'>
    
  /**
   * Deep Input Types
   */


  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    studentId?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    yearOfStudy?: IntNullableFilter<"User"> | number | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isVerified?: BoolFilter<"User"> | boolean
    profileImage?: StringNullableFilter<"User"> | string | null
    totalPoints?: IntFilter<"User"> | number
    totalVolunteerHours?: FloatFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    attendanceLogs?: AttendanceLogListRelationFilter
    attendanceLogsUser?: AttendanceLogListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    createdClubs?: ClubListRelationFilter
    eventFeedback?: EventFeedbackListRelationFilter
    createdQRCodes?: EventQRCodeListRelationFilter
    markedAttendance?: EventRegistrationListRelationFilter
    eventRegistrations?: EventRegistrationListRelationFilter
    createdEvents?: EventListRelationFilter
    notifications?: NotificationListRelationFilter
    pointsHistory?: PointsHistoryListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    userClubs?: UserClubListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    studentId?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    yearOfStudy?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attendanceLogs?: AttendanceLogOrderByRelationAggregateInput
    attendanceLogsUser?: AttendanceLogOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    createdClubs?: ClubOrderByRelationAggregateInput
    eventFeedback?: EventFeedbackOrderByRelationAggregateInput
    createdQRCodes?: EventQRCodeOrderByRelationAggregateInput
    markedAttendance?: EventRegistrationOrderByRelationAggregateInput
    eventRegistrations?: EventRegistrationOrderByRelationAggregateInput
    createdEvents?: EventOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    pointsHistory?: PointsHistoryOrderByRelationAggregateInput
    userBadges?: UserBadgeOrderByRelationAggregateInput
    userClubs?: UserClubOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    studentId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    yearOfStudy?: IntNullableFilter<"User"> | number | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isVerified?: BoolFilter<"User"> | boolean
    profileImage?: StringNullableFilter<"User"> | string | null
    totalPoints?: IntFilter<"User"> | number
    totalVolunteerHours?: FloatFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    attendanceLogs?: AttendanceLogListRelationFilter
    attendanceLogsUser?: AttendanceLogListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    createdClubs?: ClubListRelationFilter
    eventFeedback?: EventFeedbackListRelationFilter
    createdQRCodes?: EventQRCodeListRelationFilter
    markedAttendance?: EventRegistrationListRelationFilter
    eventRegistrations?: EventRegistrationListRelationFilter
    createdEvents?: EventListRelationFilter
    notifications?: NotificationListRelationFilter
    pointsHistory?: PointsHistoryListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    userClubs?: UserClubListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
  }, "id" | "email" | "studentId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    studentId?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    yearOfStudy?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    studentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    yearOfStudy?: IntNullableWithAggregatesFilter<"User"> | number | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    totalPoints?: IntWithAggregatesFilter<"User"> | number
    totalVolunteerHours?: FloatWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    category?: EnumClubCategoryFilter<"Club"> | $Enums.ClubCategory
    logoUrl?: StringNullableFilter<"Club"> | string | null
    coverImageUrl?: StringNullableFilter<"Club"> | string | null
    contactEmail?: StringNullableFilter<"Club"> | string | null
    isActive?: BoolFilter<"Club"> | boolean
    memberCount?: IntFilter<"Club"> | number
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    chatRooms?: ChatRoomListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    events?: EventListRelationFilter
    userClubs?: UserClubListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    isActive?: SortOrder
    memberCount?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatRooms?: ChatRoomOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    events?: EventOrderByRelationAggregateInput
    userClubs?: UserClubOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    category?: EnumClubCategoryFilter<"Club"> | $Enums.ClubCategory
    logoUrl?: StringNullableFilter<"Club"> | string | null
    coverImageUrl?: StringNullableFilter<"Club"> | string | null
    contactEmail?: StringNullableFilter<"Club"> | string | null
    isActive?: BoolFilter<"Club"> | boolean
    memberCount?: IntFilter<"Club"> | number
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    chatRooms?: ChatRoomListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    events?: EventListRelationFilter
    userClubs?: UserClubListRelationFilter
  }, "id">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    isActive?: SortOrder
    memberCount?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClubCountOrderByAggregateInput
    _avg?: ClubAvgOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
    _sum?: ClubSumOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Club"> | string
    name?: StringWithAggregatesFilter<"Club"> | string
    description?: StringNullableWithAggregatesFilter<"Club"> | string | null
    category?: EnumClubCategoryWithAggregatesFilter<"Club"> | $Enums.ClubCategory
    logoUrl?: StringNullableWithAggregatesFilter<"Club"> | string | null
    coverImageUrl?: StringNullableWithAggregatesFilter<"Club"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Club"> | string | null
    isActive?: BoolWithAggregatesFilter<"Club"> | boolean
    memberCount?: IntWithAggregatesFilter<"Club"> | number
    createdBy?: StringWithAggregatesFilter<"Club"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    clubId?: StringFilter<"Event"> | string
    eventType?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    maxParticipants?: IntNullableFilter<"Event"> | number | null
    registrationDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    pointsReward?: IntFilter<"Event"> | number
    volunteerHours?: FloatFilter<"Event"> | number
    imageUrl?: StringNullableFilter<"Event"> | string | null
    tags?: StringNullableListFilter<"Event">
    skillAreas?: StringNullableListFilter<"Event">
    isPublished?: BoolFilter<"Event"> | boolean
    requiresApproval?: BoolFilter<"Event"> | boolean
    createdBy?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    attendanceLogs?: AttendanceLogListRelationFilter
    eventFeedback?: EventFeedbackListRelationFilter
    eventQRCodes?: EventQRCodeListRelationFilter
    eventRegistrations?: EventRegistrationListRelationFilter
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    clubId?: SortOrder
    eventType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrderInput | SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    registrationDeadline?: SortOrderInput | SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    skillAreas?: SortOrder
    isPublished?: SortOrder
    requiresApproval?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attendanceLogs?: AttendanceLogOrderByRelationAggregateInput
    eventFeedback?: EventFeedbackOrderByRelationAggregateInput
    eventQRCodes?: EventQRCodeOrderByRelationAggregateInput
    eventRegistrations?: EventRegistrationOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    clubId?: StringFilter<"Event"> | string
    eventType?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    maxParticipants?: IntNullableFilter<"Event"> | number | null
    registrationDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    pointsReward?: IntFilter<"Event"> | number
    volunteerHours?: FloatFilter<"Event"> | number
    imageUrl?: StringNullableFilter<"Event"> | string | null
    tags?: StringNullableListFilter<"Event">
    skillAreas?: StringNullableListFilter<"Event">
    isPublished?: BoolFilter<"Event"> | boolean
    requiresApproval?: BoolFilter<"Event"> | boolean
    createdBy?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    attendanceLogs?: AttendanceLogListRelationFilter
    eventFeedback?: EventFeedbackListRelationFilter
    eventQRCodes?: EventQRCodeListRelationFilter
    eventRegistrations?: EventRegistrationListRelationFilter
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    clubId?: SortOrder
    eventType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrderInput | SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    registrationDeadline?: SortOrderInput | SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    skillAreas?: SortOrder
    isPublished?: SortOrder
    requiresApproval?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    clubId?: StringWithAggregatesFilter<"Event"> | string
    eventType?: EnumEventTypeWithAggregatesFilter<"Event"> | $Enums.EventType
    startDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    maxParticipants?: IntNullableWithAggregatesFilter<"Event"> | number | null
    registrationDeadline?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    pointsReward?: IntWithAggregatesFilter<"Event"> | number
    volunteerHours?: FloatWithAggregatesFilter<"Event"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Event"> | string | null
    tags?: StringNullableListFilter<"Event">
    skillAreas?: StringNullableListFilter<"Event">
    isPublished?: BoolWithAggregatesFilter<"Event"> | boolean
    requiresApproval?: BoolWithAggregatesFilter<"Event"> | boolean
    createdBy?: StringWithAggregatesFilter<"Event"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type UserClubWhereInput = {
    AND?: UserClubWhereInput | UserClubWhereInput[]
    OR?: UserClubWhereInput[]
    NOT?: UserClubWhereInput | UserClubWhereInput[]
    id?: StringFilter<"UserClub"> | string
    userId?: StringFilter<"UserClub"> | string
    clubId?: StringFilter<"UserClub"> | string
    role?: EnumClubMemberRoleFilter<"UserClub"> | $Enums.ClubMemberRole
    joinedAt?: DateTimeFilter<"UserClub"> | Date | string
    isActive?: BoolFilter<"UserClub"> | boolean
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserClubOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
    club?: ClubOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_clubId?: UserClubUserIdClubIdCompoundUniqueInput
    AND?: UserClubWhereInput | UserClubWhereInput[]
    OR?: UserClubWhereInput[]
    NOT?: UserClubWhereInput | UserClubWhereInput[]
    userId?: StringFilter<"UserClub"> | string
    clubId?: StringFilter<"UserClub"> | string
    role?: EnumClubMemberRoleFilter<"UserClub"> | $Enums.ClubMemberRole
    joinedAt?: DateTimeFilter<"UserClub"> | Date | string
    isActive?: BoolFilter<"UserClub"> | boolean
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_clubId">

  export type UserClubOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
    _count?: UserClubCountOrderByAggregateInput
    _max?: UserClubMaxOrderByAggregateInput
    _min?: UserClubMinOrderByAggregateInput
  }

  export type UserClubScalarWhereWithAggregatesInput = {
    AND?: UserClubScalarWhereWithAggregatesInput | UserClubScalarWhereWithAggregatesInput[]
    OR?: UserClubScalarWhereWithAggregatesInput[]
    NOT?: UserClubScalarWhereWithAggregatesInput | UserClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserClub"> | string
    userId?: StringWithAggregatesFilter<"UserClub"> | string
    clubId?: StringWithAggregatesFilter<"UserClub"> | string
    role?: EnumClubMemberRoleWithAggregatesFilter<"UserClub"> | $Enums.ClubMemberRole
    joinedAt?: DateTimeWithAggregatesFilter<"UserClub"> | Date | string
    isActive?: BoolWithAggregatesFilter<"UserClub"> | boolean
  }

  export type EventRegistrationWhereInput = {
    AND?: EventRegistrationWhereInput | EventRegistrationWhereInput[]
    OR?: EventRegistrationWhereInput[]
    NOT?: EventRegistrationWhereInput | EventRegistrationWhereInput[]
    id?: StringFilter<"EventRegistration"> | string
    userId?: StringFilter<"EventRegistration"> | string
    eventId?: StringFilter<"EventRegistration"> | string
    registrationDate?: DateTimeFilter<"EventRegistration"> | Date | string
    status?: EnumRegistrationStatusFilter<"EventRegistration"> | $Enums.RegistrationStatus
    attended?: BoolFilter<"EventRegistration"> | boolean
    attendanceMarkedBy?: StringNullableFilter<"EventRegistration"> | string | null
    attendanceMarkedAt?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    attendanceMethod?: EnumAttendanceMethodNullableFilter<"EventRegistration"> | $Enums.AttendanceMethod | null
    checkInTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    pointsAwarded?: IntFilter<"EventRegistration"> | number
    volunteerHoursAwarded?: FloatFilter<"EventRegistration"> | number
    feedbackSubmitted?: BoolFilter<"EventRegistration"> | boolean
    notes?: StringNullableFilter<"EventRegistration"> | string | null
    attendanceMarkedByUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registrationDate?: SortOrder
    status?: SortOrder
    attended?: SortOrder
    attendanceMarkedBy?: SortOrderInput | SortOrder
    attendanceMarkedAt?: SortOrderInput | SortOrder
    attendanceMethod?: SortOrderInput | SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
    feedbackSubmitted?: SortOrder
    notes?: SortOrderInput | SortOrder
    attendanceMarkedByUser?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EventRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId?: EventRegistrationUserIdEventIdCompoundUniqueInput
    AND?: EventRegistrationWhereInput | EventRegistrationWhereInput[]
    OR?: EventRegistrationWhereInput[]
    NOT?: EventRegistrationWhereInput | EventRegistrationWhereInput[]
    userId?: StringFilter<"EventRegistration"> | string
    eventId?: StringFilter<"EventRegistration"> | string
    registrationDate?: DateTimeFilter<"EventRegistration"> | Date | string
    status?: EnumRegistrationStatusFilter<"EventRegistration"> | $Enums.RegistrationStatus
    attended?: BoolFilter<"EventRegistration"> | boolean
    attendanceMarkedBy?: StringNullableFilter<"EventRegistration"> | string | null
    attendanceMarkedAt?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    attendanceMethod?: EnumAttendanceMethodNullableFilter<"EventRegistration"> | $Enums.AttendanceMethod | null
    checkInTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    pointsAwarded?: IntFilter<"EventRegistration"> | number
    volunteerHoursAwarded?: FloatFilter<"EventRegistration"> | number
    feedbackSubmitted?: BoolFilter<"EventRegistration"> | boolean
    notes?: StringNullableFilter<"EventRegistration"> | string | null
    attendanceMarkedByUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_eventId">

  export type EventRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registrationDate?: SortOrder
    status?: SortOrder
    attended?: SortOrder
    attendanceMarkedBy?: SortOrderInput | SortOrder
    attendanceMarkedAt?: SortOrderInput | SortOrder
    attendanceMethod?: SortOrderInput | SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
    feedbackSubmitted?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: EventRegistrationCountOrderByAggregateInput
    _avg?: EventRegistrationAvgOrderByAggregateInput
    _max?: EventRegistrationMaxOrderByAggregateInput
    _min?: EventRegistrationMinOrderByAggregateInput
    _sum?: EventRegistrationSumOrderByAggregateInput
  }

  export type EventRegistrationScalarWhereWithAggregatesInput = {
    AND?: EventRegistrationScalarWhereWithAggregatesInput | EventRegistrationScalarWhereWithAggregatesInput[]
    OR?: EventRegistrationScalarWhereWithAggregatesInput[]
    NOT?: EventRegistrationScalarWhereWithAggregatesInput | EventRegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventRegistration"> | string
    userId?: StringWithAggregatesFilter<"EventRegistration"> | string
    eventId?: StringWithAggregatesFilter<"EventRegistration"> | string
    registrationDate?: DateTimeWithAggregatesFilter<"EventRegistration"> | Date | string
    status?: EnumRegistrationStatusWithAggregatesFilter<"EventRegistration"> | $Enums.RegistrationStatus
    attended?: BoolWithAggregatesFilter<"EventRegistration"> | boolean
    attendanceMarkedBy?: StringNullableWithAggregatesFilter<"EventRegistration"> | string | null
    attendanceMarkedAt?: DateTimeNullableWithAggregatesFilter<"EventRegistration"> | Date | string | null
    attendanceMethod?: EnumAttendanceMethodNullableWithAggregatesFilter<"EventRegistration"> | $Enums.AttendanceMethod | null
    checkInTime?: DateTimeNullableWithAggregatesFilter<"EventRegistration"> | Date | string | null
    checkOutTime?: DateTimeNullableWithAggregatesFilter<"EventRegistration"> | Date | string | null
    pointsAwarded?: IntWithAggregatesFilter<"EventRegistration"> | number
    volunteerHoursAwarded?: FloatWithAggregatesFilter<"EventRegistration"> | number
    feedbackSubmitted?: BoolWithAggregatesFilter<"EventRegistration"> | boolean
    notes?: StringNullableWithAggregatesFilter<"EventRegistration"> | string | null
  }

  export type AttendanceLogWhereInput = {
    AND?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    OR?: AttendanceLogWhereInput[]
    NOT?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    id?: StringFilter<"AttendanceLog"> | string
    eventId?: StringFilter<"AttendanceLog"> | string
    userId?: StringFilter<"AttendanceLog"> | string
    markedBy?: StringFilter<"AttendanceLog"> | string
    action?: EnumAttendanceActionFilter<"AttendanceLog"> | $Enums.AttendanceAction
    previousStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    newStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    reason?: StringNullableFilter<"AttendanceLog"> | string | null
    createdAt?: DateTimeFilter<"AttendanceLog"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    markedByUser?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AttendanceLogOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    markedBy?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    markedByUser?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AttendanceLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    OR?: AttendanceLogWhereInput[]
    NOT?: AttendanceLogWhereInput | AttendanceLogWhereInput[]
    eventId?: StringFilter<"AttendanceLog"> | string
    userId?: StringFilter<"AttendanceLog"> | string
    markedBy?: StringFilter<"AttendanceLog"> | string
    action?: EnumAttendanceActionFilter<"AttendanceLog"> | $Enums.AttendanceAction
    previousStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    newStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    reason?: StringNullableFilter<"AttendanceLog"> | string | null
    createdAt?: DateTimeFilter<"AttendanceLog"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    markedByUser?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AttendanceLogOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    markedBy?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AttendanceLogCountOrderByAggregateInput
    _max?: AttendanceLogMaxOrderByAggregateInput
    _min?: AttendanceLogMinOrderByAggregateInput
  }

  export type AttendanceLogScalarWhereWithAggregatesInput = {
    AND?: AttendanceLogScalarWhereWithAggregatesInput | AttendanceLogScalarWhereWithAggregatesInput[]
    OR?: AttendanceLogScalarWhereWithAggregatesInput[]
    NOT?: AttendanceLogScalarWhereWithAggregatesInput | AttendanceLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AttendanceLog"> | string
    eventId?: StringWithAggregatesFilter<"AttendanceLog"> | string
    userId?: StringWithAggregatesFilter<"AttendanceLog"> | string
    markedBy?: StringWithAggregatesFilter<"AttendanceLog"> | string
    action?: EnumAttendanceActionWithAggregatesFilter<"AttendanceLog"> | $Enums.AttendanceAction
    previousStatus?: BoolNullableWithAggregatesFilter<"AttendanceLog"> | boolean | null
    newStatus?: BoolNullableWithAggregatesFilter<"AttendanceLog"> | boolean | null
    reason?: StringNullableWithAggregatesFilter<"AttendanceLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AttendanceLog"> | Date | string
  }

  export type EventQRCodeWhereInput = {
    AND?: EventQRCodeWhereInput | EventQRCodeWhereInput[]
    OR?: EventQRCodeWhereInput[]
    NOT?: EventQRCodeWhereInput | EventQRCodeWhereInput[]
    id?: StringFilter<"EventQRCode"> | string
    eventId?: StringFilter<"EventQRCode"> | string
    qrCodeData?: StringFilter<"EventQRCode"> | string
    validFrom?: DateTimeFilter<"EventQRCode"> | Date | string
    validUntil?: DateTimeFilter<"EventQRCode"> | Date | string
    maxScans?: IntNullableFilter<"EventQRCode"> | number | null
    currentScans?: IntFilter<"EventQRCode"> | number
    isActive?: BoolFilter<"EventQRCode"> | boolean
    createdBy?: StringFilter<"EventQRCode"> | string
    createdAt?: DateTimeFilter<"EventQRCode"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type EventQRCodeOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    qrCodeData?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    maxScans?: SortOrderInput | SortOrder
    currentScans?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type EventQRCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventQRCodeWhereInput | EventQRCodeWhereInput[]
    OR?: EventQRCodeWhereInput[]
    NOT?: EventQRCodeWhereInput | EventQRCodeWhereInput[]
    eventId?: StringFilter<"EventQRCode"> | string
    qrCodeData?: StringFilter<"EventQRCode"> | string
    validFrom?: DateTimeFilter<"EventQRCode"> | Date | string
    validUntil?: DateTimeFilter<"EventQRCode"> | Date | string
    maxScans?: IntNullableFilter<"EventQRCode"> | number | null
    currentScans?: IntFilter<"EventQRCode"> | number
    isActive?: BoolFilter<"EventQRCode"> | boolean
    createdBy?: StringFilter<"EventQRCode"> | string
    createdAt?: DateTimeFilter<"EventQRCode"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id">

  export type EventQRCodeOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    qrCodeData?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    maxScans?: SortOrderInput | SortOrder
    currentScans?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    _count?: EventQRCodeCountOrderByAggregateInput
    _avg?: EventQRCodeAvgOrderByAggregateInput
    _max?: EventQRCodeMaxOrderByAggregateInput
    _min?: EventQRCodeMinOrderByAggregateInput
    _sum?: EventQRCodeSumOrderByAggregateInput
  }

  export type EventQRCodeScalarWhereWithAggregatesInput = {
    AND?: EventQRCodeScalarWhereWithAggregatesInput | EventQRCodeScalarWhereWithAggregatesInput[]
    OR?: EventQRCodeScalarWhereWithAggregatesInput[]
    NOT?: EventQRCodeScalarWhereWithAggregatesInput | EventQRCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventQRCode"> | string
    eventId?: StringWithAggregatesFilter<"EventQRCode"> | string
    qrCodeData?: StringWithAggregatesFilter<"EventQRCode"> | string
    validFrom?: DateTimeWithAggregatesFilter<"EventQRCode"> | Date | string
    validUntil?: DateTimeWithAggregatesFilter<"EventQRCode"> | Date | string
    maxScans?: IntNullableWithAggregatesFilter<"EventQRCode"> | number | null
    currentScans?: IntWithAggregatesFilter<"EventQRCode"> | number
    isActive?: BoolWithAggregatesFilter<"EventQRCode"> | boolean
    createdBy?: StringWithAggregatesFilter<"EventQRCode"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventQRCode"> | Date | string
  }

  export type PointsHistoryWhereInput = {
    AND?: PointsHistoryWhereInput | PointsHistoryWhereInput[]
    OR?: PointsHistoryWhereInput[]
    NOT?: PointsHistoryWhereInput | PointsHistoryWhereInput[]
    id?: StringFilter<"PointsHistory"> | string
    userId?: StringFilter<"PointsHistory"> | string
    eventId?: StringNullableFilter<"PointsHistory"> | string | null
    pointsEarned?: IntFilter<"PointsHistory"> | number
    volunteerHoursEarned?: FloatFilter<"PointsHistory"> | number
    reason?: StringFilter<"PointsHistory"> | string
    createdAt?: DateTimeFilter<"PointsHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PointsHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PointsHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PointsHistoryWhereInput | PointsHistoryWhereInput[]
    OR?: PointsHistoryWhereInput[]
    NOT?: PointsHistoryWhereInput | PointsHistoryWhereInput[]
    userId?: StringFilter<"PointsHistory"> | string
    eventId?: StringNullableFilter<"PointsHistory"> | string | null
    pointsEarned?: IntFilter<"PointsHistory"> | number
    volunteerHoursEarned?: FloatFilter<"PointsHistory"> | number
    reason?: StringFilter<"PointsHistory"> | string
    createdAt?: DateTimeFilter<"PointsHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PointsHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: PointsHistoryCountOrderByAggregateInput
    _avg?: PointsHistoryAvgOrderByAggregateInput
    _max?: PointsHistoryMaxOrderByAggregateInput
    _min?: PointsHistoryMinOrderByAggregateInput
    _sum?: PointsHistorySumOrderByAggregateInput
  }

  export type PointsHistoryScalarWhereWithAggregatesInput = {
    AND?: PointsHistoryScalarWhereWithAggregatesInput | PointsHistoryScalarWhereWithAggregatesInput[]
    OR?: PointsHistoryScalarWhereWithAggregatesInput[]
    NOT?: PointsHistoryScalarWhereWithAggregatesInput | PointsHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PointsHistory"> | string
    userId?: StringWithAggregatesFilter<"PointsHistory"> | string
    eventId?: StringNullableWithAggregatesFilter<"PointsHistory"> | string | null
    pointsEarned?: IntWithAggregatesFilter<"PointsHistory"> | number
    volunteerHoursEarned?: FloatWithAggregatesFilter<"PointsHistory"> | number
    reason?: StringWithAggregatesFilter<"PointsHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PointsHistory"> | Date | string
  }

  export type EventFeedbackWhereInput = {
    AND?: EventFeedbackWhereInput | EventFeedbackWhereInput[]
    OR?: EventFeedbackWhereInput[]
    NOT?: EventFeedbackWhereInput | EventFeedbackWhereInput[]
    id?: StringFilter<"EventFeedback"> | string
    userId?: StringFilter<"EventFeedback"> | string
    eventId?: StringFilter<"EventFeedback"> | string
    rating?: IntFilter<"EventFeedback"> | number
    feedback?: StringNullableFilter<"EventFeedback"> | string | null
    anonymous?: BoolFilter<"EventFeedback"> | boolean
    createdAt?: DateTimeFilter<"EventFeedback"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrderInput | SortOrder
    anonymous?: SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EventFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId?: EventFeedbackUserIdEventIdCompoundUniqueInput
    AND?: EventFeedbackWhereInput | EventFeedbackWhereInput[]
    OR?: EventFeedbackWhereInput[]
    NOT?: EventFeedbackWhereInput | EventFeedbackWhereInput[]
    userId?: StringFilter<"EventFeedback"> | string
    eventId?: StringFilter<"EventFeedback"> | string
    rating?: IntFilter<"EventFeedback"> | number
    feedback?: StringNullableFilter<"EventFeedback"> | string | null
    anonymous?: BoolFilter<"EventFeedback"> | boolean
    createdAt?: DateTimeFilter<"EventFeedback"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_eventId">

  export type EventFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrderInput | SortOrder
    anonymous?: SortOrder
    createdAt?: SortOrder
    _count?: EventFeedbackCountOrderByAggregateInput
    _avg?: EventFeedbackAvgOrderByAggregateInput
    _max?: EventFeedbackMaxOrderByAggregateInput
    _min?: EventFeedbackMinOrderByAggregateInput
    _sum?: EventFeedbackSumOrderByAggregateInput
  }

  export type EventFeedbackScalarWhereWithAggregatesInput = {
    AND?: EventFeedbackScalarWhereWithAggregatesInput | EventFeedbackScalarWhereWithAggregatesInput[]
    OR?: EventFeedbackScalarWhereWithAggregatesInput[]
    NOT?: EventFeedbackScalarWhereWithAggregatesInput | EventFeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventFeedback"> | string
    userId?: StringWithAggregatesFilter<"EventFeedback"> | string
    eventId?: StringWithAggregatesFilter<"EventFeedback"> | string
    rating?: IntWithAggregatesFilter<"EventFeedback"> | number
    feedback?: StringNullableWithAggregatesFilter<"EventFeedback"> | string | null
    anonymous?: BoolWithAggregatesFilter<"EventFeedback"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EventFeedback"> | Date | string
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    clubId?: StringFilter<"ChatRoom"> | string
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    messages?: ChatMessageListRelationFilter
    club?: XOR<ClubRelationFilter, ClubWhereInput>
  }

  export type ChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    clubId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: ChatMessageOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    clubId?: StringFilter<"ChatRoom"> | string
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    messages?: ChatMessageListRelationFilter
    club?: XOR<ClubRelationFilter, ClubWhereInput>
  }, "id">

  export type ChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    clubId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatRoom"> | string
    clubId?: StringWithAggregatesFilter<"ChatRoom"> | string
    name?: StringWithAggregatesFilter<"ChatRoom"> | string
    description?: StringNullableWithAggregatesFilter<"ChatRoom"> | string | null
    isActive?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    chatRoomId?: StringFilter<"ChatMessage"> | string
    userId?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    fileUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    chatRoom?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    chatRoom?: ChatRoomOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    chatRoomId?: StringFilter<"ChatMessage"> | string
    userId?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    fileUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    chatRoom?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    chatRoomId?: StringWithAggregatesFilter<"ChatMessage"> | string
    userId?: StringWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    messageType?: StringWithAggregatesFilter<"ChatMessage"> | string
    fileUrl?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    name?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    criteria?: StringFilter<"Badge"> | string
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    userBadges?: UserBadgeListRelationFilter
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    userBadges?: UserBadgeOrderByRelationAggregateInput
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    criteria?: StringFilter<"Badge"> | string
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    userBadges?: UserBadgeListRelationFilter
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringWithAggregatesFilter<"Badge"> | string
    icon?: StringWithAggregatesFilter<"Badge"> | string
    criteria?: StringWithAggregatesFilter<"Badge"> | string
    isActive?: BoolWithAggregatesFilter<"Badge"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    eventId?: StringNullableFilter<"UserBadge"> | string | null
    badge?: XOR<BadgeRelationFilter, BadgeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    badge?: BadgeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_badgeId?: UserBadgeUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    eventId?: StringNullableFilter<"UserBadge"> | string | null
    badge?: XOR<BadgeRelationFilter, BadgeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_badgeId">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadge"> | string
    userId?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeId?: StringWithAggregatesFilter<"UserBadge"> | string
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
    eventId?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomCreateNestedManyWithoutClubInput
    creator: UserCreateNestedOneWithoutCreatedClubsInput
    events?: EventCreateNestedManyWithoutClubInput
    userClubs?: UserClubCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutClubInput
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUpdateManyWithoutClubNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedClubsNestedInput
    events?: EventUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutClubNestedInput
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClubCreateInput = {
    id?: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
    club: ClubCreateNestedOneWithoutUserClubsInput
    user: UserCreateNestedOneWithoutUserClubsInput
  }

  export type UserClubUncheckedCreateInput = {
    id?: string
    userId: string
    clubId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type UserClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutUserClubsNestedInput
    user?: UserUpdateOneRequiredWithoutUserClubsNestedInput
  }

  export type UserClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserClubCreateManyInput = {
    id?: string
    userId: string
    clubId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type UserClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventRegistrationCreateInput = {
    id?: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
    attendanceMarkedByUser?: UserCreateNestedOneWithoutMarkedAttendanceInput
    event: EventCreateNestedOneWithoutEventRegistrationsInput
    user: UserCreateNestedOneWithoutEventRegistrationsInput
  }

  export type EventRegistrationUncheckedCreateInput = {
    id?: string
    userId: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedByUser?: UserUpdateOneWithoutMarkedAttendanceNestedInput
    event?: EventUpdateOneRequiredWithoutEventRegistrationsNestedInput
    user?: UserUpdateOneRequiredWithoutEventRegistrationsNestedInput
  }

  export type EventRegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationCreateManyInput = {
    id?: string
    userId: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceLogCreateInput = {
    id?: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAttendanceLogsInput
    markedByUser: UserCreateNestedOneWithoutAttendanceLogsInput
    user: UserCreateNestedOneWithoutAttendanceLogsUserInput
  }

  export type AttendanceLogUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendanceLogsNestedInput
    markedByUser?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
    user?: UserUpdateOneRequiredWithoutAttendanceLogsUserNestedInput
  }

  export type AttendanceLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeCreateInput = {
    id?: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedQRCodesInput
    event: EventCreateNestedOneWithoutEventQRCodesInput
  }

  export type EventQRCodeUncheckedCreateInput = {
    id?: string
    eventId: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
  }

  export type EventQRCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedQRCodesNestedInput
    event?: EventUpdateOneRequiredWithoutEventQRCodesNestedInput
  }

  export type EventQRCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeCreateManyInput = {
    id?: string
    eventId: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
  }

  export type EventQRCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryCreateInput = {
    id?: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPointsHistoryInput
  }

  export type PointsHistoryUncheckedCreateInput = {
    id?: string
    userId: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
  }

  export type PointsHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPointsHistoryNestedInput
  }

  export type PointsHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryCreateManyInput = {
    id?: string
    userId: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
  }

  export type PointsHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackCreateInput = {
    id?: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutEventFeedbackInput
    user: UserCreateNestedOneWithoutEventFeedbackInput
  }

  export type EventFeedbackUncheckedCreateInput = {
    id?: string
    userId: string
    eventId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventFeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEventFeedbackNestedInput
    user?: UserUpdateOneRequiredWithoutEventFeedbackNestedInput
  }

  export type EventFeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackCreateManyInput = {
    id?: string
    userId: string
    eventId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventFeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageCreateNestedManyWithoutChatRoomInput
    club: ClubCreateNestedOneWithoutChatRoomsInput
  }

  export type ChatRoomUncheckedCreateInput = {
    id?: string
    clubId: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUpdateManyWithoutChatRoomNestedInput
    club?: ClubUpdateOneRequiredWithoutChatRoomsNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    id?: string
    clubId: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatRoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    chatRoomId: string
    userId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatRoomId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    chatRoomId: string
    userId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatRoomId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive?: boolean
    createdAt?: Date | string
    userBadges?: UserBadgeCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive?: boolean
    createdAt?: Date | string
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userBadges?: UserBadgeUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userBadges?: UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeCreateManyInput = {
    id?: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    id?: string
    earnedAt?: Date | string
    eventId?: string | null
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
    user: UserCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBadgeCreateManyInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type AttendanceLogListRelationFilter = {
    every?: AttendanceLogWhereInput
    some?: AttendanceLogWhereInput
    none?: AttendanceLogWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ClubListRelationFilter = {
    every?: ClubWhereInput
    some?: ClubWhereInput
    none?: ClubWhereInput
  }

  export type EventFeedbackListRelationFilter = {
    every?: EventFeedbackWhereInput
    some?: EventFeedbackWhereInput
    none?: EventFeedbackWhereInput
  }

  export type EventQRCodeListRelationFilter = {
    every?: EventQRCodeWhereInput
    some?: EventQRCodeWhereInput
    none?: EventQRCodeWhereInput
  }

  export type EventRegistrationListRelationFilter = {
    every?: EventRegistrationWhereInput
    some?: EventRegistrationWhereInput
    none?: EventRegistrationWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type PointsHistoryListRelationFilter = {
    every?: PointsHistoryWhereInput
    some?: PointsHistoryWhereInput
    none?: PointsHistoryWhereInput
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type UserClubListRelationFilter = {
    every?: UserClubWhereInput
    some?: UserClubWhereInput
    none?: UserClubWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AttendanceLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventQRCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventRegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PointsHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserClubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    studentId?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    yearOfStudy?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    profileImage?: SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    yearOfStudy?: SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    studentId?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    yearOfStudy?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    profileImage?: SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    studentId?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    yearOfStudy?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    profileImage?: SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    yearOfStudy?: SortOrder
    totalPoints?: SortOrder
    totalVolunteerHours?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumClubCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubCategory | EnumClubCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumClubCategoryFilter<$PrismaModel> | $Enums.ClubCategory
  }

  export type ChatRoomListRelationFilter = {
    every?: ChatRoomWhereInput
    some?: ChatRoomWhereInput
    none?: ChatRoomWhereInput
  }

  export type ChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    logoUrl?: SortOrder
    coverImageUrl?: SortOrder
    contactEmail?: SortOrder
    isActive?: SortOrder
    memberCount?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubAvgOrderByAggregateInput = {
    memberCount?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    logoUrl?: SortOrder
    coverImageUrl?: SortOrder
    contactEmail?: SortOrder
    isActive?: SortOrder
    memberCount?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    logoUrl?: SortOrder
    coverImageUrl?: SortOrder
    contactEmail?: SortOrder
    isActive?: SortOrder
    memberCount?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubSumOrderByAggregateInput = {
    memberCount?: SortOrder
  }

  export type EnumClubCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubCategory | EnumClubCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumClubCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ClubCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubCategoryFilter<$PrismaModel>
    _max?: NestedEnumClubCategoryFilter<$PrismaModel>
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ClubRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clubId?: SortOrder
    eventType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    maxParticipants?: SortOrder
    registrationDeadline?: SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
    imageUrl?: SortOrder
    tags?: SortOrder
    skillAreas?: SortOrder
    isPublished?: SortOrder
    requiresApproval?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    maxParticipants?: SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clubId?: SortOrder
    eventType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    maxParticipants?: SortOrder
    registrationDeadline?: SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
    imageUrl?: SortOrder
    isPublished?: SortOrder
    requiresApproval?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clubId?: SortOrder
    eventType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    maxParticipants?: SortOrder
    registrationDeadline?: SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
    imageUrl?: SortOrder
    isPublished?: SortOrder
    requiresApproval?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    maxParticipants?: SortOrder
    pointsReward?: SortOrder
    volunteerHours?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumClubMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubMemberRole | EnumClubMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClubMemberRoleFilter<$PrismaModel> | $Enums.ClubMemberRole
  }

  export type UserClubUserIdClubIdCompoundUniqueInput = {
    userId: string
    clubId: string
  }

  export type UserClubCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserClubMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserClubMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    isActive?: SortOrder
  }

  export type EnumClubMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubMemberRole | EnumClubMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClubMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.ClubMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumClubMemberRoleFilter<$PrismaModel>
  }

  export type EnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type EnumAttendanceMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel> | $Enums.AttendanceMethod | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type EventRegistrationUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type EventRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registrationDate?: SortOrder
    status?: SortOrder
    attended?: SortOrder
    attendanceMarkedBy?: SortOrder
    attendanceMarkedAt?: SortOrder
    attendanceMethod?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
    feedbackSubmitted?: SortOrder
    notes?: SortOrder
  }

  export type EventRegistrationAvgOrderByAggregateInput = {
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
  }

  export type EventRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registrationDate?: SortOrder
    status?: SortOrder
    attended?: SortOrder
    attendanceMarkedBy?: SortOrder
    attendanceMarkedAt?: SortOrder
    attendanceMethod?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
    feedbackSubmitted?: SortOrder
    notes?: SortOrder
  }

  export type EventRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registrationDate?: SortOrder
    status?: SortOrder
    attended?: SortOrder
    attendanceMarkedBy?: SortOrder
    attendanceMarkedAt?: SortOrder
    attendanceMethod?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
    feedbackSubmitted?: SortOrder
    notes?: SortOrder
  }

  export type EventRegistrationSumOrderByAggregateInput = {
    pointsAwarded?: SortOrder
    volunteerHoursAwarded?: SortOrder
  }

  export type EnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type EnumAttendanceMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAttendanceMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel>
  }

  export type EnumAttendanceActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceAction | EnumAttendanceActionFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceActionFilter<$PrismaModel> | $Enums.AttendanceAction
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AttendanceLogCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    markedBy?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type AttendanceLogMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    markedBy?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type AttendanceLogMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    markedBy?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAttendanceActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceAction | EnumAttendanceActionFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceActionWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceActionFilter<$PrismaModel>
    _max?: NestedEnumAttendanceActionFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EventQRCodeCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    qrCodeData?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    maxScans?: SortOrder
    currentScans?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventQRCodeAvgOrderByAggregateInput = {
    maxScans?: SortOrder
    currentScans?: SortOrder
  }

  export type EventQRCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    qrCodeData?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    maxScans?: SortOrder
    currentScans?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventQRCodeMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    qrCodeData?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    maxScans?: SortOrder
    currentScans?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventQRCodeSumOrderByAggregateInput = {
    maxScans?: SortOrder
    currentScans?: SortOrder
  }

  export type PointsHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type PointsHistoryAvgOrderByAggregateInput = {
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
  }

  export type PointsHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type PointsHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type PointsHistorySumOrderByAggregateInput = {
    pointsEarned?: SortOrder
    volunteerHoursEarned?: SortOrder
  }

  export type EventFeedbackUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type EventFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    anonymous?: SortOrder
    createdAt?: SortOrder
  }

  export type EventFeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EventFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    anonymous?: SortOrder
    createdAt?: SortOrder
  }

  export type EventFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    anonymous?: SortOrder
    createdAt?: SortOrder
  }

  export type EventFeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomRelationFilter = {
    is?: ChatRoomWhereInput
    isNot?: ChatRoomWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeRelationFilter = {
    is?: BadgeWhereInput
    isNot?: BadgeWhereInput
  }

  export type UserBadgeUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: string
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    eventId?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    eventId?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    eventId?: SortOrder
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type AttendanceLogCreateNestedManyWithoutMarkedByUserInput = {
    create?: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput> | AttendanceLogCreateWithoutMarkedByUserInput[] | AttendanceLogUncheckedCreateWithoutMarkedByUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutMarkedByUserInput | AttendanceLogCreateOrConnectWithoutMarkedByUserInput[]
    createMany?: AttendanceLogCreateManyMarkedByUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type AttendanceLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ClubCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput> | ClubCreateWithoutCreatorInput[] | ClubUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutCreatorInput | ClubCreateOrConnectWithoutCreatorInput[]
    createMany?: ClubCreateManyCreatorInputEnvelope
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
  }

  export type EventFeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput> | EventFeedbackCreateWithoutUserInput[] | EventFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutUserInput | EventFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: EventFeedbackCreateManyUserInputEnvelope
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
  }

  export type EventQRCodeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput> | EventQRCodeCreateWithoutCreatorInput[] | EventQRCodeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutCreatorInput | EventQRCodeCreateOrConnectWithoutCreatorInput[]
    createMany?: EventQRCodeCreateManyCreatorInputEnvelope
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
  }

  export type EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput = {
    create?: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput> | EventRegistrationCreateWithoutAttendanceMarkedByUserInput[] | EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput | EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput[]
    createMany?: EventRegistrationCreateManyAttendanceMarkedByUserInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type EventRegistrationCreateNestedManyWithoutUserInput = {
    create?: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput> | EventRegistrationCreateWithoutUserInput[] | EventRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutUserInput | EventRegistrationCreateOrConnectWithoutUserInput[]
    createMany?: EventRegistrationCreateManyUserInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PointsHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput> | PointsHistoryCreateWithoutUserInput[] | PointsHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PointsHistoryCreateOrConnectWithoutUserInput | PointsHistoryCreateOrConnectWithoutUserInput[]
    createMany?: PointsHistoryCreateManyUserInputEnvelope
    connect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserClubCreateNestedManyWithoutUserInput = {
    create?: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput> | UserClubCreateWithoutUserInput[] | UserClubUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutUserInput | UserClubCreateOrConnectWithoutUserInput[]
    createMany?: UserClubCreateManyUserInputEnvelope
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput = {
    create?: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput> | AttendanceLogCreateWithoutMarkedByUserInput[] | AttendanceLogUncheckedCreateWithoutMarkedByUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutMarkedByUserInput | AttendanceLogCreateOrConnectWithoutMarkedByUserInput[]
    createMany?: AttendanceLogCreateManyMarkedByUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ClubUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput> | ClubCreateWithoutCreatorInput[] | ClubUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutCreatorInput | ClubCreateOrConnectWithoutCreatorInput[]
    createMany?: ClubCreateManyCreatorInputEnvelope
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
  }

  export type EventFeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput> | EventFeedbackCreateWithoutUserInput[] | EventFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutUserInput | EventFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: EventFeedbackCreateManyUserInputEnvelope
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
  }

  export type EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput> | EventQRCodeCreateWithoutCreatorInput[] | EventQRCodeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutCreatorInput | EventQRCodeCreateOrConnectWithoutCreatorInput[]
    createMany?: EventQRCodeCreateManyCreatorInputEnvelope
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
  }

  export type EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput = {
    create?: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput> | EventRegistrationCreateWithoutAttendanceMarkedByUserInput[] | EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput | EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput[]
    createMany?: EventRegistrationCreateManyAttendanceMarkedByUserInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type EventRegistrationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput> | EventRegistrationCreateWithoutUserInput[] | EventRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutUserInput | EventRegistrationCreateOrConnectWithoutUserInput[]
    createMany?: EventRegistrationCreateManyUserInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PointsHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput> | PointsHistoryCreateWithoutUserInput[] | PointsHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PointsHistoryCreateOrConnectWithoutUserInput | PointsHistoryCreateOrConnectWithoutUserInput[]
    createMany?: PointsHistoryCreateManyUserInputEnvelope
    connect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserClubUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput> | UserClubCreateWithoutUserInput[] | UserClubUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutUserInput | UserClubCreateOrConnectWithoutUserInput[]
    createMany?: UserClubCreateManyUserInputEnvelope
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AttendanceLogUpdateManyWithoutMarkedByUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput> | AttendanceLogCreateWithoutMarkedByUserInput[] | AttendanceLogUncheckedCreateWithoutMarkedByUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutMarkedByUserInput | AttendanceLogCreateOrConnectWithoutMarkedByUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutMarkedByUserInput | AttendanceLogUpsertWithWhereUniqueWithoutMarkedByUserInput[]
    createMany?: AttendanceLogCreateManyMarkedByUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutMarkedByUserInput | AttendanceLogUpdateWithWhereUniqueWithoutMarkedByUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutMarkedByUserInput | AttendanceLogUpdateManyWithWhereWithoutMarkedByUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type AttendanceLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutUserInput | AttendanceLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutUserInput | AttendanceLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutUserInput | AttendanceLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ClubUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput> | ClubCreateWithoutCreatorInput[] | ClubUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutCreatorInput | ClubCreateOrConnectWithoutCreatorInput[]
    upsert?: ClubUpsertWithWhereUniqueWithoutCreatorInput | ClubUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClubCreateManyCreatorInputEnvelope
    set?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    disconnect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    delete?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    update?: ClubUpdateWithWhereUniqueWithoutCreatorInput | ClubUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClubUpdateManyWithWhereWithoutCreatorInput | ClubUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClubScalarWhereInput | ClubScalarWhereInput[]
  }

  export type EventFeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput> | EventFeedbackCreateWithoutUserInput[] | EventFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutUserInput | EventFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: EventFeedbackUpsertWithWhereUniqueWithoutUserInput | EventFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventFeedbackCreateManyUserInputEnvelope
    set?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    disconnect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    delete?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    update?: EventFeedbackUpdateWithWhereUniqueWithoutUserInput | EventFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventFeedbackUpdateManyWithWhereWithoutUserInput | EventFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
  }

  export type EventQRCodeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput> | EventQRCodeCreateWithoutCreatorInput[] | EventQRCodeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutCreatorInput | EventQRCodeCreateOrConnectWithoutCreatorInput[]
    upsert?: EventQRCodeUpsertWithWhereUniqueWithoutCreatorInput | EventQRCodeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventQRCodeCreateManyCreatorInputEnvelope
    set?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    disconnect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    delete?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    update?: EventQRCodeUpdateWithWhereUniqueWithoutCreatorInput | EventQRCodeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventQRCodeUpdateManyWithWhereWithoutCreatorInput | EventQRCodeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
  }

  export type EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput> | EventRegistrationCreateWithoutAttendanceMarkedByUserInput[] | EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput | EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutAttendanceMarkedByUserInput | EventRegistrationUpsertWithWhereUniqueWithoutAttendanceMarkedByUserInput[]
    createMany?: EventRegistrationCreateManyAttendanceMarkedByUserInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutAttendanceMarkedByUserInput | EventRegistrationUpdateWithWhereUniqueWithoutAttendanceMarkedByUserInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutAttendanceMarkedByUserInput | EventRegistrationUpdateManyWithWhereWithoutAttendanceMarkedByUserInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type EventRegistrationUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput> | EventRegistrationCreateWithoutUserInput[] | EventRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutUserInput | EventRegistrationCreateOrConnectWithoutUserInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutUserInput | EventRegistrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventRegistrationCreateManyUserInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutUserInput | EventRegistrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutUserInput | EventRegistrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type EventUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PointsHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput> | PointsHistoryCreateWithoutUserInput[] | PointsHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PointsHistoryCreateOrConnectWithoutUserInput | PointsHistoryCreateOrConnectWithoutUserInput[]
    upsert?: PointsHistoryUpsertWithWhereUniqueWithoutUserInput | PointsHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PointsHistoryCreateManyUserInputEnvelope
    set?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    disconnect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    delete?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    connect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    update?: PointsHistoryUpdateWithWhereUniqueWithoutUserInput | PointsHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PointsHistoryUpdateManyWithWhereWithoutUserInput | PointsHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PointsHistoryScalarWhereInput | PointsHistoryScalarWhereInput[]
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserClubUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput> | UserClubCreateWithoutUserInput[] | UserClubUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutUserInput | UserClubCreateOrConnectWithoutUserInput[]
    upsert?: UserClubUpsertWithWhereUniqueWithoutUserInput | UserClubUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserClubCreateManyUserInputEnvelope
    set?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    disconnect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    delete?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    update?: UserClubUpdateWithWhereUniqueWithoutUserInput | UserClubUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserClubUpdateManyWithWhereWithoutUserInput | UserClubUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput> | AttendanceLogCreateWithoutMarkedByUserInput[] | AttendanceLogUncheckedCreateWithoutMarkedByUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutMarkedByUserInput | AttendanceLogCreateOrConnectWithoutMarkedByUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutMarkedByUserInput | AttendanceLogUpsertWithWhereUniqueWithoutMarkedByUserInput[]
    createMany?: AttendanceLogCreateManyMarkedByUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutMarkedByUserInput | AttendanceLogUpdateWithWhereUniqueWithoutMarkedByUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutMarkedByUserInput | AttendanceLogUpdateManyWithWhereWithoutMarkedByUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type AttendanceLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput> | AttendanceLogCreateWithoutUserInput[] | AttendanceLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutUserInput | AttendanceLogCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutUserInput | AttendanceLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceLogCreateManyUserInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutUserInput | AttendanceLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutUserInput | AttendanceLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ClubUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput> | ClubCreateWithoutCreatorInput[] | ClubUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutCreatorInput | ClubCreateOrConnectWithoutCreatorInput[]
    upsert?: ClubUpsertWithWhereUniqueWithoutCreatorInput | ClubUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClubCreateManyCreatorInputEnvelope
    set?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    disconnect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    delete?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    update?: ClubUpdateWithWhereUniqueWithoutCreatorInput | ClubUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClubUpdateManyWithWhereWithoutCreatorInput | ClubUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClubScalarWhereInput | ClubScalarWhereInput[]
  }

  export type EventFeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput> | EventFeedbackCreateWithoutUserInput[] | EventFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutUserInput | EventFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: EventFeedbackUpsertWithWhereUniqueWithoutUserInput | EventFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventFeedbackCreateManyUserInputEnvelope
    set?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    disconnect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    delete?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    update?: EventFeedbackUpdateWithWhereUniqueWithoutUserInput | EventFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventFeedbackUpdateManyWithWhereWithoutUserInput | EventFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
  }

  export type EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput> | EventQRCodeCreateWithoutCreatorInput[] | EventQRCodeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutCreatorInput | EventQRCodeCreateOrConnectWithoutCreatorInput[]
    upsert?: EventQRCodeUpsertWithWhereUniqueWithoutCreatorInput | EventQRCodeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventQRCodeCreateManyCreatorInputEnvelope
    set?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    disconnect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    delete?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    update?: EventQRCodeUpdateWithWhereUniqueWithoutCreatorInput | EventQRCodeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventQRCodeUpdateManyWithWhereWithoutCreatorInput | EventQRCodeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
  }

  export type EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput> | EventRegistrationCreateWithoutAttendanceMarkedByUserInput[] | EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput | EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutAttendanceMarkedByUserInput | EventRegistrationUpsertWithWhereUniqueWithoutAttendanceMarkedByUserInput[]
    createMany?: EventRegistrationCreateManyAttendanceMarkedByUserInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutAttendanceMarkedByUserInput | EventRegistrationUpdateWithWhereUniqueWithoutAttendanceMarkedByUserInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutAttendanceMarkedByUserInput | EventRegistrationUpdateManyWithWhereWithoutAttendanceMarkedByUserInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type EventRegistrationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput> | EventRegistrationCreateWithoutUserInput[] | EventRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutUserInput | EventRegistrationCreateOrConnectWithoutUserInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutUserInput | EventRegistrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventRegistrationCreateManyUserInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutUserInput | EventRegistrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutUserInput | EventRegistrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PointsHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput> | PointsHistoryCreateWithoutUserInput[] | PointsHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PointsHistoryCreateOrConnectWithoutUserInput | PointsHistoryCreateOrConnectWithoutUserInput[]
    upsert?: PointsHistoryUpsertWithWhereUniqueWithoutUserInput | PointsHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PointsHistoryCreateManyUserInputEnvelope
    set?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    disconnect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    delete?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    connect?: PointsHistoryWhereUniqueInput | PointsHistoryWhereUniqueInput[]
    update?: PointsHistoryUpdateWithWhereUniqueWithoutUserInput | PointsHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PointsHistoryUpdateManyWithWhereWithoutUserInput | PointsHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PointsHistoryScalarWhereInput | PointsHistoryScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserClubUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput> | UserClubCreateWithoutUserInput[] | UserClubUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutUserInput | UserClubCreateOrConnectWithoutUserInput[]
    upsert?: UserClubUpsertWithWhereUniqueWithoutUserInput | UserClubUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserClubCreateManyUserInputEnvelope
    set?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    disconnect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    delete?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    update?: UserClubUpdateWithWhereUniqueWithoutUserInput | UserClubUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserClubUpdateManyWithWhereWithoutUserInput | UserClubUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type ChatRoomCreateNestedManyWithoutClubInput = {
    create?: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput> | ChatRoomCreateWithoutClubInput[] | ChatRoomUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutClubInput | ChatRoomCreateOrConnectWithoutClubInput[]
    createMany?: ChatRoomCreateManyClubInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedClubsInput = {
    create?: XOR<UserCreateWithoutCreatedClubsInput, UserUncheckedCreateWithoutCreatedClubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClubsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutClubInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserClubCreateNestedManyWithoutClubInput = {
    create?: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput> | UserClubCreateWithoutClubInput[] | UserClubUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutClubInput | UserClubCreateOrConnectWithoutClubInput[]
    createMany?: UserClubCreateManyClubInputEnvelope
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput> | ChatRoomCreateWithoutClubInput[] | ChatRoomUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutClubInput | ChatRoomCreateOrConnectWithoutClubInput[]
    createMany?: ChatRoomCreateManyClubInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserClubUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput> | UserClubCreateWithoutClubInput[] | UserClubUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutClubInput | UserClubCreateOrConnectWithoutClubInput[]
    createMany?: UserClubCreateManyClubInputEnvelope
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
  }

  export type EnumClubCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ClubCategory
  }

  export type ChatRoomUpdateManyWithoutClubNestedInput = {
    create?: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput> | ChatRoomCreateWithoutClubInput[] | ChatRoomUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutClubInput | ChatRoomCreateOrConnectWithoutClubInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutClubInput | ChatRoomUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ChatRoomCreateManyClubInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutClubInput | ChatRoomUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutClubInput | ChatRoomUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedClubsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedClubsInput, UserUncheckedCreateWithoutCreatedClubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClubsInput
    upsert?: UserUpsertWithoutCreatedClubsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedClubsInput, UserUpdateWithoutCreatedClubsInput>, UserUncheckedUpdateWithoutCreatedClubsInput>
  }

  export type EventUpdateManyWithoutClubNestedInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClubInput | EventUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClubInput | EventUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClubInput | EventUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserClubUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput> | UserClubCreateWithoutClubInput[] | UserClubUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutClubInput | UserClubCreateOrConnectWithoutClubInput[]
    upsert?: UserClubUpsertWithWhereUniqueWithoutClubInput | UserClubUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserClubCreateManyClubInputEnvelope
    set?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    disconnect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    delete?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    update?: UserClubUpdateWithWhereUniqueWithoutClubInput | UserClubUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserClubUpdateManyWithWhereWithoutClubInput | UserClubUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
  }

  export type ChatRoomUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput> | ChatRoomCreateWithoutClubInput[] | ChatRoomUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutClubInput | ChatRoomCreateOrConnectWithoutClubInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutClubInput | ChatRoomUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ChatRoomCreateManyClubInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutClubInput | ChatRoomUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutClubInput | ChatRoomUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClubInput | EventUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClubInput | EventUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClubInput | EventUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserClubUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput> | UserClubCreateWithoutClubInput[] | UserClubUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserClubCreateOrConnectWithoutClubInput | UserClubCreateOrConnectWithoutClubInput[]
    upsert?: UserClubUpsertWithWhereUniqueWithoutClubInput | UserClubUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserClubCreateManyClubInputEnvelope
    set?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    disconnect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    delete?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    connect?: UserClubWhereUniqueInput | UserClubWhereUniqueInput[]
    update?: UserClubUpdateWithWhereUniqueWithoutClubInput | UserClubUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserClubUpdateManyWithWhereWithoutClubInput | UserClubUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
  }

  export type EventCreatetagsInput = {
    set: string[]
  }

  export type EventCreateskillAreasInput = {
    set: string[]
  }

  export type AttendanceLogCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput> | AttendanceLogCreateWithoutEventInput[] | AttendanceLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutEventInput | AttendanceLogCreateOrConnectWithoutEventInput[]
    createMany?: AttendanceLogCreateManyEventInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type EventFeedbackCreateNestedManyWithoutEventInput = {
    create?: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput> | EventFeedbackCreateWithoutEventInput[] | EventFeedbackUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutEventInput | EventFeedbackCreateOrConnectWithoutEventInput[]
    createMany?: EventFeedbackCreateManyEventInputEnvelope
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
  }

  export type EventQRCodeCreateNestedManyWithoutEventInput = {
    create?: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput> | EventQRCodeCreateWithoutEventInput[] | EventQRCodeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutEventInput | EventQRCodeCreateOrConnectWithoutEventInput[]
    createMany?: EventQRCodeCreateManyEventInputEnvelope
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
  }

  export type EventRegistrationCreateNestedManyWithoutEventInput = {
    create?: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput> | EventRegistrationCreateWithoutEventInput[] | EventRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutEventInput | EventRegistrationCreateOrConnectWithoutEventInput[]
    createMany?: EventRegistrationCreateManyEventInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutEventsInput = {
    create?: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutEventsInput
    connect?: ClubWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedEventsInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type AttendanceLogUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput> | AttendanceLogCreateWithoutEventInput[] | AttendanceLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutEventInput | AttendanceLogCreateOrConnectWithoutEventInput[]
    createMany?: AttendanceLogCreateManyEventInputEnvelope
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
  }

  export type EventFeedbackUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput> | EventFeedbackCreateWithoutEventInput[] | EventFeedbackUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutEventInput | EventFeedbackCreateOrConnectWithoutEventInput[]
    createMany?: EventFeedbackCreateManyEventInputEnvelope
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
  }

  export type EventQRCodeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput> | EventQRCodeCreateWithoutEventInput[] | EventQRCodeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutEventInput | EventQRCodeCreateOrConnectWithoutEventInput[]
    createMany?: EventQRCodeCreateManyEventInputEnvelope
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
  }

  export type EventRegistrationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput> | EventRegistrationCreateWithoutEventInput[] | EventRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutEventInput | EventRegistrationCreateOrConnectWithoutEventInput[]
    createMany?: EventRegistrationCreateManyEventInputEnvelope
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EventUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EventUpdateskillAreasInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AttendanceLogUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput> | AttendanceLogCreateWithoutEventInput[] | AttendanceLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutEventInput | AttendanceLogCreateOrConnectWithoutEventInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutEventInput | AttendanceLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendanceLogCreateManyEventInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutEventInput | AttendanceLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutEventInput | AttendanceLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type EventFeedbackUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput> | EventFeedbackCreateWithoutEventInput[] | EventFeedbackUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutEventInput | EventFeedbackCreateOrConnectWithoutEventInput[]
    upsert?: EventFeedbackUpsertWithWhereUniqueWithoutEventInput | EventFeedbackUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventFeedbackCreateManyEventInputEnvelope
    set?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    disconnect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    delete?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    update?: EventFeedbackUpdateWithWhereUniqueWithoutEventInput | EventFeedbackUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventFeedbackUpdateManyWithWhereWithoutEventInput | EventFeedbackUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
  }

  export type EventQRCodeUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput> | EventQRCodeCreateWithoutEventInput[] | EventQRCodeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutEventInput | EventQRCodeCreateOrConnectWithoutEventInput[]
    upsert?: EventQRCodeUpsertWithWhereUniqueWithoutEventInput | EventQRCodeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventQRCodeCreateManyEventInputEnvelope
    set?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    disconnect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    delete?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    update?: EventQRCodeUpdateWithWhereUniqueWithoutEventInput | EventQRCodeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventQRCodeUpdateManyWithWhereWithoutEventInput | EventQRCodeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
  }

  export type EventRegistrationUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput> | EventRegistrationCreateWithoutEventInput[] | EventRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutEventInput | EventRegistrationCreateOrConnectWithoutEventInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutEventInput | EventRegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventRegistrationCreateManyEventInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutEventInput | EventRegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutEventInput | EventRegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutEventsInput
    upsert?: ClubUpsertWithoutEventsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutEventsInput, ClubUpdateWithoutEventsInput>, ClubUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedEventsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    upsert?: UserUpsertWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEventsInput, UserUpdateWithoutCreatedEventsInput>, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type AttendanceLogUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput> | AttendanceLogCreateWithoutEventInput[] | AttendanceLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceLogCreateOrConnectWithoutEventInput | AttendanceLogCreateOrConnectWithoutEventInput[]
    upsert?: AttendanceLogUpsertWithWhereUniqueWithoutEventInput | AttendanceLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendanceLogCreateManyEventInputEnvelope
    set?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    disconnect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    delete?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    connect?: AttendanceLogWhereUniqueInput | AttendanceLogWhereUniqueInput[]
    update?: AttendanceLogUpdateWithWhereUniqueWithoutEventInput | AttendanceLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendanceLogUpdateManyWithWhereWithoutEventInput | AttendanceLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
  }

  export type EventFeedbackUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput> | EventFeedbackCreateWithoutEventInput[] | EventFeedbackUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventFeedbackCreateOrConnectWithoutEventInput | EventFeedbackCreateOrConnectWithoutEventInput[]
    upsert?: EventFeedbackUpsertWithWhereUniqueWithoutEventInput | EventFeedbackUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventFeedbackCreateManyEventInputEnvelope
    set?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    disconnect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    delete?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    connect?: EventFeedbackWhereUniqueInput | EventFeedbackWhereUniqueInput[]
    update?: EventFeedbackUpdateWithWhereUniqueWithoutEventInput | EventFeedbackUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventFeedbackUpdateManyWithWhereWithoutEventInput | EventFeedbackUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
  }

  export type EventQRCodeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput> | EventQRCodeCreateWithoutEventInput[] | EventQRCodeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventQRCodeCreateOrConnectWithoutEventInput | EventQRCodeCreateOrConnectWithoutEventInput[]
    upsert?: EventQRCodeUpsertWithWhereUniqueWithoutEventInput | EventQRCodeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventQRCodeCreateManyEventInputEnvelope
    set?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    disconnect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    delete?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    connect?: EventQRCodeWhereUniqueInput | EventQRCodeWhereUniqueInput[]
    update?: EventQRCodeUpdateWithWhereUniqueWithoutEventInput | EventQRCodeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventQRCodeUpdateManyWithWhereWithoutEventInput | EventQRCodeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
  }

  export type EventRegistrationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput> | EventRegistrationCreateWithoutEventInput[] | EventRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventRegistrationCreateOrConnectWithoutEventInput | EventRegistrationCreateOrConnectWithoutEventInput[]
    upsert?: EventRegistrationUpsertWithWhereUniqueWithoutEventInput | EventRegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventRegistrationCreateManyEventInputEnvelope
    set?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    disconnect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    delete?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    connect?: EventRegistrationWhereUniqueInput | EventRegistrationWhereUniqueInput[]
    update?: EventRegistrationUpdateWithWhereUniqueWithoutEventInput | EventRegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventRegistrationUpdateManyWithWhereWithoutEventInput | EventRegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutUserClubsInput = {
    create?: XOR<ClubCreateWithoutUserClubsInput, ClubUncheckedCreateWithoutUserClubsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUserClubsInput
    connect?: ClubWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserClubsInput = {
    create?: XOR<UserCreateWithoutUserClubsInput, UserUncheckedCreateWithoutUserClubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserClubsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumClubMemberRoleFieldUpdateOperationsInput = {
    set?: $Enums.ClubMemberRole
  }

  export type ClubUpdateOneRequiredWithoutUserClubsNestedInput = {
    create?: XOR<ClubCreateWithoutUserClubsInput, ClubUncheckedCreateWithoutUserClubsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUserClubsInput
    upsert?: ClubUpsertWithoutUserClubsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutUserClubsInput, ClubUpdateWithoutUserClubsInput>, ClubUncheckedUpdateWithoutUserClubsInput>
  }

  export type UserUpdateOneRequiredWithoutUserClubsNestedInput = {
    create?: XOR<UserCreateWithoutUserClubsInput, UserUncheckedCreateWithoutUserClubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserClubsInput
    upsert?: UserUpsertWithoutUserClubsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserClubsInput, UserUpdateWithoutUserClubsInput>, UserUncheckedUpdateWithoutUserClubsInput>
  }

  export type UserCreateNestedOneWithoutMarkedAttendanceInput = {
    create?: XOR<UserCreateWithoutMarkedAttendanceInput, UserUncheckedCreateWithoutMarkedAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarkedAttendanceInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutEventRegistrationsInput = {
    create?: XOR<EventCreateWithoutEventRegistrationsInput, EventUncheckedCreateWithoutEventRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventRegistrationsInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventRegistrationsInput = {
    create?: XOR<UserCreateWithoutEventRegistrationsInput, UserUncheckedCreateWithoutEventRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventRegistrationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRegistrationStatusFieldUpdateOperationsInput = {
    set?: $Enums.RegistrationStatus
  }

  export type NullableEnumAttendanceMethodFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceMethod | null
  }

  export type UserUpdateOneWithoutMarkedAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutMarkedAttendanceInput, UserUncheckedCreateWithoutMarkedAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarkedAttendanceInput
    upsert?: UserUpsertWithoutMarkedAttendanceInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMarkedAttendanceInput, UserUpdateWithoutMarkedAttendanceInput>, UserUncheckedUpdateWithoutMarkedAttendanceInput>
  }

  export type EventUpdateOneRequiredWithoutEventRegistrationsNestedInput = {
    create?: XOR<EventCreateWithoutEventRegistrationsInput, EventUncheckedCreateWithoutEventRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventRegistrationsInput
    upsert?: EventUpsertWithoutEventRegistrationsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventRegistrationsInput, EventUpdateWithoutEventRegistrationsInput>, EventUncheckedUpdateWithoutEventRegistrationsInput>
  }

  export type UserUpdateOneRequiredWithoutEventRegistrationsNestedInput = {
    create?: XOR<UserCreateWithoutEventRegistrationsInput, UserUncheckedCreateWithoutEventRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventRegistrationsInput
    upsert?: UserUpsertWithoutEventRegistrationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventRegistrationsInput, UserUpdateWithoutEventRegistrationsInput>, UserUncheckedUpdateWithoutEventRegistrationsInput>
  }

  export type EventCreateNestedOneWithoutAttendanceLogsInput = {
    create?: XOR<EventCreateWithoutAttendanceLogsInput, EventUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendanceLogsInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttendanceLogsInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttendanceLogsUserInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsUserInput, UserUncheckedCreateWithoutAttendanceLogsUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsUserInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAttendanceActionFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceAction
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EventUpdateOneRequiredWithoutAttendanceLogsNestedInput = {
    create?: XOR<EventCreateWithoutAttendanceLogsInput, EventUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendanceLogsInput
    upsert?: EventUpsertWithoutAttendanceLogsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendanceLogsInput, EventUpdateWithoutAttendanceLogsInput>, EventUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type UserUpdateOneRequiredWithoutAttendanceLogsNestedInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsInput
    upsert?: UserUpsertWithoutAttendanceLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendanceLogsInput, UserUpdateWithoutAttendanceLogsInput>, UserUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type UserUpdateOneRequiredWithoutAttendanceLogsUserNestedInput = {
    create?: XOR<UserCreateWithoutAttendanceLogsUserInput, UserUncheckedCreateWithoutAttendanceLogsUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceLogsUserInput
    upsert?: UserUpsertWithoutAttendanceLogsUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendanceLogsUserInput, UserUpdateWithoutAttendanceLogsUserInput>, UserUncheckedUpdateWithoutAttendanceLogsUserInput>
  }

  export type UserCreateNestedOneWithoutCreatedQRCodesInput = {
    create?: XOR<UserCreateWithoutCreatedQRCodesInput, UserUncheckedCreateWithoutCreatedQRCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQRCodesInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutEventQRCodesInput = {
    create?: XOR<EventCreateWithoutEventQRCodesInput, EventUncheckedCreateWithoutEventQRCodesInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventQRCodesInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreatedQRCodesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedQRCodesInput, UserUncheckedCreateWithoutCreatedQRCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQRCodesInput
    upsert?: UserUpsertWithoutCreatedQRCodesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedQRCodesInput, UserUpdateWithoutCreatedQRCodesInput>, UserUncheckedUpdateWithoutCreatedQRCodesInput>
  }

  export type EventUpdateOneRequiredWithoutEventQRCodesNestedInput = {
    create?: XOR<EventCreateWithoutEventQRCodesInput, EventUncheckedCreateWithoutEventQRCodesInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventQRCodesInput
    upsert?: EventUpsertWithoutEventQRCodesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventQRCodesInput, EventUpdateWithoutEventQRCodesInput>, EventUncheckedUpdateWithoutEventQRCodesInput>
  }

  export type UserCreateNestedOneWithoutPointsHistoryInput = {
    create?: XOR<UserCreateWithoutPointsHistoryInput, UserUncheckedCreateWithoutPointsHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutPointsHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPointsHistoryNestedInput = {
    create?: XOR<UserCreateWithoutPointsHistoryInput, UserUncheckedCreateWithoutPointsHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutPointsHistoryInput
    upsert?: UserUpsertWithoutPointsHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPointsHistoryInput, UserUpdateWithoutPointsHistoryInput>, UserUncheckedUpdateWithoutPointsHistoryInput>
  }

  export type EventCreateNestedOneWithoutEventFeedbackInput = {
    create?: XOR<EventCreateWithoutEventFeedbackInput, EventUncheckedCreateWithoutEventFeedbackInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventFeedbackInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventFeedbackInput = {
    create?: XOR<UserCreateWithoutEventFeedbackInput, UserUncheckedCreateWithoutEventFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutEventFeedbackNestedInput = {
    create?: XOR<EventCreateWithoutEventFeedbackInput, EventUncheckedCreateWithoutEventFeedbackInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventFeedbackInput
    upsert?: EventUpsertWithoutEventFeedbackInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventFeedbackInput, EventUpdateWithoutEventFeedbackInput>, EventUncheckedUpdateWithoutEventFeedbackInput>
  }

  export type UserUpdateOneRequiredWithoutEventFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutEventFeedbackInput, UserUncheckedCreateWithoutEventFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventFeedbackInput
    upsert?: UserUpsertWithoutEventFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventFeedbackInput, UserUpdateWithoutEventFeedbackInput>, UserUncheckedUpdateWithoutEventFeedbackInput>
  }

  export type ChatMessageCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput> | ChatMessageCreateWithoutChatRoomInput[] | ChatMessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatRoomInput | ChatMessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: ChatMessageCreateManyChatRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutChatRoomsInput = {
    create?: XOR<ClubCreateWithoutChatRoomsInput, ClubUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutChatRoomsInput
    connect?: ClubWhereUniqueInput
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput> | ChatMessageCreateWithoutChatRoomInput[] | ChatMessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatRoomInput | ChatMessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: ChatMessageCreateManyChatRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput> | ChatMessageCreateWithoutChatRoomInput[] | ChatMessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatRoomInput | ChatMessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatRoomInput | ChatMessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ChatMessageCreateManyChatRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatRoomInput | ChatMessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatRoomInput | ChatMessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutChatRoomsNestedInput = {
    create?: XOR<ClubCreateWithoutChatRoomsInput, ClubUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutChatRoomsInput
    upsert?: ClubUpsertWithoutChatRoomsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutChatRoomsInput, ClubUpdateWithoutChatRoomsInput>, ClubUncheckedUpdateWithoutChatRoomsInput>
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput> | ChatMessageCreateWithoutChatRoomInput[] | ChatMessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatRoomInput | ChatMessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatRoomInput | ChatMessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ChatMessageCreateManyChatRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatRoomInput | ChatMessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatRoomInput | ChatMessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserBadgeCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type BadgeCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type BadgeUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    upsert?: BadgeUpsertWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
    update?: XOR<XOR<BadgeUpdateToOneWithWhereWithoutUserBadgesInput, BadgeUpdateWithoutUserBadgesInput>, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    upsert?: UserUpsertWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserBadgesInput, UserUpdateWithoutUserBadgesInput>, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumClubCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubCategory | EnumClubCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumClubCategoryFilter<$PrismaModel> | $Enums.ClubCategory
  }

  export type NestedEnumClubCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubCategory | EnumClubCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubCategory[] | ListEnumClubCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumClubCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ClubCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubCategoryFilter<$PrismaModel>
    _max?: NestedEnumClubCategoryFilter<$PrismaModel>
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumClubMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubMemberRole | EnumClubMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClubMemberRoleFilter<$PrismaModel> | $Enums.ClubMemberRole
  }

  export type NestedEnumClubMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubMemberRole | EnumClubMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubMemberRole[] | ListEnumClubMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClubMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.ClubMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumClubMemberRoleFilter<$PrismaModel>
  }

  export type NestedEnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type NestedEnumAttendanceMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel> | $Enums.AttendanceMethod | null
  }

  export type NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceMethod | EnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AttendanceMethod[] | ListEnumAttendanceMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAttendanceMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumAttendanceMethodNullableFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceAction | EnumAttendanceActionFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceActionFilter<$PrismaModel> | $Enums.AttendanceAction
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumAttendanceActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceAction | EnumAttendanceActionFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceAction[] | ListEnumAttendanceActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceActionWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceActionFilter<$PrismaModel>
    _max?: NestedEnumAttendanceActionFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AttendanceLogCreateWithoutMarkedByUserInput = {
    id?: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAttendanceLogsInput
    user: UserCreateNestedOneWithoutAttendanceLogsUserInput
  }

  export type AttendanceLogUncheckedCreateWithoutMarkedByUserInput = {
    id?: string
    eventId: string
    userId: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogCreateOrConnectWithoutMarkedByUserInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput>
  }

  export type AttendanceLogCreateManyMarkedByUserInputEnvelope = {
    data: AttendanceLogCreateManyMarkedByUserInput | AttendanceLogCreateManyMarkedByUserInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAttendanceLogsInput
    markedByUser: UserCreateNestedOneWithoutAttendanceLogsInput
  }

  export type AttendanceLogUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogCreateOrConnectWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput>
  }

  export type AttendanceLogCreateManyUserInputEnvelope = {
    data: AttendanceLogCreateManyUserInput | AttendanceLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutUserInput = {
    id?: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutUserInput = {
    id?: string
    chatRoomId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageCreateManyUserInputEnvelope = {
    data: ChatMessageCreateManyUserInput | ChatMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomCreateNestedManyWithoutClubInput
    events?: EventCreateNestedManyWithoutClubInput
    userClubs?: UserClubCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutClubInput
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutCreatorInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput>
  }

  export type ClubCreateManyCreatorInputEnvelope = {
    data: ClubCreateManyCreatorInput | ClubCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type EventFeedbackCreateWithoutUserInput = {
    id?: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutEventFeedbackInput
  }

  export type EventFeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventFeedbackCreateOrConnectWithoutUserInput = {
    where: EventFeedbackWhereUniqueInput
    create: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput>
  }

  export type EventFeedbackCreateManyUserInputEnvelope = {
    data: EventFeedbackCreateManyUserInput | EventFeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventQRCodeCreateWithoutCreatorInput = {
    id?: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutEventQRCodesInput
  }

  export type EventQRCodeUncheckedCreateWithoutCreatorInput = {
    id?: string
    eventId: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type EventQRCodeCreateOrConnectWithoutCreatorInput = {
    where: EventQRCodeWhereUniqueInput
    create: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput>
  }

  export type EventQRCodeCreateManyCreatorInputEnvelope = {
    data: EventQRCodeCreateManyCreatorInput | EventQRCodeCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type EventRegistrationCreateWithoutAttendanceMarkedByUserInput = {
    id?: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
    event: EventCreateNestedOneWithoutEventRegistrationsInput
    user: UserCreateNestedOneWithoutEventRegistrationsInput
  }

  export type EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput = {
    id?: string
    userId: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationCreateOrConnectWithoutAttendanceMarkedByUserInput = {
    where: EventRegistrationWhereUniqueInput
    create: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput>
  }

  export type EventRegistrationCreateManyAttendanceMarkedByUserInputEnvelope = {
    data: EventRegistrationCreateManyAttendanceMarkedByUserInput | EventRegistrationCreateManyAttendanceMarkedByUserInput[]
    skipDuplicates?: boolean
  }

  export type EventRegistrationCreateWithoutUserInput = {
    id?: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
    attendanceMarkedByUser?: UserCreateNestedOneWithoutMarkedAttendanceInput
    event: EventCreateNestedOneWithoutEventRegistrationsInput
  }

  export type EventRegistrationUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationCreateOrConnectWithoutUserInput = {
    where: EventRegistrationWhereUniqueInput
    create: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput>
  }

  export type EventRegistrationCreateManyUserInputEnvelope = {
    data: EventRegistrationCreateManyUserInput | EventRegistrationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCreatorInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventCreateManyCreatorInputEnvelope = {
    data: EventCreateManyCreatorInput | EventCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PointsHistoryCreateWithoutUserInput = {
    id?: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
  }

  export type PointsHistoryUncheckedCreateWithoutUserInput = {
    id?: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
  }

  export type PointsHistoryCreateOrConnectWithoutUserInput = {
    where: PointsHistoryWhereUniqueInput
    create: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput>
  }

  export type PointsHistoryCreateManyUserInputEnvelope = {
    data: PointsHistoryCreateManyUserInput | PointsHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    eventId?: string | null
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    id?: string
    badgeId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserClubCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
    club: ClubCreateNestedOneWithoutUserClubsInput
  }

  export type UserClubUncheckedCreateWithoutUserInput = {
    id?: string
    clubId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type UserClubCreateOrConnectWithoutUserInput = {
    where: UserClubWhereUniqueInput
    create: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput>
  }

  export type UserClubCreateManyUserInputEnvelope = {
    data: UserClubCreateManyUserInput | UserClubCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutMarkedByUserInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutMarkedByUserInput, AttendanceLogUncheckedUpdateWithoutMarkedByUserInput>
    create: XOR<AttendanceLogCreateWithoutMarkedByUserInput, AttendanceLogUncheckedCreateWithoutMarkedByUserInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutMarkedByUserInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutMarkedByUserInput, AttendanceLogUncheckedUpdateWithoutMarkedByUserInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutMarkedByUserInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutMarkedByUserInput>
  }

  export type AttendanceLogScalarWhereInput = {
    AND?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
    OR?: AttendanceLogScalarWhereInput[]
    NOT?: AttendanceLogScalarWhereInput | AttendanceLogScalarWhereInput[]
    id?: StringFilter<"AttendanceLog"> | string
    eventId?: StringFilter<"AttendanceLog"> | string
    userId?: StringFilter<"AttendanceLog"> | string
    markedBy?: StringFilter<"AttendanceLog"> | string
    action?: EnumAttendanceActionFilter<"AttendanceLog"> | $Enums.AttendanceAction
    previousStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    newStatus?: BoolNullableFilter<"AttendanceLog"> | boolean | null
    reason?: StringNullableFilter<"AttendanceLog"> | string | null
    createdAt?: DateTimeFilter<"AttendanceLog"> | Date | string
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutUserInput, AttendanceLogUncheckedUpdateWithoutUserInput>
    create: XOR<AttendanceLogCreateWithoutUserInput, AttendanceLogUncheckedCreateWithoutUserInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutUserInput, AttendanceLogUncheckedUpdateWithoutUserInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutUserInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutUserInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    chatRoomId?: StringFilter<"ChatMessage"> | string
    userId?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    fileUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type ClubUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ClubWhereUniqueInput
    update: XOR<ClubUpdateWithoutCreatorInput, ClubUncheckedUpdateWithoutCreatorInput>
    create: XOR<ClubCreateWithoutCreatorInput, ClubUncheckedCreateWithoutCreatorInput>
  }

  export type ClubUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ClubWhereUniqueInput
    data: XOR<ClubUpdateWithoutCreatorInput, ClubUncheckedUpdateWithoutCreatorInput>
  }

  export type ClubUpdateManyWithWhereWithoutCreatorInput = {
    where: ClubScalarWhereInput
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ClubScalarWhereInput = {
    AND?: ClubScalarWhereInput | ClubScalarWhereInput[]
    OR?: ClubScalarWhereInput[]
    NOT?: ClubScalarWhereInput | ClubScalarWhereInput[]
    id?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    category?: EnumClubCategoryFilter<"Club"> | $Enums.ClubCategory
    logoUrl?: StringNullableFilter<"Club"> | string | null
    coverImageUrl?: StringNullableFilter<"Club"> | string | null
    contactEmail?: StringNullableFilter<"Club"> | string | null
    isActive?: BoolFilter<"Club"> | boolean
    memberCount?: IntFilter<"Club"> | number
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
  }

  export type EventFeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: EventFeedbackWhereUniqueInput
    update: XOR<EventFeedbackUpdateWithoutUserInput, EventFeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<EventFeedbackCreateWithoutUserInput, EventFeedbackUncheckedCreateWithoutUserInput>
  }

  export type EventFeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: EventFeedbackWhereUniqueInput
    data: XOR<EventFeedbackUpdateWithoutUserInput, EventFeedbackUncheckedUpdateWithoutUserInput>
  }

  export type EventFeedbackUpdateManyWithWhereWithoutUserInput = {
    where: EventFeedbackScalarWhereInput
    data: XOR<EventFeedbackUpdateManyMutationInput, EventFeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type EventFeedbackScalarWhereInput = {
    AND?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
    OR?: EventFeedbackScalarWhereInput[]
    NOT?: EventFeedbackScalarWhereInput | EventFeedbackScalarWhereInput[]
    id?: StringFilter<"EventFeedback"> | string
    userId?: StringFilter<"EventFeedback"> | string
    eventId?: StringFilter<"EventFeedback"> | string
    rating?: IntFilter<"EventFeedback"> | number
    feedback?: StringNullableFilter<"EventFeedback"> | string | null
    anonymous?: BoolFilter<"EventFeedback"> | boolean
    createdAt?: DateTimeFilter<"EventFeedback"> | Date | string
  }

  export type EventQRCodeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: EventQRCodeWhereUniqueInput
    update: XOR<EventQRCodeUpdateWithoutCreatorInput, EventQRCodeUncheckedUpdateWithoutCreatorInput>
    create: XOR<EventQRCodeCreateWithoutCreatorInput, EventQRCodeUncheckedCreateWithoutCreatorInput>
  }

  export type EventQRCodeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: EventQRCodeWhereUniqueInput
    data: XOR<EventQRCodeUpdateWithoutCreatorInput, EventQRCodeUncheckedUpdateWithoutCreatorInput>
  }

  export type EventQRCodeUpdateManyWithWhereWithoutCreatorInput = {
    where: EventQRCodeScalarWhereInput
    data: XOR<EventQRCodeUpdateManyMutationInput, EventQRCodeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type EventQRCodeScalarWhereInput = {
    AND?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
    OR?: EventQRCodeScalarWhereInput[]
    NOT?: EventQRCodeScalarWhereInput | EventQRCodeScalarWhereInput[]
    id?: StringFilter<"EventQRCode"> | string
    eventId?: StringFilter<"EventQRCode"> | string
    qrCodeData?: StringFilter<"EventQRCode"> | string
    validFrom?: DateTimeFilter<"EventQRCode"> | Date | string
    validUntil?: DateTimeFilter<"EventQRCode"> | Date | string
    maxScans?: IntNullableFilter<"EventQRCode"> | number | null
    currentScans?: IntFilter<"EventQRCode"> | number
    isActive?: BoolFilter<"EventQRCode"> | boolean
    createdBy?: StringFilter<"EventQRCode"> | string
    createdAt?: DateTimeFilter<"EventQRCode"> | Date | string
  }

  export type EventRegistrationUpsertWithWhereUniqueWithoutAttendanceMarkedByUserInput = {
    where: EventRegistrationWhereUniqueInput
    update: XOR<EventRegistrationUpdateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedUpdateWithoutAttendanceMarkedByUserInput>
    create: XOR<EventRegistrationCreateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedCreateWithoutAttendanceMarkedByUserInput>
  }

  export type EventRegistrationUpdateWithWhereUniqueWithoutAttendanceMarkedByUserInput = {
    where: EventRegistrationWhereUniqueInput
    data: XOR<EventRegistrationUpdateWithoutAttendanceMarkedByUserInput, EventRegistrationUncheckedUpdateWithoutAttendanceMarkedByUserInput>
  }

  export type EventRegistrationUpdateManyWithWhereWithoutAttendanceMarkedByUserInput = {
    where: EventRegistrationScalarWhereInput
    data: XOR<EventRegistrationUpdateManyMutationInput, EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserInput>
  }

  export type EventRegistrationScalarWhereInput = {
    AND?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
    OR?: EventRegistrationScalarWhereInput[]
    NOT?: EventRegistrationScalarWhereInput | EventRegistrationScalarWhereInput[]
    id?: StringFilter<"EventRegistration"> | string
    userId?: StringFilter<"EventRegistration"> | string
    eventId?: StringFilter<"EventRegistration"> | string
    registrationDate?: DateTimeFilter<"EventRegistration"> | Date | string
    status?: EnumRegistrationStatusFilter<"EventRegistration"> | $Enums.RegistrationStatus
    attended?: BoolFilter<"EventRegistration"> | boolean
    attendanceMarkedBy?: StringNullableFilter<"EventRegistration"> | string | null
    attendanceMarkedAt?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    attendanceMethod?: EnumAttendanceMethodNullableFilter<"EventRegistration"> | $Enums.AttendanceMethod | null
    checkInTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"EventRegistration"> | Date | string | null
    pointsAwarded?: IntFilter<"EventRegistration"> | number
    volunteerHoursAwarded?: FloatFilter<"EventRegistration"> | number
    feedbackSubmitted?: BoolFilter<"EventRegistration"> | boolean
    notes?: StringNullableFilter<"EventRegistration"> | string | null
  }

  export type EventRegistrationUpsertWithWhereUniqueWithoutUserInput = {
    where: EventRegistrationWhereUniqueInput
    update: XOR<EventRegistrationUpdateWithoutUserInput, EventRegistrationUncheckedUpdateWithoutUserInput>
    create: XOR<EventRegistrationCreateWithoutUserInput, EventRegistrationUncheckedCreateWithoutUserInput>
  }

  export type EventRegistrationUpdateWithWhereUniqueWithoutUserInput = {
    where: EventRegistrationWhereUniqueInput
    data: XOR<EventRegistrationUpdateWithoutUserInput, EventRegistrationUncheckedUpdateWithoutUserInput>
  }

  export type EventRegistrationUpdateManyWithWhereWithoutUserInput = {
    where: EventRegistrationScalarWhereInput
    data: XOR<EventRegistrationUpdateManyMutationInput, EventRegistrationUncheckedUpdateManyWithoutUserInput>
  }

  export type EventUpsertWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
  }

  export type EventUpdateManyWithWhereWithoutCreatorInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCreatorInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    clubId?: StringFilter<"Event"> | string
    eventType?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    maxParticipants?: IntNullableFilter<"Event"> | number | null
    registrationDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    pointsReward?: IntFilter<"Event"> | number
    volunteerHours?: FloatFilter<"Event"> | number
    imageUrl?: StringNullableFilter<"Event"> | string | null
    tags?: StringNullableListFilter<"Event">
    skillAreas?: StringNullableListFilter<"Event">
    isPublished?: BoolFilter<"Event"> | boolean
    requiresApproval?: BoolFilter<"Event"> | boolean
    createdBy?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type PointsHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: PointsHistoryWhereUniqueInput
    update: XOR<PointsHistoryUpdateWithoutUserInput, PointsHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<PointsHistoryCreateWithoutUserInput, PointsHistoryUncheckedCreateWithoutUserInput>
  }

  export type PointsHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: PointsHistoryWhereUniqueInput
    data: XOR<PointsHistoryUpdateWithoutUserInput, PointsHistoryUncheckedUpdateWithoutUserInput>
  }

  export type PointsHistoryUpdateManyWithWhereWithoutUserInput = {
    where: PointsHistoryScalarWhereInput
    data: XOR<PointsHistoryUpdateManyMutationInput, PointsHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type PointsHistoryScalarWhereInput = {
    AND?: PointsHistoryScalarWhereInput | PointsHistoryScalarWhereInput[]
    OR?: PointsHistoryScalarWhereInput[]
    NOT?: PointsHistoryScalarWhereInput | PointsHistoryScalarWhereInput[]
    id?: StringFilter<"PointsHistory"> | string
    userId?: StringFilter<"PointsHistory"> | string
    eventId?: StringNullableFilter<"PointsHistory"> | string | null
    pointsEarned?: IntFilter<"PointsHistory"> | number
    volunteerHoursEarned?: FloatFilter<"PointsHistory"> | number
    reason?: StringFilter<"PointsHistory"> | string
    createdAt?: DateTimeFilter<"PointsHistory"> | Date | string
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    eventId?: StringNullableFilter<"UserBadge"> | string | null
  }

  export type UserClubUpsertWithWhereUniqueWithoutUserInput = {
    where: UserClubWhereUniqueInput
    update: XOR<UserClubUpdateWithoutUserInput, UserClubUncheckedUpdateWithoutUserInput>
    create: XOR<UserClubCreateWithoutUserInput, UserClubUncheckedCreateWithoutUserInput>
  }

  export type UserClubUpdateWithWhereUniqueWithoutUserInput = {
    where: UserClubWhereUniqueInput
    data: XOR<UserClubUpdateWithoutUserInput, UserClubUncheckedUpdateWithoutUserInput>
  }

  export type UserClubUpdateManyWithWhereWithoutUserInput = {
    where: UserClubScalarWhereInput
    data: XOR<UserClubUpdateManyMutationInput, UserClubUncheckedUpdateManyWithoutUserInput>
  }

  export type UserClubScalarWhereInput = {
    AND?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
    OR?: UserClubScalarWhereInput[]
    NOT?: UserClubScalarWhereInput | UserClubScalarWhereInput[]
    id?: StringFilter<"UserClub"> | string
    userId?: StringFilter<"UserClub"> | string
    clubId?: StringFilter<"UserClub"> | string
    role?: EnumClubMemberRoleFilter<"UserClub"> | $Enums.ClubMemberRole
    joinedAt?: DateTimeFilter<"UserClub"> | Date | string
    isActive?: BoolFilter<"UserClub"> | boolean
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type ChatRoomCreateWithoutClubInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutClubInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput>
  }

  export type ChatRoomCreateManyClubInputEnvelope = {
    data: ChatRoomCreateManyClubInput | ChatRoomCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedClubsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedClubsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedClubsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedClubsInput, UserUncheckedCreateWithoutCreatedClubsInput>
  }

  export type EventCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutClubInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput>
  }

  export type EventCreateManyClubInputEnvelope = {
    data: EventCreateManyClubInput | EventCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type UserClubCreateWithoutClubInput = {
    id?: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
    user: UserCreateNestedOneWithoutUserClubsInput
  }

  export type UserClubUncheckedCreateWithoutClubInput = {
    id?: string
    userId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type UserClubCreateOrConnectWithoutClubInput = {
    where: UserClubWhereUniqueInput
    create: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput>
  }

  export type UserClubCreateManyClubInputEnvelope = {
    data: UserClubCreateManyClubInput | UserClubCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutClubInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutClubInput, ChatRoomUncheckedUpdateWithoutClubInput>
    create: XOR<ChatRoomCreateWithoutClubInput, ChatRoomUncheckedCreateWithoutClubInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutClubInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutClubInput, ChatRoomUncheckedUpdateWithoutClubInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutClubInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutClubInput>
  }

  export type ChatRoomScalarWhereInput = {
    AND?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    OR?: ChatRoomScalarWhereInput[]
    NOT?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    clubId?: StringFilter<"ChatRoom"> | string
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
  }

  export type UserUpsertWithoutCreatedClubsInput = {
    update: XOR<UserUpdateWithoutCreatedClubsInput, UserUncheckedUpdateWithoutCreatedClubsInput>
    create: XOR<UserCreateWithoutCreatedClubsInput, UserUncheckedCreateWithoutCreatedClubsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedClubsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedClubsInput, UserUncheckedUpdateWithoutCreatedClubsInput>
  }

  export type UserUpdateWithoutCreatedClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithWhereUniqueWithoutClubInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutClubInput, EventUncheckedUpdateWithoutClubInput>
    create: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput>
  }

  export type EventUpdateWithWhereUniqueWithoutClubInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutClubInput, EventUncheckedUpdateWithoutClubInput>
  }

  export type EventUpdateManyWithWhereWithoutClubInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutClubInput>
  }

  export type UserClubUpsertWithWhereUniqueWithoutClubInput = {
    where: UserClubWhereUniqueInput
    update: XOR<UserClubUpdateWithoutClubInput, UserClubUncheckedUpdateWithoutClubInput>
    create: XOR<UserClubCreateWithoutClubInput, UserClubUncheckedCreateWithoutClubInput>
  }

  export type UserClubUpdateWithWhereUniqueWithoutClubInput = {
    where: UserClubWhereUniqueInput
    data: XOR<UserClubUpdateWithoutClubInput, UserClubUncheckedUpdateWithoutClubInput>
  }

  export type UserClubUpdateManyWithWhereWithoutClubInput = {
    where: UserClubScalarWhereInput
    data: XOR<UserClubUpdateManyMutationInput, UserClubUncheckedUpdateManyWithoutClubInput>
  }

  export type AttendanceLogCreateWithoutEventInput = {
    id?: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
    markedByUser: UserCreateNestedOneWithoutAttendanceLogsInput
    user: UserCreateNestedOneWithoutAttendanceLogsUserInput
  }

  export type AttendanceLogUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogCreateOrConnectWithoutEventInput = {
    where: AttendanceLogWhereUniqueInput
    create: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput>
  }

  export type AttendanceLogCreateManyEventInputEnvelope = {
    data: AttendanceLogCreateManyEventInput | AttendanceLogCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventFeedbackCreateWithoutEventInput = {
    id?: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEventFeedbackInput
  }

  export type EventFeedbackUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventFeedbackCreateOrConnectWithoutEventInput = {
    where: EventFeedbackWhereUniqueInput
    create: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput>
  }

  export type EventFeedbackCreateManyEventInputEnvelope = {
    data: EventFeedbackCreateManyEventInput | EventFeedbackCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventQRCodeCreateWithoutEventInput = {
    id?: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedQRCodesInput
  }

  export type EventQRCodeUncheckedCreateWithoutEventInput = {
    id?: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
  }

  export type EventQRCodeCreateOrConnectWithoutEventInput = {
    where: EventQRCodeWhereUniqueInput
    create: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput>
  }

  export type EventQRCodeCreateManyEventInputEnvelope = {
    data: EventQRCodeCreateManyEventInput | EventQRCodeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventRegistrationCreateWithoutEventInput = {
    id?: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
    attendanceMarkedByUser?: UserCreateNestedOneWithoutMarkedAttendanceInput
    user: UserCreateNestedOneWithoutEventRegistrationsInput
  }

  export type EventRegistrationUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationCreateOrConnectWithoutEventInput = {
    where: EventRegistrationWhereUniqueInput
    create: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput>
  }

  export type EventRegistrationCreateManyEventInputEnvelope = {
    data: EventRegistrationCreateManyEventInput | EventRegistrationCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomCreateNestedManyWithoutClubInput
    creator: UserCreateNestedOneWithoutCreatedClubsInput
    userClubs?: UserClubCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutClubInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutEventsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
  }

  export type UserCreateWithoutCreatedEventsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedEventsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
  }

  export type AttendanceLogUpsertWithWhereUniqueWithoutEventInput = {
    where: AttendanceLogWhereUniqueInput
    update: XOR<AttendanceLogUpdateWithoutEventInput, AttendanceLogUncheckedUpdateWithoutEventInput>
    create: XOR<AttendanceLogCreateWithoutEventInput, AttendanceLogUncheckedCreateWithoutEventInput>
  }

  export type AttendanceLogUpdateWithWhereUniqueWithoutEventInput = {
    where: AttendanceLogWhereUniqueInput
    data: XOR<AttendanceLogUpdateWithoutEventInput, AttendanceLogUncheckedUpdateWithoutEventInput>
  }

  export type AttendanceLogUpdateManyWithWhereWithoutEventInput = {
    where: AttendanceLogScalarWhereInput
    data: XOR<AttendanceLogUpdateManyMutationInput, AttendanceLogUncheckedUpdateManyWithoutEventInput>
  }

  export type EventFeedbackUpsertWithWhereUniqueWithoutEventInput = {
    where: EventFeedbackWhereUniqueInput
    update: XOR<EventFeedbackUpdateWithoutEventInput, EventFeedbackUncheckedUpdateWithoutEventInput>
    create: XOR<EventFeedbackCreateWithoutEventInput, EventFeedbackUncheckedCreateWithoutEventInput>
  }

  export type EventFeedbackUpdateWithWhereUniqueWithoutEventInput = {
    where: EventFeedbackWhereUniqueInput
    data: XOR<EventFeedbackUpdateWithoutEventInput, EventFeedbackUncheckedUpdateWithoutEventInput>
  }

  export type EventFeedbackUpdateManyWithWhereWithoutEventInput = {
    where: EventFeedbackScalarWhereInput
    data: XOR<EventFeedbackUpdateManyMutationInput, EventFeedbackUncheckedUpdateManyWithoutEventInput>
  }

  export type EventQRCodeUpsertWithWhereUniqueWithoutEventInput = {
    where: EventQRCodeWhereUniqueInput
    update: XOR<EventQRCodeUpdateWithoutEventInput, EventQRCodeUncheckedUpdateWithoutEventInput>
    create: XOR<EventQRCodeCreateWithoutEventInput, EventQRCodeUncheckedCreateWithoutEventInput>
  }

  export type EventQRCodeUpdateWithWhereUniqueWithoutEventInput = {
    where: EventQRCodeWhereUniqueInput
    data: XOR<EventQRCodeUpdateWithoutEventInput, EventQRCodeUncheckedUpdateWithoutEventInput>
  }

  export type EventQRCodeUpdateManyWithWhereWithoutEventInput = {
    where: EventQRCodeScalarWhereInput
    data: XOR<EventQRCodeUpdateManyMutationInput, EventQRCodeUncheckedUpdateManyWithoutEventInput>
  }

  export type EventRegistrationUpsertWithWhereUniqueWithoutEventInput = {
    where: EventRegistrationWhereUniqueInput
    update: XOR<EventRegistrationUpdateWithoutEventInput, EventRegistrationUncheckedUpdateWithoutEventInput>
    create: XOR<EventRegistrationCreateWithoutEventInput, EventRegistrationUncheckedCreateWithoutEventInput>
  }

  export type EventRegistrationUpdateWithWhereUniqueWithoutEventInput = {
    where: EventRegistrationWhereUniqueInput
    data: XOR<EventRegistrationUpdateWithoutEventInput, EventRegistrationUncheckedUpdateWithoutEventInput>
  }

  export type EventRegistrationUpdateManyWithWhereWithoutEventInput = {
    where: EventRegistrationScalarWhereInput
    data: XOR<EventRegistrationUpdateManyMutationInput, EventRegistrationUncheckedUpdateManyWithoutEventInput>
  }

  export type ClubUpsertWithoutEventsInput = {
    update: XOR<ClubUpdateWithoutEventsInput, ClubUncheckedUpdateWithoutEventsInput>
    create: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutEventsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutEventsInput, ClubUncheckedUpdateWithoutEventsInput>
  }

  export type ClubUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUpdateManyWithoutClubNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedClubsNestedInput
    userClubs?: UserClubUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutClubNestedInput
  }

  export type UserUpsertWithoutCreatedEventsInput = {
    update: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type UserUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClubCreateWithoutUserClubsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomCreateNestedManyWithoutClubInput
    creator: UserCreateNestedOneWithoutCreatedClubsInput
    events?: EventCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutUserClubsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutClubInput
    events?: EventUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutUserClubsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutUserClubsInput, ClubUncheckedCreateWithoutUserClubsInput>
  }

  export type UserCreateWithoutUserClubsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserClubsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserClubsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserClubsInput, UserUncheckedCreateWithoutUserClubsInput>
  }

  export type ClubUpsertWithoutUserClubsInput = {
    update: XOR<ClubUpdateWithoutUserClubsInput, ClubUncheckedUpdateWithoutUserClubsInput>
    create: XOR<ClubCreateWithoutUserClubsInput, ClubUncheckedCreateWithoutUserClubsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutUserClubsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutUserClubsInput, ClubUncheckedUpdateWithoutUserClubsInput>
  }

  export type ClubUpdateWithoutUserClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUpdateManyWithoutClubNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedClubsNestedInput
    events?: EventUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutUserClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutClubNestedInput
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
  }

  export type UserUpsertWithoutUserClubsInput = {
    update: XOR<UserUpdateWithoutUserClubsInput, UserUncheckedUpdateWithoutUserClubsInput>
    create: XOR<UserCreateWithoutUserClubsInput, UserUncheckedCreateWithoutUserClubsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserClubsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserClubsInput, UserUncheckedUpdateWithoutUserClubsInput>
  }

  export type UserUpdateWithoutUserClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMarkedAttendanceInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMarkedAttendanceInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMarkedAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMarkedAttendanceInput, UserUncheckedCreateWithoutMarkedAttendanceInput>
  }

  export type EventCreateWithoutEventRegistrationsInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutEventRegistrationsInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEventRegistrationsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventRegistrationsInput, EventUncheckedCreateWithoutEventRegistrationsInput>
  }

  export type UserCreateWithoutEventRegistrationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventRegistrationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventRegistrationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventRegistrationsInput, UserUncheckedCreateWithoutEventRegistrationsInput>
  }

  export type UserUpsertWithoutMarkedAttendanceInput = {
    update: XOR<UserUpdateWithoutMarkedAttendanceInput, UserUncheckedUpdateWithoutMarkedAttendanceInput>
    create: XOR<UserCreateWithoutMarkedAttendanceInput, UserUncheckedCreateWithoutMarkedAttendanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMarkedAttendanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMarkedAttendanceInput, UserUncheckedUpdateWithoutMarkedAttendanceInput>
  }

  export type UserUpdateWithoutMarkedAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMarkedAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutEventRegistrationsInput = {
    update: XOR<EventUpdateWithoutEventRegistrationsInput, EventUncheckedUpdateWithoutEventRegistrationsInput>
    create: XOR<EventCreateWithoutEventRegistrationsInput, EventUncheckedCreateWithoutEventRegistrationsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventRegistrationsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventRegistrationsInput, EventUncheckedUpdateWithoutEventRegistrationsInput>
  }

  export type EventUpdateWithoutEventRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutEventRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutEventRegistrationsInput = {
    update: XOR<UserUpdateWithoutEventRegistrationsInput, UserUncheckedUpdateWithoutEventRegistrationsInput>
    create: XOR<UserCreateWithoutEventRegistrationsInput, UserUncheckedCreateWithoutEventRegistrationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventRegistrationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventRegistrationsInput, UserUncheckedUpdateWithoutEventRegistrationsInput>
  }

  export type UserUpdateWithoutEventRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventCreateWithoutAttendanceLogsInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutAttendanceLogsInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAttendanceLogsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendanceLogsInput, EventUncheckedCreateWithoutAttendanceLogsInput>
  }

  export type UserCreateWithoutAttendanceLogsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendanceLogsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendanceLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
  }

  export type UserCreateWithoutAttendanceLogsUserInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendanceLogsUserInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendanceLogsUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendanceLogsUserInput, UserUncheckedCreateWithoutAttendanceLogsUserInput>
  }

  export type EventUpsertWithoutAttendanceLogsInput = {
    update: XOR<EventUpdateWithoutAttendanceLogsInput, EventUncheckedUpdateWithoutAttendanceLogsInput>
    create: XOR<EventCreateWithoutAttendanceLogsInput, EventUncheckedCreateWithoutAttendanceLogsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendanceLogsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendanceLogsInput, EventUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type EventUpdateWithoutAttendanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutAttendanceLogsInput = {
    update: XOR<UserUpdateWithoutAttendanceLogsInput, UserUncheckedUpdateWithoutAttendanceLogsInput>
    create: XOR<UserCreateWithoutAttendanceLogsInput, UserUncheckedCreateWithoutAttendanceLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendanceLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendanceLogsInput, UserUncheckedUpdateWithoutAttendanceLogsInput>
  }

  export type UserUpdateWithoutAttendanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAttendanceLogsUserInput = {
    update: XOR<UserUpdateWithoutAttendanceLogsUserInput, UserUncheckedUpdateWithoutAttendanceLogsUserInput>
    create: XOR<UserCreateWithoutAttendanceLogsUserInput, UserUncheckedCreateWithoutAttendanceLogsUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendanceLogsUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendanceLogsUserInput, UserUncheckedUpdateWithoutAttendanceLogsUserInput>
  }

  export type UserUpdateWithoutAttendanceLogsUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendanceLogsUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCreatedQRCodesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedQRCodesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedQRCodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedQRCodesInput, UserUncheckedCreateWithoutCreatedQRCodesInput>
  }

  export type EventCreateWithoutEventQRCodesInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutEventQRCodesInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEventQRCodesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventQRCodesInput, EventUncheckedCreateWithoutEventQRCodesInput>
  }

  export type UserUpsertWithoutCreatedQRCodesInput = {
    update: XOR<UserUpdateWithoutCreatedQRCodesInput, UserUncheckedUpdateWithoutCreatedQRCodesInput>
    create: XOR<UserCreateWithoutCreatedQRCodesInput, UserUncheckedCreateWithoutCreatedQRCodesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedQRCodesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedQRCodesInput, UserUncheckedUpdateWithoutCreatedQRCodesInput>
  }

  export type UserUpdateWithoutCreatedQRCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedQRCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutEventQRCodesInput = {
    update: XOR<EventUpdateWithoutEventQRCodesInput, EventUncheckedUpdateWithoutEventQRCodesInput>
    create: XOR<EventCreateWithoutEventQRCodesInput, EventUncheckedCreateWithoutEventQRCodesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventQRCodesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventQRCodesInput, EventUncheckedUpdateWithoutEventQRCodesInput>
  }

  export type EventUpdateWithoutEventQRCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutEventQRCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserCreateWithoutPointsHistoryInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPointsHistoryInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPointsHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPointsHistoryInput, UserUncheckedCreateWithoutPointsHistoryInput>
  }

  export type UserUpsertWithoutPointsHistoryInput = {
    update: XOR<UserUpdateWithoutPointsHistoryInput, UserUncheckedUpdateWithoutPointsHistoryInput>
    create: XOR<UserCreateWithoutPointsHistoryInput, UserUncheckedCreateWithoutPointsHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPointsHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPointsHistoryInput, UserUncheckedUpdateWithoutPointsHistoryInput>
  }

  export type UserUpdateWithoutPointsHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPointsHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventCreateWithoutEventFeedbackInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutEventInput
    club: ClubCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutEventFeedbackInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutEventInput
    eventQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutEventInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEventFeedbackInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventFeedbackInput, EventUncheckedCreateWithoutEventFeedbackInput>
  }

  export type UserCreateWithoutEventFeedbackInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventFeedbackInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventFeedbackInput, UserUncheckedCreateWithoutEventFeedbackInput>
  }

  export type EventUpsertWithoutEventFeedbackInput = {
    update: XOR<EventUpdateWithoutEventFeedbackInput, EventUncheckedUpdateWithoutEventFeedbackInput>
    create: XOR<EventCreateWithoutEventFeedbackInput, EventUncheckedCreateWithoutEventFeedbackInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventFeedbackInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventFeedbackInput, EventUncheckedUpdateWithoutEventFeedbackInput>
  }

  export type EventUpdateWithoutEventFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutEventFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutEventFeedbackInput = {
    update: XOR<UserUpdateWithoutEventFeedbackInput, UserUncheckedUpdateWithoutEventFeedbackInput>
    create: XOR<UserCreateWithoutEventFeedbackInput, UserUncheckedCreateWithoutEventFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventFeedbackInput, UserUncheckedUpdateWithoutEventFeedbackInput>
  }

  export type UserUpdateWithoutEventFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatMessageCreateWithoutChatRoomInput = {
    id?: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutChatRoomInput = {
    id?: string
    userId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutChatRoomInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput>
  }

  export type ChatMessageCreateManyChatRoomInputEnvelope = {
    data: ChatMessageCreateManyChatRoomInput | ChatMessageCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutChatRoomsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedClubsInput
    events?: EventCreateNestedManyWithoutClubInput
    userClubs?: UserClubCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutChatRoomsInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutChatRoomsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutChatRoomsInput, ClubUncheckedCreateWithoutChatRoomsInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutChatRoomInput, ChatMessageUncheckedUpdateWithoutChatRoomInput>
    create: XOR<ChatMessageCreateWithoutChatRoomInput, ChatMessageUncheckedCreateWithoutChatRoomInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutChatRoomInput, ChatMessageUncheckedUpdateWithoutChatRoomInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutChatRoomInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type ClubUpsertWithoutChatRoomsInput = {
    update: XOR<ClubUpdateWithoutChatRoomsInput, ClubUncheckedUpdateWithoutChatRoomsInput>
    create: XOR<ClubCreateWithoutChatRoomsInput, ClubUncheckedCreateWithoutChatRoomsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutChatRoomsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutChatRoomsInput, ClubUncheckedUpdateWithoutChatRoomsInput>
  }

  export type ClubUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedClubsNestedInput
    events?: EventUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutChatRoomsInput
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: string
    clubId: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutChatRoomsNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserBadgeCreateWithoutBadgeInput = {
    id?: string
    earnedAt?: Date | string
    eventId?: string | null
    user: UserCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutBadgeInput = {
    id?: string
    userId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserBadgeCreateOrConnectWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeCreateManyBadgeInputEnvelope = {
    data: UserBadgeCreateManyBadgeInput | UserBadgeCreateManyBadgeInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutBadgeInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutBadgeInput>
  }

  export type BadgeCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeUncheckedCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    criteria: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeCreateOrConnectWithoutUserBadgesInput = {
    where: BadgeWhereUniqueInput
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
  }

  export type UserCreateWithoutUserBadgesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    createdClubs?: ClubCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryCreateNestedManyWithoutUserInput
    userClubs?: UserClubCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserBadgesInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    studentId?: string | null
    phone?: string | null
    department?: string | null
    yearOfStudy?: number | null
    role?: $Enums.UserRole
    isVerified?: boolean
    profileImage?: string | null
    totalPoints?: number
    totalVolunteerHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendanceLogs?: AttendanceLogUncheckedCreateNestedManyWithoutMarkedByUserInput
    attendanceLogsUser?: AttendanceLogUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    createdClubs?: ClubUncheckedCreateNestedManyWithoutCreatorInput
    eventFeedback?: EventFeedbackUncheckedCreateNestedManyWithoutUserInput
    createdQRCodes?: EventQRCodeUncheckedCreateNestedManyWithoutCreatorInput
    markedAttendance?: EventRegistrationUncheckedCreateNestedManyWithoutAttendanceMarkedByUserInput
    eventRegistrations?: EventRegistrationUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    pointsHistory?: PointsHistoryUncheckedCreateNestedManyWithoutUserInput
    userClubs?: UserClubUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
  }

  export type BadgeUpsertWithoutUserBadgesInput = {
    update: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    where?: BadgeWhereInput
  }

  export type BadgeUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: BadgeWhereInput
    data: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type BadgeUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    criteria?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutUserBadgesInput = {
    update: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfStudy?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalVolunteerHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutMarkedByUserNestedInput
    attendanceLogsUser?: AttendanceLogUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    createdClubs?: ClubUncheckedUpdateManyWithoutCreatorNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutUserNestedInput
    createdQRCodes?: EventQRCodeUncheckedUpdateManyWithoutCreatorNestedInput
    markedAttendance?: EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    pointsHistory?: PointsHistoryUncheckedUpdateManyWithoutUserNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AttendanceLogCreateManyMarkedByUserInput = {
    id?: string
    eventId: string
    userId: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type AttendanceLogCreateManyUserInput = {
    id?: string
    eventId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageCreateManyUserInput = {
    id?: string
    chatRoomId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ClubCreateManyCreatorInput = {
    id?: string
    name: string
    description?: string | null
    category: $Enums.ClubCategory
    logoUrl?: string | null
    coverImageUrl?: string | null
    contactEmail?: string | null
    isActive?: boolean
    memberCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventFeedbackCreateManyUserInput = {
    id?: string
    eventId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventQRCodeCreateManyCreatorInput = {
    id?: string
    eventId: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type EventRegistrationCreateManyAttendanceMarkedByUserInput = {
    id?: string
    userId: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventRegistrationCreateManyUserInput = {
    id?: string
    eventId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type EventCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    clubId: string
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type PointsHistoryCreateManyUserInput = {
    id?: string
    eventId?: string | null
    pointsEarned: number
    volunteerHoursEarned?: number
    reason: string
    createdAt?: Date | string
  }

  export type UserBadgeCreateManyUserInput = {
    id?: string
    badgeId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserClubCreateManyUserInput = {
    id?: string
    clubId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type AttendanceLogUpdateWithoutMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendanceLogsNestedInput
    user?: UserUpdateOneRequiredWithoutAttendanceLogsUserNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUncheckedUpdateManyWithoutMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendanceLogsNestedInput
    markedByUser?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatRoomId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatRoomId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUpdateManyWithoutClubNestedInput
    events?: EventUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutClubNestedInput
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    userClubs?: UserClubUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumClubCategoryFieldUpdateOperationsInput | $Enums.ClubCategory
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    memberCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEventFeedbackNestedInput
  }

  export type EventFeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEventQRCodesNestedInput
  }

  export type EventQRCodeUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventRegistrationUpdateWithoutAttendanceMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    event?: EventUpdateOneRequiredWithoutEventRegistrationsNestedInput
    user?: UserUpdateOneRequiredWithoutEventRegistrationsNestedInput
  }

  export type EventRegistrationUncheckedUpdateWithoutAttendanceMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationUncheckedUpdateManyWithoutAttendanceMarkedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedByUser?: UserUpdateOneWithoutMarkedAttendanceNestedInput
    event?: EventUpdateOneRequiredWithoutEventRegistrationsNestedInput
  }

  export type EventRegistrationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    volunteerHoursEarned?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserClubUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutUserClubsNestedInput
  }

  export type UserClubUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserClubUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomCreateManyClubInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyClubInput = {
    id?: string
    title: string
    description?: string | null
    eventType: $Enums.EventType
    startDate: Date | string
    endDate: Date | string
    location?: string | null
    maxParticipants?: number | null
    registrationDeadline?: Date | string | null
    pointsReward?: number
    volunteerHours?: number
    imageUrl?: string | null
    tags?: EventCreatetagsInput | string[]
    skillAreas?: EventCreateskillAreasInput | string[]
    isPublished?: boolean
    requiresApproval?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserClubCreateManyClubInput = {
    id?: string
    userId: string
    role?: $Enums.ClubMemberRole
    joinedAt?: Date | string
    isActive?: boolean
  }

  export type ChatRoomUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUpdateManyWithoutEventNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendanceLogs?: AttendanceLogUncheckedUpdateManyWithoutEventNestedInput
    eventFeedback?: EventFeedbackUncheckedUpdateManyWithoutEventNestedInput
    eventQRCodes?: EventQRCodeUncheckedUpdateManyWithoutEventNestedInput
    eventRegistrations?: EventRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    registrationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsReward?: IntFieldUpdateOperationsInput | number
    volunteerHours?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: EventUpdatetagsInput | string[]
    skillAreas?: EventUpdateskillAreasInput | string[]
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClubUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserClubsNestedInput
  }

  export type UserClubUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserClubUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumClubMemberRoleFieldUpdateOperationsInput | $Enums.ClubMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceLogCreateManyEventInput = {
    id?: string
    userId: string
    markedBy: string
    action: $Enums.AttendanceAction
    previousStatus?: boolean | null
    newStatus?: boolean | null
    reason?: string | null
    createdAt?: Date | string
  }

  export type EventFeedbackCreateManyEventInput = {
    id?: string
    userId: string
    rating: number
    feedback?: string | null
    anonymous?: boolean
    createdAt?: Date | string
  }

  export type EventQRCodeCreateManyEventInput = {
    id?: string
    qrCodeData: string
    validFrom: Date | string
    validUntil: Date | string
    maxScans?: number | null
    currentScans?: number
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
  }

  export type EventRegistrationCreateManyEventInput = {
    id?: string
    userId: string
    registrationDate?: Date | string
    status?: $Enums.RegistrationStatus
    attended?: boolean
    attendanceMarkedBy?: string | null
    attendanceMarkedAt?: Date | string | null
    attendanceMethod?: $Enums.AttendanceMethod | null
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    pointsAwarded?: number
    volunteerHoursAwarded?: number
    feedbackSubmitted?: boolean
    notes?: string | null
  }

  export type AttendanceLogUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    markedByUser?: UserUpdateOneRequiredWithoutAttendanceLogsNestedInput
    user?: UserUpdateOneRequiredWithoutAttendanceLogsUserNestedInput
  }

  export type AttendanceLogUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLogUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    markedBy?: StringFieldUpdateOperationsInput | string
    action?: EnumAttendanceActionFieldUpdateOperationsInput | $Enums.AttendanceAction
    previousStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventFeedbackNestedInput
  }

  export type EventFeedbackUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventFeedbackUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedQRCodesNestedInput
  }

  export type EventQRCodeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventQRCodeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCodeData?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    maxScans?: NullableIntFieldUpdateOperationsInput | number | null
    currentScans?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventRegistrationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedByUser?: UserUpdateOneWithoutMarkedAttendanceNestedInput
    user?: UserUpdateOneRequiredWithoutEventRegistrationsNestedInput
  }

  export type EventRegistrationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventRegistrationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    attended?: BoolFieldUpdateOperationsInput | boolean
    attendanceMarkedBy?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceMarkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendanceMethod?: NullableEnumAttendanceMethodFieldUpdateOperationsInput | $Enums.AttendanceMethod | null
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    volunteerHoursAwarded?: FloatFieldUpdateOperationsInput | number
    feedbackSubmitted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatMessageCreateManyChatRoomInput = {
    id?: string
    userId: string
    content: string
    messageType?: string
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type ChatMessageUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyBadgeInput = {
    id?: string
    userId: string
    earnedAt?: Date | string
    eventId?: string | null
  }

  export type UserBadgeUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClubCountOutputTypeDefaultArgs instead
     */
    export type ClubCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClubCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BadgeCountOutputTypeDefaultArgs instead
     */
    export type BadgeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BadgeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClubDefaultArgs instead
     */
    export type ClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClubDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserClubDefaultArgs instead
     */
    export type UserClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserClubDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventRegistrationDefaultArgs instead
     */
    export type EventRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventRegistrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceLogDefaultArgs instead
     */
    export type AttendanceLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventQRCodeDefaultArgs instead
     */
    export type EventQRCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventQRCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PointsHistoryDefaultArgs instead
     */
    export type PointsHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PointsHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventFeedbackDefaultArgs instead
     */
    export type EventFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventFeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDefaultArgs instead
     */
    export type ChatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageDefaultArgs instead
     */
    export type ChatMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BadgeDefaultArgs instead
     */
    export type BadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BadgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeDefaultArgs instead
     */
    export type UserBadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}