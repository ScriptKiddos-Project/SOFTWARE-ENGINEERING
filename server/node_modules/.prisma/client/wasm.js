
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  studentId: 'studentId',
  phone: 'phone',
  department: 'department',
  yearOfStudy: 'yearOfStudy',
  role: 'role',
  isVerified: 'isVerified',
  profileImage: 'profileImage',
  totalPoints: 'totalPoints',
  totalVolunteerHours: 'totalVolunteerHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  logoUrl: 'logoUrl',
  coverImageUrl: 'coverImageUrl',
  contactEmail: 'contactEmail',
  isActive: 'isActive',
  memberCount: 'memberCount',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  clubId: 'clubId',
  eventType: 'eventType',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location',
  maxParticipants: 'maxParticipants',
  registrationDeadline: 'registrationDeadline',
  pointsReward: 'pointsReward',
  volunteerHours: 'volunteerHours',
  imageUrl: 'imageUrl',
  tags: 'tags',
  skillAreas: 'skillAreas',
  isPublished: 'isPublished',
  requiresApproval: 'requiresApproval',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserClubScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clubId: 'clubId',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive'
};

exports.Prisma.EventRegistrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  registrationDate: 'registrationDate',
  status: 'status',
  attended: 'attended',
  attendanceMarkedBy: 'attendanceMarkedBy',
  attendanceMarkedAt: 'attendanceMarkedAt',
  attendanceMethod: 'attendanceMethod',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  pointsAwarded: 'pointsAwarded',
  volunteerHoursAwarded: 'volunteerHoursAwarded',
  feedbackSubmitted: 'feedbackSubmitted',
  notes: 'notes'
};

exports.Prisma.AttendanceLogScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  markedBy: 'markedBy',
  action: 'action',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.EventQRCodeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  qrCodeData: 'qrCodeData',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  maxScans: 'maxScans',
  currentScans: 'currentScans',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.PointsHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  pointsEarned: 'pointsEarned',
  volunteerHoursEarned: 'volunteerHoursEarned',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.EventFeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  rating: 'rating',
  feedback: 'feedback',
  anonymous: 'anonymous',
  createdAt: 'createdAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatRoomId: 'chatRoomId',
  userId: 'userId',
  content: 'content',
  messageType: 'messageType',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  criteria: 'criteria',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt',
  eventId: 'eventId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  student: 'student',
  club_admin: 'club_admin',
  super_admin: 'super_admin'
};

exports.ClubCategory = exports.$Enums.ClubCategory = {
  technical: 'technical',
  cultural: 'cultural',
  sports: 'sports',
  academic: 'academic',
  social_service: 'social_service',
  entrepreneurship: 'entrepreneurship',
  arts: 'arts',
  other: 'other'
};

exports.EventType = exports.$Enums.EventType = {
  workshop: 'workshop',
  seminar: 'seminar',
  competition: 'competition',
  cultural_event: 'cultural_event',
  sports_event: 'sports_event',
  volunteering: 'volunteering',
  hackathon: 'hackathon',
  conference: 'conference',
  social_gathering: 'social_gathering',
  other: 'other'
};

exports.ClubMemberRole = exports.$Enums.ClubMemberRole = {
  member: 'member',
  core_member: 'core_member',
  secretary: 'secretary',
  treasurer: 'treasurer',
  vice_president: 'vice_president',
  president: 'president'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  registered: 'registered',
  waitlisted: 'waitlisted',
  cancelled: 'cancelled',
  attended: 'attended',
  no_show: 'no_show'
};

exports.AttendanceMethod = exports.$Enums.AttendanceMethod = {
  manual: 'manual',
  qr_code: 'qr_code',
  geofence: 'geofence',
  biometric: 'biometric'
};

exports.AttendanceAction = exports.$Enums.AttendanceAction = {
  marked_present: 'marked_present',
  marked_absent: 'marked_absent',
  unmarked: 'unmarked',
  updated_status: 'updated_status'
};

exports.Prisma.ModelName = {
  RefreshToken: 'RefreshToken',
  User: 'User',
  Club: 'Club',
  Event: 'Event',
  UserClub: 'UserClub',
  EventRegistration: 'EventRegistration',
  AttendanceLog: 'AttendanceLog',
  EventQRCode: 'EventQRCode',
  PointsHistory: 'PointsHistory',
  EventFeedback: 'EventFeedback',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  Notification: 'Notification',
  Badge: 'Badge',
  UserBadge: 'UserBadge'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
