// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  student
  club_admin
  super_admin
}

enum ClubCategory {
  technical
  cultural
  sports
  academic
  social_service
  entrepreneurship
  arts
  other
}

enum EventType {
  workshop
  seminar
  competition
  cultural_event
  sports_event
  volunteering
  hackathon
  conference
  social_gathering
  other
}

enum ClubMemberRole {
  member
  core_member
  secretary
  treasurer
  vice_president
  president
}

enum RegistrationStatus {
  registered
  waitlisted
  cancelled
  attended
  no_show
}

enum AttendanceMethod {
  manual
  qr_code
  geofence
  biometric
}

enum AttendanceAction {
  marked_present
  marked_absent
  unmarked
  updated_status
}

// Main Models

model User {
  id                    String   @id @default(uuid())
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  studentId             String?  @unique @map("student_id")
  phone                 String?
  department            String?
  yearOfStudy           Int?     @map("year_of_study")
  role                  UserRole @default(student)
  isVerified            Boolean  @default(false) @map("is_verified")
  isSuspended           Boolean  @default(false) @map("is_suspended")
  isBanned              Boolean  @default(false) @map("is_banned")
  suspendedUntil        DateTime? @map("suspended_until")
  profileImage          String?  @map("profile_image")
  totalPoints           Int      @default(0) @map("total_points")
  totalVolunteerHours   Float    @default(0.00) @map("total_volunteer_hours")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  userClubs             UserClub[]
  eventRegistrations    EventRegistration[]
  createdClubs          Club[]              @relation("ClubCreator")
  createdEvents         Event[]             @relation("EventCreator")
  markedAttendance      EventRegistration[] @relation("AttendanceMarkedBy")
  attendanceLogs        AttendanceLog[]     @relation("AttendanceMarkedBy")
  attendanceLogsUser    AttendanceLog[]     @relation("AttendanceUser")
  createdQRCodes        EventQRCode[]       @relation("QRCodeCreator")
  pointsHistory         PointsHistory[]
  eventFeedback         EventFeedback[]
  chatMessages          ChatMessage[]
  notifications         Notification[]
  userBadges            UserBadge[]

  @@map("users")
}

model Club {
  id               String       @id @default(uuid())
  name             String
  description      String?
  category         ClubCategory
  logoUrl          String?      @map("logo_url")
  coverImageUrl    String?      @map("cover_image_url")
  contactEmail     String?      @map("contact_email")
  isActive         Boolean      @default(true) @map("is_active")
  memberCount      Int          @default(0) @map("member_count")
  createdBy        String       @map("created_by")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  creator          User           @relation("ClubCreator", fields: [createdBy], references: [id])
  userClubs        UserClub[]
  events           Event[]
  chatRooms        ChatRoom[]

  @@map("clubs")
}

model Event {
  id                     String    @id @default(uuid())
  title                  String
  description            String?
  clubId                 String    @map("club_id")
  eventType              EventType @map("event_type")
  startDate              DateTime  @map("start_date")
  endDate                DateTime  @map("end_date")
  location               String?
  maxParticipants        Int?      @map("max_participants")
  registrationDeadline   DateTime? @map("registration_deadline")
  pointsReward           Int       @default(0) @map("points_reward")
  volunteerHours         Float     @default(0.00) @map("volunteer_hours")
  imageUrl               String?   @map("image_url")
  tags                   String[]
  skillAreas             String[]  @map("skill_areas")
  isPublished            Boolean   @default(false) @map("is_published")
  requiresApproval       Boolean   @default(false) @map("requires_approval")
  createdBy              String    @map("created_by")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  club                   Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  creator                User                @relation("EventCreator", fields: [createdBy], references: [id])
  eventRegistrations     EventRegistration[]
  attendanceLogs         AttendanceLog[]
  eventQRCodes           EventQRCode[]
  eventFeedback          EventFeedback[]

  @@map("events")
}

model UserClub {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  clubId    String           @map("club_id")
  role      ClubMemberRole   @default(member)
  joinedAt  DateTime         @default(now()) @map("joined_at")
  isActive  Boolean          @default(true) @map("is_active")

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club             @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
  @@map("user_clubs")
}

model EventRegistration {
  id                        String             @id @default(uuid())
  userId                    String             @map("user_id")
  eventId                   String             @map("event_id")
  registrationDate          DateTime           @default(now()) @map("registration_date")
  status                    RegistrationStatus @default(registered)
  attended                  Boolean            @default(false)
  attendanceMarkedBy        String?            @map("attendance_marked_by")
  attendanceMarkedAt        DateTime?          @map("attendance_marked_at")
  attendanceMethod          AttendanceMethod?  @map("attendance_method")
  checkInTime               DateTime?          @map("check_in_time")
  checkOutTime              DateTime?          @map("check_out_time")
  pointsAwarded             Int                @default(0) @map("points_awarded")
  volunteerHoursAwarded     Float              @default(0.00) @map("volunteer_hours_awarded")
  feedbackSubmitted         Boolean            @default(false) @map("feedback_submitted")
  notes                     String?

  // Relations
  user                      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  event                     Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendanceMarkedByUser    User?              @relation("AttendanceMarkedBy", fields: [attendanceMarkedBy], references: [id])

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model AttendanceLog {
  id             String            @id @default(uuid())
  eventId        String            @map("event_id")
  userId         String            @map("user_id")
  markedBy       String            @map("marked_by")
  action         AttendanceAction
  previousStatus Boolean?          @map("previous_status")
  newStatus      Boolean?          @map("new_status")
  reason         String?
  createdAt      DateTime          @default(now()) @map("created_at")

  // Relations
  event          Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User              @relation("AttendanceUser", fields: [userId], references: [id], onDelete: Cascade)
  markedByUser   User              @relation("AttendanceMarkedBy", fields: [markedBy], references: [id])

  @@map("attendance_logs")
}

model EventQRCode {
  id           String   @id @default(uuid())
  eventId      String   @map("event_id")
  qrCodeData   String   @map("qr_code_data")
  validFrom    DateTime @map("valid_from")
  validUntil   DateTime @map("valid_until")
  maxScans     Int?     @map("max_scans")
  currentScans Int      @default(0) @map("current_scans")
  isActive     Boolean  @default(true) @map("is_active")
  createdBy    String   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  creator      User     @relation("QRCodeCreator", fields: [createdBy], references: [id])

  @@map("event_qr_codes")
}

model PointsHistory {
  id                    String   @id @default(uuid())
  userId                String   @map("user_id")
  eventId               String?  @map("event_id")
  pointsEarned          Int      @map("points_earned")
  volunteerHoursEarned  Float    @default(0.00) @map("volunteer_hours_earned")
  reason                String
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_history")
}

model EventFeedback {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  eventId    String   @map("event_id")
  rating     Int      // 1-5 stars
  feedback   String?
  anonymous  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_feedback")
}

model ChatRoom {
  id          String        @id @default(uuid())
  clubId      String        @map("club_id")
  name        String
  description String?
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  club        Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id         String   @id @default(uuid())
  chatRoomId String   @map("chat_room_id")
  userId     String   @map("user_id")
  content    String
  messageType String  @default("text") @map("message_type") // text, image, file
  fileUrl    String?  @map("file_url")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  message   String
  type      String   // event_reminder, club_announcement, system_notification
  isRead    Boolean  @default(false) @map("is_read")
  actionUrl String?  @map("action_url")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  icon        String
  criteria    String      // JSON string describing badge criteria
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  userBadges  UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  earnedAt  DateTime @default(now()) @map("earned_at")
  eventId   String?  @map("event_id") // Optional: if badge was earned through specific event

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Admin & Moderation Models

model UserModeration {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  action        String   // suspend, ban, warn, etc.
  reason        String
  duration      Int?     // Duration in days (null for permanent)
  moderatedBy   String   @map("moderated_by")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("user_moderations")
}

model ClubModeration {
  id            String   @id @default(uuid())
  clubId        String   @map("club_id")
  action        String   // activate, deactivate, warn, etc.
  reason        String
  moderatedBy   String   @map("moderated_by")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("club_moderations")
}

model EventModeration {
  id            String   @id @default(uuid())
  eventId       String   @map("event_id")
  action        String   // unpublish, delete, warn, etc.
  reason        String
  moderatedBy   String   @map("moderated_by")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("event_moderations")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  type        String   // general, urgent, maintenance, etc.
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("announcements")
}

model RefreshToken {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

model MaintenanceLog {
  id            String   @id @default(uuid())
  tasks         String[] // Array of task names
  results       String[] // Array of results
  performedBy   String   @map("performed_by")
  completedAt   DateTime @map("completed_at")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("maintenance_logs")
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  action      String   // login, create_event, update_club, etc.
  resource    String?  // Resource type (user, event, club, etc.)
  resourceId  String?  @map("resource_id") // ID of the affected resource
  details     String?  // JSON string with additional details
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}